<?xml version="1.0"?>
<root><AttributeHolder Name="Name" Value="TP_Spr"/><AttributeHolder Name="ID" Value="{FABB83D9-B2D2-4276-BB80-89D58BAFB82C}"/><AttributeHolder Name="asmName" Value="TP_Spr"/><ModuleHolder ModuleName="ucTP_Spr_Tar.ASCX" File="ucTP_Spr_Tar.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTP_Spr_Tar.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTP_Spr_Tar&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;TP_Spr_TarLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Название:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_TarLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_Tar.ASCX.cs" File="ucTP_Spr_Tar.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucTP_Spr_Tar - форма редактирования раздела Тариф
  /// &lt;/summary&gt;
  public partial class ucTP_Spr_Tar  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.TP_Spr_Tar RowItem
    {
      get
      {
        return (TP_Spr.TP_Spr_Tar)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;Название&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              TP_Spr_TarLabelInfo.Text = &quot;Error on create row. &quot;;
              TP_Spr_TarLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          TP_Spr_TarLabelInfo.ForeColor = System.Drawing.Color.Green;
          TP_Spr_TarLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        TP_Spr_TarLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        TP_Spr_TarLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Tar.ASCX" File="ucTabTP_Spr_Tar.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabTP_Spr_Tar.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabTP_Spr_Tar&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_TP_Spr_Tar&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_TP_Spr_Tar&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_TarLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Tar.ASCX.cs" File="ucTabTP_Spr_Tar.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabTP_Spr_Tar  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.TP_Spr_Tar_col DataSource
    { 
      get
      {
        return (TP_Spr.TP_Spr_Tar_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;TP_Spr_Tar&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_TP_Spr_Tar.Columns.Clear();
      DataGrid_TP_Spr_Tar.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_TP_Spr_Tar.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_TP_Spr_Tar.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_TP_Spr_Tar.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_TP_Spr_Tar.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Tar.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Tar.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_TP_Spr_Tar.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_TP_Spr_Tar.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Tar.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Tar.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_TP_Spr_Tar.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;Название&quot;;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameTP_Spr_Tar',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_Ing.ASCX" File="ucTP_Spr_Ing.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTP_Spr_Ing.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTP_Spr_Ing&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;TP_Spr_IngLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;ФИО:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblTelefon&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Телефон:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtTelefon&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;100&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblTheUser&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Пользователь:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
&lt;asp:DropDownList id=&quot;cmbTheUser&quot; runat=&quot;server&quot; Width=&quot;100%&quot;&gt;&lt;/asp:DropDownList&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_IngLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_Ing.ASCX.cs" File="ucTP_Spr_Ing.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucTP_Spr_Ing - форма редактирования раздела Инженеры
  /// &lt;/summary&gt;
  public partial class ucTP_Spr_Ing  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.TP_Spr_Ing RowItem
    {
      get
      {
        return (TP_Spr.TP_Spr_Ing)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;ФИО&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Telefon&quot;) &gt; -1)) {
          txtTelefon.Text = GetValueFromRowItem(RowItem.Telefon);
   }
          txtTelefon.ToolTip = &quot;Телефон&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Telefon&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnTelefon&quot;);
            txtTelefon.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Telefon&quot;) &gt; -1) 
          {
            lblTelefon.Visible = false;
            txtTelefon.Visible = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtTelefon, new EventArgs());
          }
          DataTable dtTheUser = MKSNManager.Session.GetData(&quot; select UsersID , dbo.Users_BRIEF_F(UsersID ) BRIEF from Users order by BRIEF &quot;);
          if (dtTheUser!=null) { 
            cmbTheUser.DataSource = dtTheUser;
            cmbTheUser.DataTextField = &quot;BRIEF&quot;;
            cmbTheUser.DataValueField = &quot;UsersID&quot;;
          }
          cmbTheUser.DataBind();
          if (RowItem.TheUser!= null)
          {
            cmbTheUser.SelectedValue = RowItem.TheUser.ID.ToString();
          }
          cmbTheUser.Items.Insert(0, new System.Web.UI.WebControls.ListItem(string.Empty, string.Empty));
          cmbTheUser.ToolTip = &quot;Пользователь&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;TheUser&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnTheUser&quot;);
            cmbTheUser.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;TheUser&quot;) &gt; -1) 
          {
            lblTheUser.Visible = false;
            cmbTheUser.Visible = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(cmbTheUser, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              TP_Spr_IngLabelInfo.Text = &quot;Error on create row. &quot;;
              TP_Spr_IngLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
   RowItem.Telefon = txtTelefon.Text;
      if (cmbTheUser.SelectedValue.ToString() != string.Empty)
      {
        RowItem.TheUser = RowItem.Application.FindRowObject(&quot;Users&quot;, new Guid(cmbTheUser.SelectedValue.ToString()));
      }
      else
      {
        try {
        RowItem.TheUser = null;
        }catch {}
      }
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          TP_Spr_IngLabelInfo.ForeColor = System.Drawing.Color.Green;
          TP_Spr_IngLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        TP_Spr_IngLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        TP_Spr_IngLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Ing.ASCX" File="ucTabTP_Spr_Ing.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabTP_Spr_Ing.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabTP_Spr_Ing&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_TP_Spr_Ing&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_TP_Spr_Ing&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_IngLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Ing.ASCX.cs" File="ucTabTP_Spr_Ing.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabTP_Spr_Ing  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.TP_Spr_Ing_col DataSource
    { 
      get
      {
        return (TP_Spr.TP_Spr_Ing_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;TP_Spr_Ing&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_TP_Spr_Ing.Columns.Clear();
      DataGrid_TP_Spr_Ing.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_TP_Spr_Ing.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_TP_Spr_Ing.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_TP_Spr_Ing.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_TP_Spr_Ing.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Ing.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Ing.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_TP_Spr_Ing.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_TP_Spr_Ing.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Ing.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Ing.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_TP_Spr_Ing.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;ФИО&quot;;
      DataGrid_TP_Spr_Ing.Columns.FromKey(&quot;Telefon&quot;).Header.Caption = &quot;Телефон&quot;;
      DataGrid_TP_Spr_Ing.Columns.FromKey(&quot;TheUser&quot;).Header.Caption = &quot;Пользователь&quot;;
      DataGrid_TP_Spr_Ing.Columns.FromKey(&quot;TheUser_ID&quot;).ServerOnly = true;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameTP_Spr_Ing',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_SPR_MT.ASCX" File="ucTP_SPR_MT.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTP_SPR_MT.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTP_SPR_MT&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;TP_SPR_MTLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Название:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_SPR_MTLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_SPR_MT.ASCX.cs" File="ucTP_SPR_MT.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucTP_SPR_MT - форма редактирования раздела Тип модема
  /// &lt;/summary&gt;
  public partial class ucTP_SPR_MT  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.TP_SPR_MT RowItem
    {
      get
      {
        return (TP_Spr.TP_SPR_MT)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;Название&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              TP_SPR_MTLabelInfo.Text = &quot;Error on create row. &quot;;
              TP_SPR_MTLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          TP_SPR_MTLabelInfo.ForeColor = System.Drawing.Color.Green;
          TP_SPR_MTLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        TP_SPR_MTLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        TP_SPR_MTLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_SPR_MT.ASCX" File="ucTabTP_SPR_MT.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabTP_SPR_MT.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabTP_SPR_MT&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_TP_SPR_MT&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_TP_SPR_MT&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_SPR_MTLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_SPR_MT.ASCX.cs" File="ucTabTP_SPR_MT.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabTP_SPR_MT  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.TP_SPR_MT_col DataSource
    { 
      get
      {
        return (TP_Spr.TP_SPR_MT_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;TP_SPR_MT&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_TP_SPR_MT.Columns.Clear();
      DataGrid_TP_SPR_MT.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_TP_SPR_MT.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_TP_SPR_MT.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_TP_SPR_MT.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_TP_SPR_MT.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_SPR_MT.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_TP_SPR_MT.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_TP_SPR_MT.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_TP_SPR_MT.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_SPR_MT.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_TP_SPR_MT.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_TP_SPR_MT.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;Название&quot;;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameTP_SPR_MT',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_Koor.ASCX" File="ucTP_Spr_Koor.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTP_Spr_Koor.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTP_Spr_Koor&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;TP_Spr_KoorLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;ФИО:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblTheUser&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Пользователь:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
&lt;asp:DropDownList id=&quot;cmbTheUser&quot; runat=&quot;server&quot; Width=&quot;100%&quot;&gt;&lt;/asp:DropDownList&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_KoorLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_Koor.ASCX.cs" File="ucTP_Spr_Koor.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucTP_Spr_Koor - форма редактирования раздела Координатор
  /// &lt;/summary&gt;
  public partial class ucTP_Spr_Koor  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.TP_Spr_Koor RowItem
    {
      get
      {
        return (TP_Spr.TP_Spr_Koor)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;ФИО&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
          DataTable dtTheUser = MKSNManager.Session.GetData(&quot; select UsersID , dbo.Users_BRIEF_F(UsersID ) BRIEF from Users order by BRIEF &quot;);
          if (dtTheUser!=null) { 
            cmbTheUser.DataSource = dtTheUser;
            cmbTheUser.DataTextField = &quot;BRIEF&quot;;
            cmbTheUser.DataValueField = &quot;UsersID&quot;;
          }
          cmbTheUser.DataBind();
          if (RowItem.TheUser!= null)
          {
            cmbTheUser.SelectedValue = RowItem.TheUser.ID.ToString();
          }
          cmbTheUser.Items.Insert(0, new System.Web.UI.WebControls.ListItem(string.Empty, string.Empty));
          cmbTheUser.ToolTip = &quot;Пользователь&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;TheUser&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnTheUser&quot;);
            cmbTheUser.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;TheUser&quot;) &gt; -1) 
          {
            lblTheUser.Visible = false;
            cmbTheUser.Visible = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(cmbTheUser, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              TP_Spr_KoorLabelInfo.Text = &quot;Error on create row. &quot;;
              TP_Spr_KoorLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
      if (cmbTheUser.SelectedValue.ToString() != string.Empty)
      {
        RowItem.TheUser = RowItem.Application.FindRowObject(&quot;Users&quot;, new Guid(cmbTheUser.SelectedValue.ToString()));
      }
      else
      {
        try {
        RowItem.TheUser = null;
        }catch {}
      }
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          TP_Spr_KoorLabelInfo.ForeColor = System.Drawing.Color.Green;
          TP_Spr_KoorLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        TP_Spr_KoorLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        TP_Spr_KoorLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Koor.ASCX" File="ucTabTP_Spr_Koor.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabTP_Spr_Koor.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabTP_Spr_Koor&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_TP_Spr_Koor&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_TP_Spr_Koor&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_KoorLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Koor.ASCX.cs" File="ucTabTP_Spr_Koor.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabTP_Spr_Koor  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.TP_Spr_Koor_col DataSource
    { 
      get
      {
        return (TP_Spr.TP_Spr_Koor_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;TP_Spr_Koor&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_TP_Spr_Koor.Columns.Clear();
      DataGrid_TP_Spr_Koor.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_TP_Spr_Koor.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_TP_Spr_Koor.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_TP_Spr_Koor.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_TP_Spr_Koor.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Koor.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Koor.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_TP_Spr_Koor.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_TP_Spr_Koor.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Koor.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Koor.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_TP_Spr_Koor.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;ФИО&quot;;
      DataGrid_TP_Spr_Koor.Columns.FromKey(&quot;TheUser&quot;).Header.Caption = &quot;Пользователь&quot;;
      DataGrid_TP_Spr_Koor.Columns.FromKey(&quot;TheUser_ID&quot;).ServerOnly = true;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameTP_Spr_Koor',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_Metro.ASCX" File="ucTP_Spr_Metro.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTP_Spr_Metro.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTP_Spr_Metro&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;TP_Spr_MetroLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Название:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_MetroLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_Metro.ASCX.cs" File="ucTP_Spr_Metro.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucTP_Spr_Metro - форма редактирования раздела Метро
  /// &lt;/summary&gt;
  public partial class ucTP_Spr_Metro  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.TP_Spr_Metro RowItem
    {
      get
      {
        return (TP_Spr.TP_Spr_Metro)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;Название&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              TP_Spr_MetroLabelInfo.Text = &quot;Error on create row. &quot;;
              TP_Spr_MetroLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          TP_Spr_MetroLabelInfo.ForeColor = System.Drawing.Color.Green;
          TP_Spr_MetroLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        TP_Spr_MetroLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        TP_Spr_MetroLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Metro.ASCX" File="ucTabTP_Spr_Metro.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabTP_Spr_Metro.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabTP_Spr_Metro&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_TP_Spr_Metro&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_TP_Spr_Metro&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_MetroLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Metro.ASCX.cs" File="ucTabTP_Spr_Metro.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabTP_Spr_Metro  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.TP_Spr_Metro_col DataSource
    { 
      get
      {
        return (TP_Spr.TP_Spr_Metro_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;TP_Spr_Metro&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_TP_Spr_Metro.Columns.Clear();
      DataGrid_TP_Spr_Metro.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_TP_Spr_Metro.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_TP_Spr_Metro.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_TP_Spr_Metro.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_TP_Spr_Metro.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Metro.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Metro.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_TP_Spr_Metro.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_TP_Spr_Metro.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Metro.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Metro.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_TP_Spr_Metro.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;Название&quot;;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameTP_Spr_Metro',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucRayon.ASCX" File="ucRayon.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucRayon.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucRayon&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;RayonLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Район:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function RayonLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucRayon.ASCX.cs" File="ucRayon.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucRayon - форма редактирования раздела Район
  /// &lt;/summary&gt;
  public partial class ucRayon  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.Rayon RowItem
    {
      get
      {
        return (TP_Spr.Rayon)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;Район&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              RayonLabelInfo.Text = &quot;Error on create row. &quot;;
              RayonLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          RayonLabelInfo.ForeColor = System.Drawing.Color.Green;
          RayonLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        RayonLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        RayonLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabRayon.ASCX" File="ucTabRayon.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabRayon.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabRayon&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_Rayon&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_Rayon&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function RayonLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabRayon.ASCX.cs" File="ucTabRayon.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabRayon  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.Rayon_col DataSource
    { 
      get
      {
        return (TP_Spr.Rayon_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;Rayon&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_Rayon.Columns.Clear();
      DataGrid_Rayon.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_Rayon.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_Rayon.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_Rayon.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_Rayon.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_Rayon.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_Rayon.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_Rayon.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_Rayon.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_Rayon.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_Rayon.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_Rayon.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;Район&quot;;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameRayon',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_Oper.ASCX" File="ucTP_Spr_Oper.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTP_Spr_Oper.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTP_Spr_Oper&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;TP_Spr_OperLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Оператор:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblTheUser&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Пользователь:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
&lt;asp:DropDownList id=&quot;cmbTheUser&quot; runat=&quot;server&quot; Width=&quot;100%&quot;&gt;&lt;/asp:DropDownList&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_OperLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_Oper.ASCX.cs" File="ucTP_Spr_Oper.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucTP_Spr_Oper - форма редактирования раздела Оператор
  /// &lt;/summary&gt;
  public partial class ucTP_Spr_Oper  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.TP_Spr_Oper RowItem
    {
      get
      {
        return (TP_Spr.TP_Spr_Oper)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;Оператор&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
          DataTable dtTheUser = MKSNManager.Session.GetData(&quot; select UsersID , dbo.Users_BRIEF_F(UsersID ) BRIEF from Users order by BRIEF &quot;);
          if (dtTheUser!=null) { 
            cmbTheUser.DataSource = dtTheUser;
            cmbTheUser.DataTextField = &quot;BRIEF&quot;;
            cmbTheUser.DataValueField = &quot;UsersID&quot;;
          }
          cmbTheUser.DataBind();
          if (RowItem.TheUser!= null)
          {
            cmbTheUser.SelectedValue = RowItem.TheUser.ID.ToString();
          }
          cmbTheUser.Items.Insert(0, new System.Web.UI.WebControls.ListItem(string.Empty, string.Empty));
          cmbTheUser.ToolTip = &quot;Пользователь&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;TheUser&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnTheUser&quot;);
            cmbTheUser.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;TheUser&quot;) &gt; -1) 
          {
            lblTheUser.Visible = false;
            cmbTheUser.Visible = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(cmbTheUser, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              TP_Spr_OperLabelInfo.Text = &quot;Error on create row. &quot;;
              TP_Spr_OperLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
      if (cmbTheUser.SelectedValue.ToString() != string.Empty)
      {
        RowItem.TheUser = RowItem.Application.FindRowObject(&quot;Users&quot;, new Guid(cmbTheUser.SelectedValue.ToString()));
      }
      else
      {
        try {
        RowItem.TheUser = null;
        }catch {}
      }
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          TP_Spr_OperLabelInfo.ForeColor = System.Drawing.Color.Green;
          TP_Spr_OperLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        TP_Spr_OperLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        TP_Spr_OperLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Oper.ASCX" File="ucTabTP_Spr_Oper.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabTP_Spr_Oper.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabTP_Spr_Oper&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_TP_Spr_Oper&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_TP_Spr_Oper&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_OperLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_Oper.ASCX.cs" File="ucTabTP_Spr_Oper.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabTP_Spr_Oper  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.TP_Spr_Oper_col DataSource
    { 
      get
      {
        return (TP_Spr.TP_Spr_Oper_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;TP_Spr_Oper&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_TP_Spr_Oper.Columns.Clear();
      DataGrid_TP_Spr_Oper.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_TP_Spr_Oper.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_TP_Spr_Oper.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_TP_Spr_Oper.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_TP_Spr_Oper.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Oper.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Oper.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_TP_Spr_Oper.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_TP_Spr_Oper.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_Oper.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_Oper.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_TP_Spr_Oper.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;Оператор&quot;;
      DataGrid_TP_Spr_Oper.Columns.FromKey(&quot;TheUser&quot;).Header.Caption = &quot;Пользователь&quot;;
      DataGrid_TP_Spr_Oper.Columns.FromKey(&quot;TheUser_ID&quot;).ServerOnly = true;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameTP_Spr_Oper',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_VrVisInst.ASCX" File="ucTP_Spr_VrVisInst.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTP_Spr_VrVisInst.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTP_Spr_VrVisInst&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;TP_Spr_VrVisInstLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Время визита инсталятора:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_VrVisInstLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_VrVisInst.ASCX.cs" File="ucTP_Spr_VrVisInst.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucTP_Spr_VrVisInst - форма редактирования раздела Время визита инсталятора
  /// &lt;/summary&gt;
  public partial class ucTP_Spr_VrVisInst  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.TP_Spr_VrVisInst RowItem
    {
      get
      {
        return (TP_Spr.TP_Spr_VrVisInst)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;Время визита инсталятора&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              TP_Spr_VrVisInstLabelInfo.Text = &quot;Error on create row. &quot;;
              TP_Spr_VrVisInstLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          TP_Spr_VrVisInstLabelInfo.ForeColor = System.Drawing.Color.Green;
          TP_Spr_VrVisInstLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        TP_Spr_VrVisInstLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        TP_Spr_VrVisInstLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_VrVisInst.ASCX" File="ucTabTP_Spr_VrVisInst.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabTP_Spr_VrVisInst.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabTP_Spr_VrVisInst&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_TP_Spr_VrVisInst&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_TP_Spr_VrVisInst&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_VrVisInstLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_VrVisInst.ASCX.cs" File="ucTabTP_Spr_VrVisInst.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabTP_Spr_VrVisInst  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.TP_Spr_VrVisInst_col DataSource
    { 
      get
      {
        return (TP_Spr.TP_Spr_VrVisInst_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;TP_Spr_VrVisInst&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_TP_Spr_VrVisInst.Columns.Clear();
      DataGrid_TP_Spr_VrVisInst.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_TP_Spr_VrVisInst.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_TP_Spr_VrVisInst.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_TP_Spr_VrVisInst.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_TP_Spr_VrVisInst.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_VrVisInst.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_VrVisInst.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_TP_Spr_VrVisInst.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_TP_Spr_VrVisInst.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_VrVisInst.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_VrVisInst.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_TP_Spr_VrVisInst.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;Время визита инсталятора&quot;;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameTP_Spr_VrVisInst',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_SrochDog.ASCX" File="ucTP_Spr_SrochDog.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTP_Spr_SrochDog.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTP_Spr_SrochDog&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;TP_Spr_SrochDogLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Название:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_SrochDogLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_Spr_SrochDog.ASCX.cs" File="ucTP_Spr_SrochDog.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucTP_Spr_SrochDog - форма редактирования раздела Срок договора
  /// &lt;/summary&gt;
  public partial class ucTP_Spr_SrochDog  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.TP_Spr_SrochDog RowItem
    {
      get
      {
        return (TP_Spr.TP_Spr_SrochDog)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;Название&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              TP_Spr_SrochDogLabelInfo.Text = &quot;Error on create row. &quot;;
              TP_Spr_SrochDogLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          TP_Spr_SrochDogLabelInfo.ForeColor = System.Drawing.Color.Green;
          TP_Spr_SrochDogLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        TP_Spr_SrochDogLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        TP_Spr_SrochDogLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_SrochDog.ASCX" File="ucTabTP_Spr_SrochDog.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabTP_Spr_SrochDog.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabTP_Spr_SrochDog&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_TP_Spr_SrochDog&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_TP_Spr_SrochDog&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_Spr_SrochDogLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_Spr_SrochDog.ASCX.cs" File="ucTabTP_Spr_SrochDog.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabTP_Spr_SrochDog  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.TP_Spr_SrochDog_col DataSource
    { 
      get
      {
        return (TP_Spr.TP_Spr_SrochDog_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;TP_Spr_SrochDog&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_TP_Spr_SrochDog.Columns.Clear();
      DataGrid_TP_Spr_SrochDog.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_TP_Spr_SrochDog.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_TP_Spr_SrochDog.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_TP_Spr_SrochDog.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_TP_Spr_SrochDog.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_SrochDog.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_SrochDog.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_TP_Spr_SrochDog.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_TP_Spr_SrochDog.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_Spr_SrochDog.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_TP_Spr_SrochDog.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_TP_Spr_SrochDog.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;Название&quot;;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameTP_Spr_SrochDog',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_SPR_Port.ASCX" File="ucTP_SPR_Port.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTP_SPR_Port.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTP_SPR_Port&quot; %&gt;
&lt;TABLE id=&quot;Table1&quot; cellSpacing=&quot;0&quot; cellPadding=&quot;1&quot; width=&quot;100%&quot; border=&quot;0&quot;&gt;
  &lt;TR&gt;
  &lt;TD colspan=3 align=center&gt;
        &lt;asp:Label id=&quot;TP_SPR_PortLabelInfo&quot; runat=&quot;server&quot;&gt;&lt;/asp:Label&gt;
  &lt;/TD&gt;
  &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD width=20%&gt;
        &lt;asp:Label id=&quot;lblName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; ForeColor=&quot;#000000&quot;&gt;Название:&lt;/asp:Label&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:TextBox id=&quot;txtName&quot; runat=&quot;server&quot; Width=&quot;100%&quot; MaxLength=&quot;255&quot; Text=&quot;&quot;&gt;&lt;/asp:TextBox&gt;
      &lt;/TD&gt;
      &lt;TD width=40%&gt;
          &lt;asp:RequiredFieldValidator id=&quot;rfvName&quot; runat=&quot;server&quot; ErrorMessage=&quot;Fill this field&quot; ControlToValidate=&quot;txtName&quot;&gt;&lt;/asp:RequiredFieldValidator&gt;
      &lt;/TD&gt;
    &lt;/TR&gt;
  &lt;TR&gt;
      &lt;TD&gt;
      &lt;/TD&gt;
      &lt;TD align=&quot;right&quot;&gt;
        &lt;asp:Button id=&quot;btnSave&quot; runat=&quot;server&quot; Text=&quot;Save&quot; Width=&quot;88px&quot;&gt;&lt;/asp:Button&gt;
        &lt;asp:Button id=&quot;btnCancel&quot; runat=&quot;server&quot; Text=&quot;Cancel&quot; Width=&quot;88px&quot; CausesValidation=&quot;false&quot;&gt;&lt;/asp:Button&gt;&amp;nbsp;
      &lt;/TD&gt;
      &lt;TD&gt;&lt;/TD&gt;
   &lt;/TR&gt;
&lt;/TABLE&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_SPR_PortLoad()

{

    &lt;%=GetOnLoadScript()%&gt;

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTP_SPR_Port.ASCX.cs" File="ucTP_SPR_Port.ASCX.cs"><BlockHolder BlockName="code" BlockCode="

namespace TP_Spr.ASPNET
{
  using System;
  using System.Data;
  using System.IO;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using System.Globalization;
  using Mokasin.ASPNET;
  using TP_Spr;

  /// &lt;summary&gt;
  ///    ucTP_SPR_Port - форма редактирования раздела Порты
  /// &lt;/summary&gt;
  public partial class ucTP_SPR_Port  : ucParent 
  {
    protected ArrayList ControlsToHide = new ArrayList();
    public override event System.EventHandler OnFieldInit;
    public override event System.EventHandler OnBeforeSave;
    public override event System.EventHandler OnAfterSave;
    public override event System.EventHandler OnCancel;
    public override event InfoEventHandler OnInfo;

    public override string CancelButtonID
    {
      get
      {
        return btnCancel.ClientID;
      }
    }

    public override string SaveButtonID
    {
      get
      {
        return btnSave.ClientID;
      }
    }

    public TP_Spr.TP_SPR_Port RowItem
    {
      get
      {
        return (TP_Spr.TP_SPR_Port)base.MKSNRowItem;
      }
    }

    private bool ReadOnly
    {
      get
      {
        return !AllowEdit;
      }
    }

    private void Page_Unload(object sender, System.EventArgs e)
    {
      return;
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (RowItem != null)
      {
   if (!(DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1)) {
          txtName.Text = GetValueFromRowItem(RowItem.Name);
   }
          txtName.ToolTip = &quot;Название&quot;;
          if (ReadOnly || (DataComponent.DenyEdit.IndexOf(&quot;Name&quot;) &gt; -1))
          {
            ControlsToHide.Add(&quot;btnName&quot;);
            txtName.Enabled = false;
            rfvName.Enabled = false;
          }
          if (DataComponent.DenyVisible.IndexOf(&quot;Name&quot;) &gt; -1) 
          {
            lblName.Visible = false;
            txtName.Visible = false;
            rfvName.Enabled = false;
          }
          if (OnFieldInit != null)
          {
            OnFieldInit(txtName, new EventArgs());
          }
      }
      if (ReadOnly) btnSave.Enabled = false;
    }

    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
      this.Load += new System.EventHandler(this.Page_Load);
      this.Unload += new System.EventHandler(this.Page_Unload);

    }
    #endregion

     private string GetValueFromRowItem(object RowItemValue)
     {
       string Result = string.Empty;
       if (RowItemValue != null)
       {
         Result = RowItemValue.ToString();
       }

       return Result;
     }

    private void btnCancel_Click(object sender, System.EventArgs e)
    {
        if (OnCancel != null)
        {
          OnCancel(this, new EventArgs());
        }
        else
        {
           //Response.Redirect(BackUrl);
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
    }

    private void btnSave_Click(object sender, System.EventArgs e)
    {
         if (RowItem == null)
         {
           if (OnInfo != null)
           {
              OnInfo(this, new InfoEventArgs(&quot;Error on create row.&quot;, System.Drawing.Color.Red));
           }
           else
           {
              TP_SPR_PortLabelInfo.Text = &quot;Error on create row. &quot;;
              TP_SPR_PortLabelInfo.ForeColor = System.Drawing.Color.Red;
           }
           return;
         }
        if (OnBeforeSave != null)
        {
          OnBeforeSave(this, new EventArgs());
        }
   RowItem.Name = txtName.Text;
      try
      {
        RowItem.Save();
        if (OnInfo != null)
        {
          OnInfo(this, new InfoEventArgs(&quot;Row saved&quot;, System.Drawing.Color.Green));
        }
        else
        {
          TP_SPR_PortLabelInfo.ForeColor = System.Drawing.Color.Green;
          TP_SPR_PortLabelInfo.Text = &quot;Row saved&quot;;
        }
        if (OnAfterSave != null)
        {
          OnAfterSave(this, new EventArgs());
        }
          try
        {
                    object obj;
                    obj = this;
                    while ( !(obj is  VACOOLA.ParentPage) &amp;&amp; obj!=null){
                        obj = (obj as System.Web.UI.Control).Parent;
                    }
                    (obj as VACOOLA.ParentPage).GoBack();
                }
                catch { }
      }
      catch(Exception Ex)
      {
        TP_SPR_PortLabelInfo.Text = &quot;Save error. &quot; + Ex.Message;
        TP_SPR_PortLabelInfo.ForeColor = System.Drawing.Color.Red;
      }
    }
    private DataView ConfigureView(DataTable dt, string DataTextFormatString)
    {
      DataView Result = null;
      DataTable NewDT = new DataTable(dt.TableName);
      NewDT.Columns.Add(&quot;text&quot;);
      NewDT.Columns.Add(&quot;id&quot;);
      foreach(DataRow dr  in dt.Rows)
      {
        DataRow newDr = NewDT.NewRow();
        newDr[&quot;id&quot;] = dr[&quot;ID&quot;].ToString();
        string Text =  DataTextFormatString;
        foreach(DataColumn col in dt.Columns )
        {
           Text = Text.Replace(col.ColumnName, dr[col].ToString());
        }
        newDr[&quot;text&quot;] = Text;
        NewDT.Rows.Add(newDr);
      }
      Result = NewDT.DefaultView;
      Result.Sort = &quot;text&quot;;
      return Result;
    }

    protected string GetOnLoadScript()
    {
      string result = string.Empty;
      if (ControlsToHide != null)
      {
        foreach(string str in ControlsToHide)
        {
          result += &quot;ElementHide('&quot; + str + &quot;');&quot;;
        }
      }
      return result;
    }
  }
}

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_SPR_Port.ASCX" File="ucTabTP_SPR_Port.ASCX"><BlockHolder BlockName="code" BlockCode="&lt;%@ Control Language=&quot;c#&quot; AutoEventWireup=&quot;false&quot; CodeFile=&quot;ucTabTP_SPR_Port.ascx.cs&quot; Inherits=&quot;TP_Spr.ASPNET.ucTabTP_SPR_Port&quot; %&gt;
&lt;%@ Register Assembly=&quot;Infragistics2.WebUI.UltraWebGrid.v6.2, Version=6.2.20062.34, Culture=neutral, PublicKeyToken=7dd5c3163f2cd0cb&quot;
Namespace=&quot;Infragistics.WebUI.UltraWebGrid&quot; TagPrefix=&quot;igtbl&quot; %&gt;
&lt;asp:HyperLink id=&quot;HyperLinkAddNew&quot; runat=&quot;server&quot;&gt;&lt;/asp:HyperLink&gt;&lt;br&gt;
 &lt;igtbl:ultrawebgrid id=&quot;DataGrid_TP_SPR_Port&quot; runat=&quot;server&quot; Width=&quot;100%&quot; Height=&quot;350px&quot;&gt;&lt;Bands&gt;
&lt;igtbl:UltraGridBand&gt;
&lt;AddNewRow View=&quot;NotSet&quot; Visible=&quot;NotSet&quot;&gt;&lt;/AddNewRow&gt;
&lt;FilterOptions EmptyString=&quot;&quot; AllString=&quot;&quot; NonEmptyString=&quot;&quot; AllowRowFiltering=&quot;OnClient&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;
&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptions&gt;
&lt;/igtbl:UltraGridBand&gt;
&lt;/Bands&gt;
&lt;DisplayLayout ViewType=&quot;OutlookGroupBy&quot; Version=&quot;4.00&quot; AllowSortingDefault=&quot;OnClient&quot; AllowColSizingDefault=&quot;Free&quot; HeaderClickActionDefault=&quot;SortSingle&quot; Name=&quot;ctl00xDataGrid_TP_SPR_Port&quot; BorderCollapseDefault=&quot;Separate&quot; RowSelectorsDefault=&quot;No&quot; RowHeightDefault=&quot;20px&quot; AllowColumnMovingDefault=&quot;OnServer&quot; SelectTypeRowDefault=&quot;Single&quot;&gt;
&lt;GroupByBox&gt;
&lt;Style BorderColor=&quot;Window&quot; BackColor=&quot;ActiveBorder&quot;&gt;&lt;/Style&gt;
&lt;/GroupByBox&gt;
&lt;GroupByRowStyleDefault BorderColor=&quot;Window&quot; BackColor=&quot;Control&quot;&gt;&lt;/GroupByRowStyleDefault&gt;
&lt;FooterStyleDefault BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/FooterStyleDefault&gt;

&lt;RowStyleDefault BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;Window&quot; ColorLeft=&quot;Window&quot;&gt;&lt;/BorderDetails&gt;

&lt;Padding Left=&quot;3px&quot;&gt;&lt;/Padding&gt;
&lt;/RowStyleDefault&gt;

&lt;FilterOptionsDefault EmptyString=&quot;(Empty)&quot; AllString=&quot;(All)&quot; NonEmptyString=&quot;(NonEmpty)&quot;&gt;
&lt;FilterDropDownStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;Silver&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;11px&quot; Font-Names=&quot;Verdana,Arial,Helvetica,sans-serif&quot; BackColor=&quot;White&quot; Width=&quot;200px&quot; CustomRules=&quot;overflow:auto;&quot;&gt;
&lt;Padding Left=&quot;2px&quot;&gt;&lt;/Padding&gt;
&lt;/FilterDropDownStyle&gt;

&lt;FilterHighlightRowStyle ForeColor=&quot;White&quot; BackColor=&quot;#151C55&quot;&gt;&lt;/FilterHighlightRowStyle&gt;
&lt;/FilterOptionsDefault&gt;

&lt;HeaderStyleDefault HorizontalAlign=&quot;Left&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/HeaderStyleDefault&gt;

&lt;EditCellStyleDefault BorderWidth=&quot;0px&quot; BorderStyle=&quot;None&quot;&gt;&lt;/EditCellStyleDefault&gt;

&lt;FrameStyle BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; Font-Size=&quot;8.25pt&quot; Font-Names=&quot;Microsoft Sans Serif&quot; BackColor=&quot;Window&quot; Width=&quot;100%&quot;&gt;&lt;/FrameStyle&gt;

&lt;Pager&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;LightGray&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/Pager&gt;

&lt;AddNewBox&gt;
&lt;Style BorderWidth=&quot;1px&quot; BorderColor=&quot;InactiveCaption&quot; BorderStyle=&quot;Solid&quot; BackColor=&quot;Window&quot;&gt;
&lt;BorderDetails ColorTop=&quot;White&quot; WidthLeft=&quot;1px&quot; WidthTop=&quot;1px&quot; ColorLeft=&quot;White&quot;&gt;&lt;/BorderDetails&gt;
&lt;/Style&gt;
&lt;/AddNewBox&gt;
&lt;/DisplayLayout&gt;
&lt;/igtbl:ultrawebgrid&gt;
&lt;%=ClientScript()%&gt;
&lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;

function TP_SPR_PortLoad()

{

}

function ElementShow(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = '';

 }

}

function ElementHide(elName)

{

 var el;

 el = document.getElementById(elName);

 if (el != null)

 {

   el.style.display = 'none';

 }

}

&lt;/script&gt;


"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ucTabTP_SPR_Port.ASCX.cs" File="ucTabTP_SPR_Port.ASCX.cs"><BlockHolder BlockName="code" BlockCode="
  namespace TP_Spr.ASPNET
{
  #region MTZ ASP NET Generator code
  using System;
  using System.Data;
  using System.Collections;
  using System.Drawing;
  using System.Web;
  using System.Web.UI.WebControls;
  using System.Web.UI.HtmlControls;
  using Mokasin.ASPNET;
  using TP_Spr;
  public partial class ucTabTP_SPR_Port  : ucParent
  {
    // Добавленное руками
    string EditColumnName = &quot;EditColumn&quot;;
    string DeleteParameterName = &quot;DeleteParameterName&quot;;
    string DeleteColumnName = &quot;DeleteColumn&quot;;
    string EditParameterName = &quot;EditParameterName&quot;;
    private int EditColumnIndex = -1;
    private int DeleteColumnIndex = -1;
    private int SelectColumnIndex = -1;

    public  TP_Spr.TP_SPR_Port_col DataSource
    { 
      get
      {
        return (TP_Spr.TP_SPR_Port_col)base.MKSNDataSource;
      }
    }

    private void Page_Load(object sender, System.EventArgs e)
    {
      base.Page_Load(sender,e); 
      if (!IsPostBack) PageNum = Parameter(&quot;PageNum&quot;);
      string EVENTTARGET = string.Empty;
      string EVENTARGUMENT = string.Empty;
      if (Request.Form[&quot;__EVENTTARGET&quot;] != null)   EVENTTARGET = Request.Form[&quot;__EVENTTARGET&quot;].ToString();
      if (Request.Form[&quot;__EVENTARGUMENT&quot;] != null)   EVENTARGUMENT = Request.Form[&quot;__EVENTARGUMENT&quot;].ToString();
    // БЛОК УДАЛЕНИЯ ЗАПИСИ begin
      if (EVENTTARGET  == DeleteParameterName + &quot;TP_SPR_Port&quot;)
      {
        string id = EVENTARGUMENT;
        if (id != string.Empty)
        {
         // УДАЛЯЕМ ОБЪЕКТ
         DataSource.Delete(id);
         DataSource.Refresh();
        }
      }
      // БЛОК УДАЛЕНИЯ ЗАПИСИ end
      // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ begin
      if (EVENTTARGET == EditParameterName)
      {
        string id = string.Empty;
        bool bEdit = false;
          try
          {
            bEdit = EVENTARGUMENT.Substring(0,1) == &quot;1&quot;;
            id = EVENTARGUMENT.ToString().Substring(1);
          }
          catch{}
      if (id != string.Empty)
      {
        string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
        AddParameter(ref EditURL, DataComponent.SelectIDParameterName, id);
        AddParameter(ref EditURL, &quot;ObjectID&quot;, this.ObjectID);
        if (!bEdit)
          AddParameter(ref EditURL, &quot;mode&quot;, &quot;readonly&quot;);
        Response.Redirect(EditURL);
      }
     }
     // БЛОК РЕДАКТИРОВАНИЯ ЗАПИСИ end
     LoadData();
   }

    private void LoadData()
    {
      if (DataSource != null)
      {
              DataSource.Refresh();
              DataTable = DataSource.GetDataTable();
      }
      if (DataTable  != null)
      {
        DataView = DataComponent.PrepareDataSourceIG(DataTable, EditPage, AllowEdit, Mode.ToLower().IndexOf(&quot;readonly&quot;) &lt; -1, ref EditColumnName, ref DeleteColumnName,  Server);
      }

      DataGrid_TP_SPR_Port.Columns.Clear();
      DataGrid_TP_SPR_Port.DataSource = DataView;
      this.DataBind();
     // change column headers here
      DataGrid_TP_SPR_Port.Columns.FromKey(&quot;ID&quot;).ServerOnly = true;
      DataGrid_TP_SPR_Port.Columns.FromKey(&quot;Brief&quot;).ServerOnly = true;

      if (DataGrid_TP_SPR_Port.Columns.FromKey(EditColumnName) != null)
      {
          DataGrid_TP_SPR_Port.Columns.FromKey(EditColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_SPR_Port.Columns.FromKey(EditColumnName).AllowRowFiltering = false;
          DataGrid_TP_SPR_Port.Columns.FromKey(EditColumnName).Header.Caption = &quot;Edit&quot;;
      }
      if (DataGrid_TP_SPR_Port.Columns.FromKey(DeleteColumnName) != null)
      {
          DataGrid_TP_SPR_Port.Columns.FromKey(DeleteColumnName).AllowGroupBy = Infragistics.WebUI.UltraWebGrid.AllowGroupBy.No;
          DataGrid_TP_SPR_Port.Columns.FromKey(DeleteColumnName).AllowRowFiltering = false;
          DataGrid_TP_SPR_Port.Columns.FromKey(DeleteColumnName).Header.Caption = &quot;Delete&quot;;
      }

      DataGrid_TP_SPR_Port.Columns.FromKey(&quot;Name&quot;).Header.Caption = &quot;Название&quot;;
      if (AllowAddNew &amp;&amp; AllowEdit)
      {
         if (EditPage != null)
         {
           string EditURL = Request.ApplicationPath + &quot;/&quot; + EditPage.URL(Server);
           AddParameter(ref EditURL, &quot;mode&quot;, &quot;addnew&quot;);
           AddParameter(ref EditURL, &quot;ObjectID&quot;, ObjectID);
           HyperLinkAddNew.Text = &quot;New row&quot;;
           HyperLinkAddNew.NavigateUrl = EditURL;
           HyperLinkAddNew.ImageUrl = &quot;../../images/new.gif&quot;;
         }
      }
    }
    protected string ClientScript()
    {
      string Result = string.Empty;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function ConfirmDelete(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;if (confirm('Delete row?') != 0)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot;__doPostBack('DeleteParameterNameTP_SPR_Port',id);\n&quot;;
      Result += &quot;}\n}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToEdit(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','1'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      Result += &quot;&lt;script language=\&quot;Javascript\&quot;&gt;\n&quot;;
      Result +=  &quot;function LinkToView(id)\n&quot;;
      Result += &quot;{\n&quot;;
      Result += &quot; __doPostBack('&quot; + EditParameterName + &quot;','0'+id);\n&quot;;
      Result += &quot;}\n&quot;;
      Result += &quot;&lt;/script&gt;\n&quot;;
      return Result;
    }
    #region Web Form Designer generated code
    override protected void OnInit(EventArgs e)
    {
      base.OnInit(e);
      InitializeComponent();
    }

    private void InitializeComponent()
    {
      this.Load += new System.EventHandler(this.Page_Load);

    }
    #endregion

  }
  #endregion
}

"><FormData Name=""/></BlockHolder></ModuleHolder></root>
