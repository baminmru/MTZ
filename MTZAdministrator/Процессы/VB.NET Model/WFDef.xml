<?xml version="1.0"?>
<root><AttributeHolder Name="Name" Value="WFDef"/><AttributeHolder Name="ID" Value="{846F1B72-C17D-4601-AA8E-A2967B533841}"/><AttributeHolder Name="asmName" Value="WFDef"/><ModuleHolder ModuleName="WFDef" File="WFDef.vbproj"><BlockHolder BlockName="code" BlockCode="&lt;VisualStudioProject&gt;
    &lt;VisualBasic
        ProjectType = &quot;Local&quot;
        ProductVersion = &quot;7.10.3077&quot;
        SchemaVersion = &quot;2.0&quot;
        ProjectGuid = &quot;{74752E54-3D9A-497B-955A-55EC5F18B1C3}&quot;
    &gt;
        &lt;Build&gt;
            &lt;Settings
        ApplicationIcon = &quot;&quot;
        AssemblyKeyContainerName = &quot;&quot;
        AssemblyName = &quot;WFDef&quot;
        AssemblyOriginatorKeyFile = &quot;&quot;
        AssemblyOriginatorKeyMode = &quot;None&quot;
        DefaultClientScript = &quot;JScript&quot;
        DefaultHTMLPageLayout = &quot;Grid&quot;
        DefaultTargetSchema = &quot;IE50&quot;
        DelaySign = &quot;false&quot;
        OutputType = &quot;Library&quot;
        RootNamespace = &quot;WFDef&quot;
        OptionCompare = &quot;Binary&quot;
        OptionExplicit = &quot;On&quot;
        OptionStrict = &quot;Off&quot;
        StartupObject = &quot;&quot;
      &gt;
                &lt;Config
                    Name = &quot;Debug&quot;
                    BaseAddress = &quot;285212672&quot;
                    ConfigurationOverrideFile = &quot;&quot;
                    DefineConstants = &quot;&quot;
                    DefineDebug = &quot;true&quot;
                    DefineTrace = &quot;true&quot;
                    DebugSymbols = &quot;true&quot;
                    IncrementalBuild = &quot;true&quot;
                    Optimize = &quot;false&quot;
                    OutputPath = &quot;bin\&quot;
                    RegisterForComInterop = &quot;false&quot;
                    RemoveIntegerChecks = &quot;false&quot;
                    TreatWarningsAsErrors = &quot;false&quot;
                    WarningLevel = &quot;1&quot;
                /&gt;
                &lt;Config
                    Name = &quot;Release&quot;
                    BaseAddress = &quot;285212672&quot;
                    ConfigurationOverrideFile = &quot;&quot;
                    DefineConstants = &quot;&quot;
                    DefineDebug = &quot;false&quot;
                    DefineTrace = &quot;true&quot;
                    DebugSymbols = &quot;false&quot;
                    IncrementalBuild = &quot;false&quot;
                    Optimize = &quot;true&quot;
                    OutputPath = &quot;bin\&quot;
                    RegisterForComInterop = &quot;false&quot;
                    RemoveIntegerChecks = &quot;false&quot;
                    TreatWarningsAsErrors = &quot;false&quot;
                    WarningLevel = &quot;1&quot;
                /&gt;
            &lt;/Settings&gt;
            &lt;References&gt;
                &lt;Reference
                    Name = &quot;System&quot;
                    AssemblyName = &quot;System&quot;
                /&gt;
                &lt;Reference
                    Name = &quot;System.Data&quot;
                    AssemblyName = &quot;System.Data&quot;
                /&gt;
                &lt;Reference
                    Name = &quot;System.XML&quot;
                    AssemblyName = &quot;System.Xml&quot;
                /&gt;
                &lt;Reference
                Name = &quot;MKSNManager&quot;
                AssemblyName = &quot;MKSNManager&quot;
                HintPath = &quot;C:\BAMI\MTZ.NET\MKSNMANAGER\bin\MKSNManager.dll&quot;
                /&gt;
            &lt;/References&gt;
      &lt;Imports&gt;
        &lt;Import Namespace = &quot;System&quot; /&gt;
        &lt;Import Namespace = &quot;System.Data&quot; /&gt;
        &lt;Import Namespace = &quot;System.Collections&quot; /&gt;
        &lt;Import Namespace = &quot;System.Xml&quot; /&gt;
      &lt;/Imports&gt;
        &lt;/Build&gt;
        &lt;Files&gt;
            &lt;Include&gt;
                &lt;File
                    RelPath = &quot;AssemblyInfo.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;Application.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFDef_param.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFDef_param_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFDef_Doc.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFDef_Doc_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFDef_func.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFDef_func_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFDef_master.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFDef_master_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFDef_INFO.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFDef_INFO_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFDef_links.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFDef_links_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFDef_linkres.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFDef_linkres_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

            &lt;/Include&gt;
        &lt;/Files&gt;
    &lt;/VisualBasic&gt;
&lt;/VisualStudioProject&gt;
"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="AssemblyInfo" File="AssemblyInfo.vb"><BlockHolder BlockName="code" BlockCode="
Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices
&lt;Assembly: AssemblyTitle(&quot;&quot;)&gt;
&lt;Assembly: AssemblyDescription(&quot;&quot;)&gt;
&lt;Assembly: AssemblyCompany(&quot;&quot;)&gt;
&lt;Assembly: AssemblyProduct(&quot;&quot;)&gt;
&lt;Assembly: AssemblyCopyright(&quot;&quot;)&gt;
&lt;Assembly: AssemblyTrademark(&quot;&quot;)&gt;
&lt;Assembly: CLSCompliant(True)&gt;
&lt;Assembly: Guid(&quot;1EFD8F87-0A02-4DD4-A5E7-1BE5846A65D0&quot;)&gt;
&lt;Assembly: AssemblyVersion(&quot;1.0.*&quot;)&gt;
"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="Application" File="Application.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System.xml
Imports MKSNManager

Namespace WFDef


public enum enumHACCPStep'Тип шага в ХАССП процессе
  HACCPStep_Operaciy=3'Операция
  HACCPStep_Zaversenie_processa=1'Завершение процесса
  HACCPStep_Kontrol_nay_tocka=4'Контрольная точка
  HACCPStep_Korrektiruusee_deystvie=5'Корректирующее действие
  HACCPStep_Ostanov_processa=2'Останов процесса
  HACCPStep_Process=6'Процесс
  HACCPStep_Nacalo_processa=0'Начало процесса
end enum 
public enum enumHaccpIdent'Идентификация
  HaccpIdent_Kacestvo_poverhnosti=6'Качество поверхности
  HaccpIdent_Zapah=2'Запах
  HaccpIdent_Forma=3'Форма
  HaccpIdent_Cvet=1'Цвет
  HaccpIdent_Vkus=4'Вкус
  HaccpIdent_Procee=100'Прочее
  HaccpIdent_Zvuk=5'Звук
  HaccpIdent_Vnesniy_vid=0'Внешний вид
end enum 
public enum enumWFStepClass'Тип шага процесса
  WFStepClass_SimpleFunction=0'SimpleFunction
  WFStepClass_StartFunction=1'StartFunction
  WFStepClass_StopFunction=2'StopFunction
  WFStepClass_PeriodicFunction=3'PeriodicFunction
end enum 
public enum enumMonths'Месяцы
  Months_Noybr_=11'Ноябрь
  Months_Fevral_=2'Февраль
  Months_Dekabr_=12'Декабрь
  Months_Mart=3'Март
  Months_Ynvar_=1'Январь
  Months_Sentybr_=9'Сентябрь
  Months_Iun_=6'Июнь
  Months_Oktybr_=10'Октябрь
  Months_May=5'Май
  Months_Avgust=8'Август
  Months_Iul_=7'Июль
  Months_Aprel_=4'Апрель
end enum 
public enum enumTypeStyle'Вариант трактовки типа поля
  TypeStyle_Interval=3'Интервал
  TypeStyle_Skalyrniy_tip=0'Скалярный тип
  TypeStyle_Ssilka=4'Ссылка
  TypeStyle_Perecislenie=2'Перечисление
  TypeStyle_Viragenie=1'Выражение
end enum 
public enum enumAggregationType'Вариант агрегации по полю
  AggregationType_MAX=5'MAX
  AggregationType_AVG=1'AVG
  AggregationType_SUM=3'SUM
  AggregationType_COUNT=2'COUNT
  AggregationType_MIN=4'MIN
  AggregationType_CUSTOM=6'CUSTOM
  AggregationType_none=0'none
end enum 
public enum enumVHAlignment'Выравнивание
  VHAlignment_Center_Center=4'Center Center
  VHAlignment_Center_Top=3'Center Top
  VHAlignment_Right_Top=6'Right Top
  VHAlignment_Right_Bottom=8'Right Bottom
  VHAlignment_Left_Bottom=2'Left Bottom
  VHAlignment_Right_Center=7'Right Center
  VHAlignment_Center_Bottom=5'Center Bottom
  VHAlignment_Left_Center=1'Left Center
  VHAlignment_Left_Top=0'Left Top
end enum 
public enum enumWFProcessState'Состояния процесса
  WFProcessState_Active=2'Active
  WFProcessState_Pause=3'Pause
  WFProcessState_Processed=5'Processed
  WFProcessState_Done=4'Done
  WFProcessState_Prepare=1'Prepare
  WFProcessState_Initial=0'Initial
end enum 
public enum enumNumerationRule'Правило нумерации
  NumerationRule_Edinay_zona=0'Единая зона
  NumerationRule_Po_godu=1'По году
  NumerationRule_Po_dnu=4'По дню
  NumerationRule_Po_kvartalu=2'По кварталу
  NumerationRule_Po_mesycu=3'По месяцу
  NumerationRule_Proizvol_nie_zoni=10'Произвольные зоны
end enum 
public enum enumMenuActionType'Вариант действия при выборе пункта меню
  MenuActionType_Otkrit__otcet=5'Открыть отчет
  MenuActionType_Nicego_ne_delat_=0'Ничего не делать
  MenuActionType_Vipolnit__metod=2'Выполнить метод
  MenuActionType_Otkrit__dokument=1'Открыть документ
  MenuActionType_Zapustit__ARM=4'Запустить АРМ
  MenuActionType_Otkrit__gurnal=3'Открыть журнал
end enum 
public enum enumColumnSortType'Вариант сортиовки данных колонки
  ColumnSortType_As_String=0'As String
  ColumnSortType_As_Numeric=1'As Numeric
  ColumnSortType_As_Date=2'As Date
end enum 
public enum enumAdditionType'Тип надбавки
  AdditionType_Ob_em=1'Объем
  AdditionType_Plotnost_=2'Плотность
  AdditionType_Procee=3'Прочее
  AdditionType_Ves=0'Вес
end enum 
public enum enumStructType'Тип раздела
  StructType_Derevo=2'Дерево
  StructType_Kollekciy=1'Коллекция
  StructType_Stroka_atributov=0'Строка атрибутов
end enum 
public enum enumTargetType'Вариант уровня приложения, куда может генерироваться код
  TargetType_SUBD=0'СУБД
  TargetType_ARM=4'АРМ
  TargetType_Dokumentaciy=3'Документация
  TargetType_MODEL_=1'МОДЕЛЬ
  TargetType_Prilogenie=2'Приложение
end enum 
public enum enumPartAddBehaivor'Поведение при добавлении строки раздела
  PartAddBehaivor_AddForm=0'AddForm
  PartAddBehaivor_RunAction=2'RunAction
  PartAddBehaivor_RefreshOnly=1'RefreshOnly
end enum 
public enum enumFolderType'Тип папки
  FolderType_Ishodysie=2'Исходящие
  FolderType_Zaversennie=10'Завершенные
  FolderType_Kalendar_=5'Календарь
  FolderType_cls__=0' 
  FolderType_Vhodysie=1'Входящие
  FolderType_Otlogennie=9'Отложенные
  FolderType_Gurnal=4'Журнал
  FolderType_V_rabote=8'В работе
  FolderType_Cernoviki=7'Черновики
  FolderType_Otpravlennie=6'Отправленные
  FolderType_Udalennie=3'Удаленные
end enum 
public enum enumWFShortcutType'Варианты ярлыков, которые может размещать процесс
  WFShortcutType_Function=1'Function
  WFShortcutType_Process=2'Process
  WFShortcutType_Document=0'Document
end enum 
public enum enumReferenceType'ReferenceType
  ReferenceType_Na_stroku_razdela=2'На строку раздела
  ReferenceType_Skalyrnoe_pole_OPN_ne_ssilkaCLS=0'Скалярное поле ( не ссылка)
  ReferenceType_Na_ob_ekt_=1'На объект 
end enum 
public enum enumSex'Мужской / Женский
  Sex_Mugskoy=1'Мужской
  Sex_Ne_susestvenno=0'Не существенно
  Sex_Genskiy=-1'Женский
end enum 
public enum enumMesureFormat'Формат индикатора
  MesureFormat_Data=1'Дата
  MesureFormat_Tekst=5'Текст
  MesureFormat_Ob_ekt=4'Объект
  MesureFormat_Spravocnik=2'Справочник
  MesureFormat_Cislo=0'Число
end enum 
public enum enumWFFuncParam'Вариант расшифровки параметра функции
  WFFuncParam_Dokument=5'Документ
  WFFuncParam_Znacenie=0'Значение
  WFFuncParam_Dokument_processa=4'Документ процесса
  WFFuncParam_Viragenie=2'Выражение
  WFFuncParam_Rol_=8'Роль
  WFFuncParam_Papka=3'Папка
  WFFuncParam_Pole=7'Поле
  WFFuncParam_Znacenie_iz_parametra=1'Значение из параметра
  WFFuncParam_Razdel=6'Раздел
  WFFuncParam_Tip_dokumenta=9'Тип документа
end enum 
public enum enumYesNo'Да / Нет (0 или 1)
  YesNo_Da=1'Да
  YesNo_Net=0'Нет
end enum 
public enum enumGeneratorStyle'GeneratorStyle
  GeneratorStyle_Odin_tip=0'Один тип
  GeneratorStyle_Vse_tipi_srazu=1'Все типы сразу
end enum 
public enum enumReportType'Вариант отчета
  ReportType_Dvumernay_matrica=1'Двумерная матрица
  ReportType_Tablica=0'Таблица
  ReportType_Eksport_po_WORD_sablonu=3'Экспорт по WORD шаблону
  ReportType_Tol_ko_rascet=2'Только расчет
  ReportType_Eksport_po_Excel_sablonu=4'Экспорт по Excel шаблону
end enum 
public enum enumHACCPPStep'Тип шага в ХАССП процессе
  HACCPPStep_Sir_e=5'Сырье
  HACCPPStep_Transportirovka=7'Транспортировка
  HACCPPStep_Operaciy=3'Операция
  HACCPPStep_Zaversenie_processa=1'Завершение процесса
  HACCPPStep_Nacalo_processa=0'Начало процесса
  HACCPPStep_Ostanov_processa=2'Останов процесса
  HACCPPStep_Vhod_iz=9'Вход из
  HACCPPStep_Vihod_v=8'Выход в
  HACCPPStep_Hranenie=6'Хранение
  HACCPPStep_Resenie=4'Решение
end enum 
public enum enumDayInWeek'День недели
  DayInWeek_Ponedel_nik=1'Понедельник
  DayInWeek_Sreda=3'Среда
  DayInWeek_Vtornik=2'Вторник
  DayInWeek_Pytnica=5'Пятница
  DayInWeek_Subbota=6'Суббота
  DayInWeek_Cetverg=4'Четверг
  DayInWeek_Voskresen_e=7'Воскресенье
end enum 
public enum enumPlatType'Тип плательщика
  PlatType_Otpravitel_=0'Отправитель
  PlatType_Polucatel_=1'Получатель
  PlatType_Drugoy=2'Другой
end enum 
public enum enumPartType'PartType
  PartType_Kollekciy=1'Коллекция
  PartType_Rassirenie=3'Расширение
  PartType_Stroka=0'Строка
  PartType_Derevo=2'Дерево
end enum 
public enum enumEmployment'Занятость
  Employment_Polnay=0'Полная
  Employment_Casticnay=1'Частичная
  Employment_Ne_vagno=-1'Не важно
end enum 
public enum enumKONTR_TYPE'Тип контрагента
  KONTR_TYPE_Procee=5'Прочее
  KONTR_TYPE_Perevozcik=4'Перевозчик
  KONTR_TYPE_Partner=2'Партнер
  KONTR_TYPE_Pokupatel_=0'Покупатель
  KONTR_TYPE_Ucreditel_=3'Учредитель
  KONTR_TYPE_Postavsik=1'Поставщик
end enum 
public enum enumConditionType'Варианты условий
  ConditionType_LSGT=2'&lt;&gt;
  ConditionType_GT=3'&gt;
  ConditionType_EQ=1'=
  ConditionType_GTEQ=4'&gt;=
  ConditionType_LSEQ=7'&lt;=
  ConditionType_like=8'like
  ConditionType_LS=6'&lt;
  ConditionType_none=0'none
end enum 
public enum enumVRTaskType'Тип задачи
  VRTaskType_V_opredelenniy_moment=0'В определенный момент
  VRTaskType_Fonovay=2'Фоновая
  VRTaskType_K_opredelennomu_vremeni=1'К определенному времени
end enum 
public enum enumOnJournalRowClick'действие при открытии строки журнала
  OnJournalRowClick_Otkrit__dokument=2'Открыть документ
  OnJournalRowClick_Otkrit__stroku=1'Открыть строку
  OnJournalRowClick_Nicego_ne_delat_=0'Ничего не делать
end enum 
public enum enumEducation'Образование
  Education_Srednee_special_noe=2'Среднее специальное
  Education_Srednee=1'Среднее
  Education_Ne_vagno=-1'Не важно
  Education_Vissee=4'Высшее
  Education_Nepolnoe_srednee=0'Неполное среднее
  Education_Nepolnoe_vissee=3'Неполное высшее
  Education_Neskol_ko_vissih=5'Несколько высших
end enum 
public enum enumDCType'Остатки/Дебит/Кредит
  DCType_Ostatki=-1'Остатки
  DCType_Debit=0'Дебит
  DCType_Kredit=1'Кредит
end enum 
public enum enumDevelopmentBase'Платформа разработки
  DevelopmentBase_JAVA=2'JAVA
  DevelopmentBase_OTHER=3'OTHER
  DevelopmentBase_DOTNET=1'DOTNET
  DevelopmentBase_VB6=0'VB6
end enum 
public enum enumBoolean'Да / Нет
  Boolean_Da=-1'Да
  Boolean_Net=0'Нет
end enum 
public enum enumTriState'Да / Нет / Не определено
  TriState_Net=0'Нет
  TriState_Ne_susestvenno=-1'Не существенно
  TriState_Da=1'Да
end enum 
public enum enumCurrencyType'Валюта платежа
  CurrencyType_Rubl_=0'Рубль
  CurrencyType_Evro=2'Евро
  CurrencyType_Dollar=1'Доллар
end enum 
public enum enumWFFuncState'Состояние функции в бизнес процессе
  WFFuncState_Processed=8'Processed
  WFFuncState_InWork=3'InWork
  WFFuncState_Pause=4'Pause
  WFFuncState_Ready=5'Ready
  WFFuncState_InControl=6'InControl
  WFFuncState_Prepare=1'Prepare
  WFFuncState_Active=2'Active
  WFFuncState_Done=7'Done
  WFFuncState_Initial=0'Initial
end enum 
public enum enumEmployment_'осталось для совместимости
  Employment__Polnay=0'Полная
  Employment__Casticnay=1'Частичная
  Employment__Ne_vagno=-1'Не важно
end enum 
public enum enumKONTR_STATUS'Состояние партнера
  KONTR_STATUS_Blokirovan=2'Блокирован
  KONTR_STATUS_Aktiveniy=0'Активеный
  KONTR_STATUS_Pssivniy=1'Пссивный
  KONTR_STATUS_Operacii_zapreseni=3'Операции запрещены
end enum 
public enum enumExtentionType'Тип расширения
  ExtentionType_OnFormExt=1'OnFormExt
  ExtentionType_CodeGenerator=7'CodeGenerator
  ExtentionType_JrnlAddExt=3'JrnlAddExt
  ExtentionType_VerifyRowExt=6'VerifyRowExt
  ExtentionType_StatusExt=0'StatusExt
  ExtentionType_ARMGenerator=8'ARMGenerator
  ExtentionType_DefaultExt=5'DefaultExt
  ExtentionType_CustomExt=2'CustomExt
  ExtentionType_JrnlRunExt=4'JrnlRunExt
end enum 
public enum enumReplicationType'Вариант репликации докуента
  ReplicationType_Ves__dokument=0'Весь документ
  ReplicationType_Lokal_niy=2'Локальный
  ReplicationType_Postrocno=1'Построчно
end enum 
public enum enumInfoStoreType'Тип каталога
  InfoStoreType_Gruppovoy=2'Групповой
  InfoStoreType_Personal_niy=1'Персональный
  InfoStoreType_cls__Obsiy=0' Общий
end enum 

    Public Class Application
        Inherits MKSNManager.Document.Doc_Base


        Protected Overrides Function MyTypeName() As String
            MyTypeName = &quot;WFDef&quot;
        End Function

  Private m_WFDef_param As WFDef_param_col
        Public ReadOnly Property WFDef_param() As WFDef_param_col
            Get
                If m_WFDef_param Is Nothing Then
                    m_WFDef_param = New WFDef_param_col
                    m_WFDef_param.Application = Me
                    m_WFDef_param.Parent = Me
                    m_WFDef_param.Refresh()
                End If
                WFDef_param = m_WFDef_param
            End Get
        End Property
  Private m_WFDef_Doc As WFDef_Doc_col
        Public ReadOnly Property WFDef_Doc() As WFDef_Doc_col
            Get
                If m_WFDef_Doc Is Nothing Then
                    m_WFDef_Doc = New WFDef_Doc_col
                    m_WFDef_Doc.Application = Me
                    m_WFDef_Doc.Parent = Me
                    m_WFDef_Doc.Refresh()
                End If
                WFDef_Doc = m_WFDef_Doc
            End Get
        End Property
  Private m_WFDef_func As WFDef_func_col
        Public ReadOnly Property WFDef_func() As WFDef_func_col
            Get
                If m_WFDef_func Is Nothing Then
                    m_WFDef_func = New WFDef_func_col
                    m_WFDef_func.Application = Me
                    m_WFDef_func.Parent = Me
                    m_WFDef_func.Refresh()
                End If
                WFDef_func = m_WFDef_func
            End Get
        End Property
  Private m_WFDef_master As WFDef_master_col
        Public ReadOnly Property WFDef_master() As WFDef_master_col
            Get
                If m_WFDef_master Is Nothing Then
                    m_WFDef_master = New WFDef_master_col
                    m_WFDef_master.Application = Me
                    m_WFDef_master.Parent = Me
                    m_WFDef_master.Refresh()
                End If
                WFDef_master = m_WFDef_master
            End Get
        End Property
  Private m_WFDef_INFO As WFDef_INFO_col
        Public ReadOnly Property WFDef_INFO() As WFDef_INFO_col
            Get
                If m_WFDef_INFO Is Nothing Then
                    m_WFDef_INFO = New WFDef_INFO_col
                    m_WFDef_INFO.Application = Me
                    m_WFDef_INFO.Parent = Me
                    m_WFDef_INFO.Refresh()
                End If
                WFDef_INFO = m_WFDef_INFO
            End Get
        End Property
  Private m_WFDef_links As WFDef_links_col
        Public ReadOnly Property WFDef_links() As WFDef_links_col
            Get
                If m_WFDef_links Is Nothing Then
                    m_WFDef_links = New WFDef_links_col
                    m_WFDef_links.Application = Me
                    m_WFDef_links.Parent = Me
                    m_WFDef_links.Refresh()
                End If
                WFDef_links = m_WFDef_links
            End Get
        End Property

        Public Overrides Sub Dispose()
            WFDef_param.Dispose()
            WFDef_Doc.Dispose()
            WFDef_func.Dispose()
            WFDef_master.Dispose()
            WFDef_INFO.Dispose()
            WFDef_links.Dispose()
        End Sub

        Protected Overrides Function FindInCollections(ByVal Table As String, ByVal InstID As String) As MKSNManager.Document.DocRow_Base
        FindInCollections = Nothing
            dim mFindInCollections As MKSNManager.Document.DocRow_Base
            mFindInCollections = WFDef_param.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFDef_Doc.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFDef_func.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFDef_master.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFDef_INFO.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFDef_links.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
        End Function

        Protected Overrides Sub XMLLoadCollections(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
            Dim e_list As XmlNodeList
            On Error Resume Next
            e_list = node.SelectNodes(&quot;WFDef_param_COL&quot;)
            WFDef_param.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFDef_Doc_COL&quot;)
            WFDef_Doc.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFDef_func_COL&quot;)
            WFDef_func.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFDef_master_COL&quot;)
            WFDef_master.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFDef_INFO_COL&quot;)
            WFDef_INFO.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFDef_links_COL&quot;)
            WFDef_links.XMLLoad(e_list, LoadMode)
        End Sub

        Public Overrides Sub XMLSaveCollections(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
            WFDef_param.XMLSave(node, Xdom)
            WFDef_Doc.XMLSave(node, Xdom)
            WFDef_func.XMLSave(node, Xdom)
            WFDef_master.XMLSave(node, Xdom)
            WFDef_INFO.XMLSave(node, Xdom)
            WFDef_links.XMLSave(node, Xdom)
        End Sub
Public Overrides Sub BatchUpdate()
  If Not Application.WorkOffline Then
    WFDef_param.BatchUpdate
    WFDef_Doc.BatchUpdate
    WFDef_func.BatchUpdate
    WFDef_master.BatchUpdate
    WFDef_INFO.BatchUpdate
    WFDef_links.BatchUpdate
  End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_param" File="WFDef_param.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFDef
    Public Class WFDef_param
        Inherits MKSNManager.Document.DocRow_Base

            private m_SetBeforStart  as enumBoolean
            private m_Name  as String
            private m_the_Value  as String
            private m_NoChange  as enumBoolean

        Public Overrides Sub CleanFields()
            ' m_SetBeforStart=   
            ' m_Name=   
            ' m_the_Value=   
            ' m_NoChange=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             select case SetBeforStart
            case enumBoolean.Boolean_Da
              dr (&quot;SetBeforStart&quot;)  = &quot;Да&quot;
              dr (&quot;SetBeforStart_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;SetBeforStart&quot;)  = &quot;Нет&quot;
              dr (&quot;SetBeforStart_VAL&quot;)  = 0
              end select 'SetBeforStart
             dr(&quot;Name&quot;) =Name
             dr(&quot;the_Value&quot;) =the_Value
             select case NoChange
            case enumBoolean.Boolean_Da
              dr (&quot;NoChange&quot;)  = &quot;Да&quot;
              dr (&quot;NoChange_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;NoChange&quot;)  = &quot;Нет&quot;
              dr (&quot;NoChange_VAL&quot;)  = 0
              end select 'NoChange
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          nv.Add(&quot;SetBeforStart&quot;, SetBeforStart, dbtype.int16)
          nv.Add(&quot;Name&quot;, Name, dbtype.string)
          nv.Add(&quot;the_Value&quot;, the_Value, dbtype.string)
          nv.Add(&quot;NoChange&quot;, NoChange, dbtype.int16)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          m_SetBeforStart=reader.item(&quot;SetBeforStart&quot;)
          m_Name=reader.item(&quot;Name&quot;)
          m_the_Value=reader.item(&quot;the_Value&quot;)
          m_NoChange=reader.item(&quot;NoChange&quot;)
        End Sub
        Public Property SetBeforStart() As enumBoolean
            Get
                LoadFromDatabase()
                SetBeforStart = m_SetBeforStart
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_SetBeforStart = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Name() As String
            Get
                LoadFromDatabase()
                Name = m_Name
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_Name = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property the_Value() As String
            Get
                LoadFromDatabase()
                the_Value = m_the_Value
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_the_Value = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property NoChange() As enumBoolean
            Get
                LoadFromDatabase()
                NoChange = m_NoChange
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_NoChange = Value
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            SetBeforStart = node.Attributes.GetNamedItem(&quot;SetBeforStart&quot;).Value
            Name = node.Attributes.GetNamedItem(&quot;Name&quot;).Value
            the_Value = node.Attributes.GetNamedItem(&quot;the_Value&quot;).Value
            NoChange = node.Attributes.GetNamedItem(&quot;NoChange&quot;).Value
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;SetBeforStart&quot;, SetBeforStart)  
          node.SetAttribute(&quot;Name&quot;, Name)  
          node.SetAttribute(&quot;the_Value&quot;, the_Value)  
          node.SetAttribute(&quot;NoChange&quot;, NoChange)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_param_col" File="WFDef_param_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFDef
    Public Class WFDef_param_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFDef_param&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;SetBeforStart_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;SetBeforStart&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Name&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;the_Value&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;NoChange_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;NoChange&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFDef_param
        End Function
        Public Function GetItem( vIndex as object ) As WFDef.WFDef_param
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFDef.WFDef_param))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFDef.WFDef_param
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_Doc" File="WFDef_Doc.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFDef
    Public Class WFDef_Doc
        Inherits MKSNManager.Document.DocRow_Base

            private m_ArchiveMode  as String
            private m_ArchveFolder  as System.Guid
            private m_DocTemplate  as System.Guid
            private m_SetBeforStart  as enumBoolean
            private m_DocType  as System.Guid
            private m_CreateInRuntime  as enumBoolean
            private m_Name  as String

        Public Overrides Sub CleanFields()
            ' m_ArchiveMode=   
            ' m_ArchveFolder=   
            ' m_DocTemplate=   
            ' m_SetBeforStart=   
            ' m_DocType=   
            ' m_CreateInRuntime=   
            ' m_Name=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             dr(&quot;ArchiveMode&quot;) =ArchiveMode
             if ArchveFolder is nothing then
               dr(&quot;ArchveFolder&quot;) =system.dbnull.value
               dr(&quot;ArchveFolder_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ArchveFolder&quot;) =ArchveFolder.BRIEF
               dr(&quot;ArchveFolder_ID&quot;) =ArchveFolder.ID
             end if 
             if DocTemplate is nothing then
               dr(&quot;DocTemplate&quot;) =system.dbnull.value
               dr(&quot;DocTemplate_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;DocTemplate&quot;) =DocTemplate.BRIEF
               dr(&quot;DocTemplate_ID&quot;) =DocTemplate.ID
             end if 
             select case SetBeforStart
            case enumBoolean.Boolean_Da
              dr (&quot;SetBeforStart&quot;)  = &quot;Да&quot;
              dr (&quot;SetBeforStart_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;SetBeforStart&quot;)  = &quot;Нет&quot;
              dr (&quot;SetBeforStart_VAL&quot;)  = 0
              end select 'SetBeforStart
             if DocType is nothing then
               dr(&quot;DocType&quot;) =system.dbnull.value
               dr(&quot;DocType_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;DocType&quot;) =DocType.BRIEF
               dr(&quot;DocType_ID&quot;) =DocType.ID
             end if 
             select case CreateInRuntime
            case enumBoolean.Boolean_Da
              dr (&quot;CreateInRuntime&quot;)  = &quot;Да&quot;
              dr (&quot;CreateInRuntime_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;CreateInRuntime&quot;)  = &quot;Нет&quot;
              dr (&quot;CreateInRuntime_VAL&quot;)  = 0
              end select 'CreateInRuntime
             dr(&quot;Name&quot;) =Name
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          nv.Add(&quot;ArchiveMode&quot;, ArchiveMode, dbtype.string)
          if m_ArchveFolder.Equals(System.Guid.Empty) then
            nv.Add(&quot;ArchveFolder&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ArchveFolder&quot;, m_ArchveFolder, dbtype.guid)
          end if 
          if m_DocTemplate.Equals(System.Guid.Empty) then
            nv.Add(&quot;DocTemplate&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;DocTemplate&quot;, m_DocTemplate, dbtype.guid)
          end if 
          nv.Add(&quot;SetBeforStart&quot;, SetBeforStart, dbtype.int16)
          if m_DocType.Equals(System.Guid.Empty) then
            nv.Add(&quot;DocType&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;DocType&quot;, m_DocType, dbtype.guid)
          end if 
          nv.Add(&quot;CreateInRuntime&quot;, CreateInRuntime, dbtype.int16)
          nv.Add(&quot;Name&quot;, Name, dbtype.string)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          m_ArchiveMode=reader.item(&quot;ArchiveMode&quot;)
          if isdbnull(reader.item(&quot;ArchveFolder&quot;)) then
            m_ArchveFolder = System.GUID.Empty
          else
            m_ArchveFolder=reader.item(&quot;ArchveFolder&quot;)
          end if 
          if isdbnull(reader.item(&quot;DocTemplate&quot;)) then
            m_DocTemplate = System.GUID.Empty
          else
            m_DocTemplate=reader.item(&quot;DocTemplate&quot;)
          end if 
          m_SetBeforStart=reader.item(&quot;SetBeforStart&quot;)
          if isdbnull(reader.item(&quot;DocType&quot;)) then
            m_DocType = System.GUID.Empty
          else
            m_DocType=reader.item(&quot;DocType&quot;)
          end if 
          m_CreateInRuntime=reader.item(&quot;CreateInRuntime&quot;)
          m_Name=reader.item(&quot;Name&quot;)
        End Sub
        Public Property ArchiveMode() As String
            Get
                LoadFromDatabase()
                ArchiveMode = m_ArchiveMode
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_ArchiveMode = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property ArchveFolder() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ArchveFolder = me.application.Findrowobject(&quot;Folder&quot;,m_ArchveFolder)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ArchveFolder = Value.id
                else
                   m_ArchveFolder=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property DocTemplate() As MKSNManager.Document.doc_base
            Get
                LoadFromDatabase()
                DocTemplate = me.application.manager.GetInstanceObject(m_DocTemplate)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.doc_base )
                LoadFromDatabase()
                if not  Value is nothing then
                  m_DocTemplate = Value.id
                else
                  m_DocTemplate =System.Guid.Empty 
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property SetBeforStart() As enumBoolean
            Get
                LoadFromDatabase()
                SetBeforStart = m_SetBeforStart
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_SetBeforStart = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property DocType() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                DocType = me.application.Findrowobject(&quot;OBJECTTYPE&quot;,m_DocType)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_DocType = Value.id
                else
                   m_DocType=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property CreateInRuntime() As enumBoolean
            Get
                LoadFromDatabase()
                CreateInRuntime = m_CreateInRuntime
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_CreateInRuntime = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Name() As String
            Get
                LoadFromDatabase()
                Name = m_Name
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_Name = Value
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            ArchiveMode = node.Attributes.GetNamedItem(&quot;ArchiveMode&quot;).Value
            m_ArchveFolder = new system.guid(node.Attributes.GetNamedItem(&quot;ArchveFolder&quot;).Value)
            m_DocTemplate = new system.guid(node.Attributes.GetNamedItem(&quot;DocTemplate&quot;).Value)
            SetBeforStart = node.Attributes.GetNamedItem(&quot;SetBeforStart&quot;).Value
            m_DocType = new system.guid(node.Attributes.GetNamedItem(&quot;DocType&quot;).Value)
            CreateInRuntime = node.Attributes.GetNamedItem(&quot;CreateInRuntime&quot;).Value
            Name = node.Attributes.GetNamedItem(&quot;Name&quot;).Value
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;ArchiveMode&quot;, ArchiveMode)  
          node.SetAttribute(&quot;ArchveFolder&quot;, m_ArchveFolder.tostring)  
          node.SetAttribute(&quot;DocTemplate&quot;, m_DocTemplate.tostring)  
          node.SetAttribute(&quot;SetBeforStart&quot;, SetBeforStart)  
          node.SetAttribute(&quot;DocType&quot;, m_DocType.tostring)  
          node.SetAttribute(&quot;CreateInRuntime&quot;, CreateInRuntime)  
          node.SetAttribute(&quot;Name&quot;, Name)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_Doc_col" File="WFDef_Doc_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFDef
    Public Class WFDef_Doc_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFDef_Doc&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ArchiveMode&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ArchveFolder_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ArchveFolder&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;DocTemplate_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;DocTemplate&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;SetBeforStart_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;SetBeforStart&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;DocType_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;DocType&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;CreateInRuntime_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;CreateInRuntime&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Name&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFDef_Doc
        End Function
        Public Function GetItem( vIndex as object ) As WFDef.WFDef_Doc
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFDef.WFDef_Doc))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFDef.WFDef_Doc
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_func" File="WFDef_func.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFDef
    Public Class WFDef_func
        Inherits MKSNManager.Document.DocRow_Base

            private m_Func  as System.Guid

        Public Overrides Sub CleanFields()
            ' m_Func=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             if Func is nothing then
               dr(&quot;Func&quot;) =system.dbnull.value
               dr(&quot;Func_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;Func&quot;) =Func.BRIEF
               dr(&quot;Func_ID&quot;) =Func.ID
             end if 
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          if m_Func.Equals(System.Guid.Empty) then
            nv.Add(&quot;Func&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;Func&quot;, m_Func, dbtype.guid)
          end if 
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          if isdbnull(reader.item(&quot;Func&quot;)) then
            m_Func = System.GUID.Empty
          else
            m_Func=reader.item(&quot;Func&quot;)
          end if 
        End Sub
        Public Property Func() As MKSNManager.Document.doc_base
            Get
                LoadFromDatabase()
                Func = me.application.manager.GetInstanceObject(m_Func)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.doc_base )
                LoadFromDatabase()
                if not  Value is nothing then
                  m_Func = Value.id
                else
                  m_Func =System.Guid.Empty 
                end if
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            m_Func = new system.guid(node.Attributes.GetNamedItem(&quot;Func&quot;).Value)
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;Func&quot;, m_Func.tostring)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_func_col" File="WFDef_func_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFDef
    Public Class WFDef_func_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFDef_func&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Func_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;Func&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFDef_func
        End Function
        Public Function GetItem( vIndex as object ) As WFDef.WFDef_func
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFDef.WFDef_func))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFDef.WFDef_func
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_master" File="WFDef_master.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFDef
    Public Class WFDef_master
        Inherits MKSNManager.Document.DocRow_Base

            private m_AllowCheckState  as enumBoolean
            private m_AllowAnaliz  as enumBoolean
            private m_TheGroup  as System.Guid
            private m_AllowControl  as enumBoolean
            private m_AllowStart  as enumBoolean

        Public Overrides Sub CleanFields()
            ' m_AllowCheckState=   
            ' m_AllowAnaliz=   
            ' m_TheGroup=   
            ' m_AllowControl=   
            ' m_AllowStart=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             select case AllowCheckState
            case enumBoolean.Boolean_Da
              dr (&quot;AllowCheckState&quot;)  = &quot;Да&quot;
              dr (&quot;AllowCheckState_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;AllowCheckState&quot;)  = &quot;Нет&quot;
              dr (&quot;AllowCheckState_VAL&quot;)  = 0
              end select 'AllowCheckState
             select case AllowAnaliz
            case enumBoolean.Boolean_Da
              dr (&quot;AllowAnaliz&quot;)  = &quot;Да&quot;
              dr (&quot;AllowAnaliz_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;AllowAnaliz&quot;)  = &quot;Нет&quot;
              dr (&quot;AllowAnaliz_VAL&quot;)  = 0
              end select 'AllowAnaliz
             if TheGroup is nothing then
               dr(&quot;TheGroup&quot;) =system.dbnull.value
               dr(&quot;TheGroup_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;TheGroup&quot;) =TheGroup.BRIEF
               dr(&quot;TheGroup_ID&quot;) =TheGroup.ID
             end if 
             select case AllowControl
            case enumBoolean.Boolean_Da
              dr (&quot;AllowControl&quot;)  = &quot;Да&quot;
              dr (&quot;AllowControl_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;AllowControl&quot;)  = &quot;Нет&quot;
              dr (&quot;AllowControl_VAL&quot;)  = 0
              end select 'AllowControl
             select case AllowStart
            case enumBoolean.Boolean_Da
              dr (&quot;AllowStart&quot;)  = &quot;Да&quot;
              dr (&quot;AllowStart_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;AllowStart&quot;)  = &quot;Нет&quot;
              dr (&quot;AllowStart_VAL&quot;)  = 0
              end select 'AllowStart
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          nv.Add(&quot;AllowCheckState&quot;, AllowCheckState, dbtype.int16)
          nv.Add(&quot;AllowAnaliz&quot;, AllowAnaliz, dbtype.int16)
          if m_TheGroup.Equals(System.Guid.Empty) then
            nv.Add(&quot;TheGroup&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;TheGroup&quot;, m_TheGroup, dbtype.guid)
          end if 
          nv.Add(&quot;AllowControl&quot;, AllowControl, dbtype.int16)
          nv.Add(&quot;AllowStart&quot;, AllowStart, dbtype.int16)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          m_AllowCheckState=reader.item(&quot;AllowCheckState&quot;)
          m_AllowAnaliz=reader.item(&quot;AllowAnaliz&quot;)
          if isdbnull(reader.item(&quot;TheGroup&quot;)) then
            m_TheGroup = System.GUID.Empty
          else
            m_TheGroup=reader.item(&quot;TheGroup&quot;)
          end if 
          m_AllowControl=reader.item(&quot;AllowControl&quot;)
          m_AllowStart=reader.item(&quot;AllowStart&quot;)
        End Sub
        Public Property AllowCheckState() As enumBoolean
            Get
                LoadFromDatabase()
                AllowCheckState = m_AllowCheckState
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_AllowCheckState = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property AllowAnaliz() As enumBoolean
            Get
                LoadFromDatabase()
                AllowAnaliz = m_AllowAnaliz
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_AllowAnaliz = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property TheGroup() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                TheGroup = me.application.Findrowobject(&quot;Users&quot;,m_TheGroup)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_TheGroup = Value.id
                else
                   m_TheGroup=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property AllowControl() As enumBoolean
            Get
                LoadFromDatabase()
                AllowControl = m_AllowControl
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_AllowControl = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property AllowStart() As enumBoolean
            Get
                LoadFromDatabase()
                AllowStart = m_AllowStart
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_AllowStart = Value
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            AllowCheckState = node.Attributes.GetNamedItem(&quot;AllowCheckState&quot;).Value
            AllowAnaliz = node.Attributes.GetNamedItem(&quot;AllowAnaliz&quot;).Value
            m_TheGroup = new system.guid(node.Attributes.GetNamedItem(&quot;TheGroup&quot;).Value)
            AllowControl = node.Attributes.GetNamedItem(&quot;AllowControl&quot;).Value
            AllowStart = node.Attributes.GetNamedItem(&quot;AllowStart&quot;).Value
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;AllowCheckState&quot;, AllowCheckState)  
          node.SetAttribute(&quot;AllowAnaliz&quot;, AllowAnaliz)  
          node.SetAttribute(&quot;TheGroup&quot;, m_TheGroup.tostring)  
          node.SetAttribute(&quot;AllowControl&quot;, AllowControl)  
          node.SetAttribute(&quot;AllowStart&quot;, AllowStart)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_master_col" File="WFDef_master_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFDef
    Public Class WFDef_master_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFDef_master&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;AllowCheckState_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;AllowCheckState&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;AllowAnaliz_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;AllowAnaliz&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;TheGroup_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;TheGroup&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;AllowControl_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;AllowControl&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;AllowStart_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;AllowStart&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFDef_master
        End Function
        Public Function GetItem( vIndex as object ) As WFDef.WFDef_master
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFDef.WFDef_master))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFDef.WFDef_master
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_INFO" File="WFDef_INFO.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFDef
    Public Class WFDef_INFO
        Inherits MKSNManager.Document.DocRow_Base

            private m_Diagram  as STRING
            private m_the_Description  as STRING

        Public Overrides Sub CleanFields()
            ' m_Diagram=   
            ' m_the_Description=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             dr(&quot;Diagram&quot;) =Diagram
             dr(&quot;the_Description&quot;) =the_Description
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          nv.Add(&quot;Diagram&quot;, Diagram, dbtype.string)
          nv.Add(&quot;the_Description&quot;, the_Description, dbtype.string)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          m_Diagram=reader.item(&quot;Diagram&quot;)
          m_the_Description=reader.item(&quot;the_Description&quot;)
        End Sub
        Public Property Diagram() As STRING
            Get
                LoadFromDatabase()
                Diagram = m_Diagram
                AccessTime = Now
            End Get
            Set(ByVal Value As STRING )
                LoadFromDatabase()
                m_Diagram = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property the_Description() As STRING
            Get
                LoadFromDatabase()
                the_Description = m_the_Description
                AccessTime = Now
            End Get
            Set(ByVal Value As STRING )
                LoadFromDatabase()
                m_the_Description = Value
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            Diagram = node.Attributes.GetNamedItem(&quot;Diagram&quot;).Value
            the_Description = node.Attributes.GetNamedItem(&quot;the_Description&quot;).Value
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;Diagram&quot;, Diagram)  
          node.SetAttribute(&quot;the_Description&quot;, the_Description)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_INFO_col" File="WFDef_INFO_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFDef
    Public Class WFDef_INFO_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFDef_INFO&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Diagram&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;the_Description&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFDef_INFO
        End Function
        Public Function GetItem( vIndex as object ) As WFDef.WFDef_INFO
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFDef.WFDef_INFO))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFDef.WFDef_INFO
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_links" File="WFDef_links.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFDef
    Public Class WFDef_links
        Inherits MKSNManager.Document.DocRow_Base

            private m_ToFunc  as System.Guid
            private m_AcceptAnyResults  as enumBoolean
            private m_FromFunction  as System.Guid
        private m_WFDef_linkres As WFDef_linkres_col

        Public Overrides Sub CleanFields()
            ' m_ToFunc=   
            ' m_AcceptAnyResults=   
            ' m_FromFunction=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             if ToFunc is nothing then
               dr(&quot;ToFunc&quot;) =system.dbnull.value
               dr(&quot;ToFunc_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ToFunc&quot;) =ToFunc.BRIEF
               dr(&quot;ToFunc_ID&quot;) =ToFunc.ID
             end if 
             select case AcceptAnyResults
            case enumBoolean.Boolean_Da
              dr (&quot;AcceptAnyResults&quot;)  = &quot;Да&quot;
              dr (&quot;AcceptAnyResults_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;AcceptAnyResults&quot;)  = &quot;Нет&quot;
              dr (&quot;AcceptAnyResults_VAL&quot;)  = 0
              end select 'AcceptAnyResults
             if FromFunction is nothing then
               dr(&quot;FromFunction&quot;) =system.dbnull.value
               dr(&quot;FromFunction_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;FromFunction&quot;) =FromFunction.BRIEF
               dr(&quot;FromFunction_ID&quot;) =FromFunction.ID
             end if 
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            mFindInside = WFDef_linkres.FindObject(table,RowID)
            if not mFindInside is nothing then return mFindInside
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          if m_ToFunc.Equals(System.Guid.Empty) then
            nv.Add(&quot;ToFunc&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ToFunc&quot;, m_ToFunc, dbtype.guid)
          end if 
          nv.Add(&quot;AcceptAnyResults&quot;, AcceptAnyResults, dbtype.int16)
          if m_FromFunction.Equals(System.Guid.Empty) then
            nv.Add(&quot;FromFunction&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;FromFunction&quot;, m_FromFunction, dbtype.guid)
          end if 
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          if isdbnull(reader.item(&quot;ToFunc&quot;)) then
            m_ToFunc = System.GUID.Empty
          else
            m_ToFunc=reader.item(&quot;ToFunc&quot;)
          end if 
          m_AcceptAnyResults=reader.item(&quot;AcceptAnyResults&quot;)
          if isdbnull(reader.item(&quot;FromFunction&quot;)) then
            m_FromFunction = System.GUID.Empty
          else
            m_FromFunction=reader.item(&quot;FromFunction&quot;)
          end if 
        End Sub
        Public Property ToFunc() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ToFunc = me.application.Findrowobject(&quot;WFDef_func&quot;,m_ToFunc)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ToFunc = Value.id
                else
                   m_ToFunc=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property AcceptAnyResults() As enumBoolean
            Get
                LoadFromDatabase()
                AcceptAnyResults = m_AcceptAnyResults
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_AcceptAnyResults = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property FromFunction() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                FromFunction = me.application.Findrowobject(&quot;WFDef_func&quot;,m_FromFunction)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_FromFunction = Value.id
                else
                   m_FromFunction=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public readonly Property WFDef_linkres() As WFDef_linkres_col
            Get
                if  m_WFDef_linkres is nothing then
                  m_WFDef_linkres = new WFDef_linkres_col
                  m_WFDef_linkres.Parent = me
                  m_WFDef_linkres.Application = me.Application
                  m_WFDef_linkres.Refresh
                end if
                WFDef_linkres = m_WFDef_linkres
                AccessTime = Now
            End Get
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            m_ToFunc = new system.guid(node.Attributes.GetNamedItem(&quot;ToFunc&quot;).Value)
            AcceptAnyResults = node.Attributes.GetNamedItem(&quot;AcceptAnyResults&quot;).Value
            m_FromFunction = new system.guid(node.Attributes.GetNamedItem(&quot;FromFunction&quot;).Value)
            e_list = node.SelectNodes(&quot;WFDef_linkres_COL&quot;)
            WFDef_linkres.XMLLoad(e_list,LoadMode)
             Changed = true
        End sub
        Public Overrides Sub Dispose()
            WFDef_linkres.Dispose
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;ToFunc&quot;, m_ToFunc.tostring)  
          node.SetAttribute(&quot;AcceptAnyResults&quot;, AcceptAnyResults)  
          node.SetAttribute(&quot;FromFunction&quot;, m_FromFunction.tostring)  
            WFDef_linkres.XMLSave(node,xdom)
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
            WFDef_linkres.BatchUpdate
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_linkres" File="WFDef_linkres.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFDef
    Public Class WFDef_linkres
        Inherits MKSNManager.Document.DocRow_Base

            private m_Name  as String

        Public Overrides Sub CleanFields()
            ' m_Name=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             dr(&quot;Name&quot;) =Name
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          nv.Add(&quot;Name&quot;, Name, dbtype.string)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          m_Name=reader.item(&quot;Name&quot;)
        End Sub
        Public Property Name() As String
            Get
                LoadFromDatabase()
                Name = m_Name
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_Name = Value
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            Name = node.Attributes.GetNamedItem(&quot;Name&quot;).Value
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;Name&quot;, Name)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_links_col" File="WFDef_links_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFDef
    Public Class WFDef_links_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFDef_links&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ToFunc_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ToFunc&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;AcceptAnyResults_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;AcceptAnyResults&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;FromFunction_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;FromFunction&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFDef_links
        End Function
        Public Function GetItem( vIndex as object ) As WFDef.WFDef_links
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFDef.WFDef_links))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFDef.WFDef_links
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFDef_linkres_col" File="WFDef_linkres_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFDef
    Public Class WFDef_linkres_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFDef_linkres&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Name&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFDef_linkres
        End Function
        Public Function GetItem( vIndex as object ) As WFDef.WFDef_linkres
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFDef.WFDef_linkres))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFDef.WFDef_linkres
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder></root>
