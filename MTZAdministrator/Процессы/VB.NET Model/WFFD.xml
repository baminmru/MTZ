<?xml version="1.0"?>
<root><AttributeHolder Name="Name" Value="WFFD"/><AttributeHolder Name="ID" Value="{709EAFB5-23B8-4CC0-9FB6-CD742E293D67}"/><AttributeHolder Name="asmName" Value="WFFD"/><ModuleHolder ModuleName="WFFD" File="WFFD.vbproj"><BlockHolder BlockName="code" BlockCode="&lt;VisualStudioProject&gt;
    &lt;VisualBasic
        ProjectType = &quot;Local&quot;
        ProductVersion = &quot;7.10.3077&quot;
        SchemaVersion = &quot;2.0&quot;
        ProjectGuid = &quot;{CC599A6B-E951-4CD5-814C-172F063DFC5C}&quot;
    &gt;
        &lt;Build&gt;
            &lt;Settings
        ApplicationIcon = &quot;&quot;
        AssemblyKeyContainerName = &quot;&quot;
        AssemblyName = &quot;WFFD&quot;
        AssemblyOriginatorKeyFile = &quot;&quot;
        AssemblyOriginatorKeyMode = &quot;None&quot;
        DefaultClientScript = &quot;JScript&quot;
        DefaultHTMLPageLayout = &quot;Grid&quot;
        DefaultTargetSchema = &quot;IE50&quot;
        DelaySign = &quot;false&quot;
        OutputType = &quot;Library&quot;
        RootNamespace = &quot;WFFD&quot;
        OptionCompare = &quot;Binary&quot;
        OptionExplicit = &quot;On&quot;
        OptionStrict = &quot;Off&quot;
        StartupObject = &quot;&quot;
      &gt;
                &lt;Config
                    Name = &quot;Debug&quot;
                    BaseAddress = &quot;285212672&quot;
                    ConfigurationOverrideFile = &quot;&quot;
                    DefineConstants = &quot;&quot;
                    DefineDebug = &quot;true&quot;
                    DefineTrace = &quot;true&quot;
                    DebugSymbols = &quot;true&quot;
                    IncrementalBuild = &quot;true&quot;
                    Optimize = &quot;false&quot;
                    OutputPath = &quot;bin\&quot;
                    RegisterForComInterop = &quot;false&quot;
                    RemoveIntegerChecks = &quot;false&quot;
                    TreatWarningsAsErrors = &quot;false&quot;
                    WarningLevel = &quot;1&quot;
                /&gt;
                &lt;Config
                    Name = &quot;Release&quot;
                    BaseAddress = &quot;285212672&quot;
                    ConfigurationOverrideFile = &quot;&quot;
                    DefineConstants = &quot;&quot;
                    DefineDebug = &quot;false&quot;
                    DefineTrace = &quot;true&quot;
                    DebugSymbols = &quot;false&quot;
                    IncrementalBuild = &quot;false&quot;
                    Optimize = &quot;true&quot;
                    OutputPath = &quot;bin\&quot;
                    RegisterForComInterop = &quot;false&quot;
                    RemoveIntegerChecks = &quot;false&quot;
                    TreatWarningsAsErrors = &quot;false&quot;
                    WarningLevel = &quot;1&quot;
                /&gt;
            &lt;/Settings&gt;
            &lt;References&gt;
                &lt;Reference
                    Name = &quot;System&quot;
                    AssemblyName = &quot;System&quot;
                /&gt;
                &lt;Reference
                    Name = &quot;System.Data&quot;
                    AssemblyName = &quot;System.Data&quot;
                /&gt;
                &lt;Reference
                    Name = &quot;System.XML&quot;
                    AssemblyName = &quot;System.Xml&quot;
                /&gt;
                &lt;Reference
                Name = &quot;MKSNManager&quot;
                AssemblyName = &quot;MKSNManager&quot;
                HintPath = &quot;C:\BAMI\MTZ.NET\MKSNMANAGER\bin\MKSNManager.dll&quot;
                /&gt;
            &lt;/References&gt;
      &lt;Imports&gt;
        &lt;Import Namespace = &quot;System&quot; /&gt;
        &lt;Import Namespace = &quot;System.Data&quot; /&gt;
        &lt;Import Namespace = &quot;System.Collections&quot; /&gt;
        &lt;Import Namespace = &quot;System.Xml&quot; /&gt;
      &lt;/Imports&gt;
        &lt;/Build&gt;
        &lt;Files&gt;
            &lt;Include&gt;
                &lt;File
                    RelPath = &quot;AssemblyInfo.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;Application.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFFD_ShortCut.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFFD_ShortCut_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFFD_Results.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFFD_Results_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFFD_DOCSTOPS.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFFD_DOCSTOPS_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFFD_CustomParam.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFFD_CustomParam_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFFD_Doer.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFFD_Doer_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFFD_common.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFFD_common_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFFD_ATTR1.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFFD_ATTR1_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

                &lt;File
                    RelPath = &quot;WFFD_DOCS.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;
                &lt;File
                    RelPath = &quot;WFFD_DOCS_col.vb&quot;
                    SubType = &quot;Code&quot;
                    BuildAction = &quot;Compile&quot;
                /&gt;

            &lt;/Include&gt;
        &lt;/Files&gt;
    &lt;/VisualBasic&gt;
&lt;/VisualStudioProject&gt;
"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="AssemblyInfo" File="AssemblyInfo.vb"><BlockHolder BlockName="code" BlockCode="
Imports System
Imports System.Reflection
Imports System.Runtime.InteropServices
&lt;Assembly: AssemblyTitle(&quot;&quot;)&gt;
&lt;Assembly: AssemblyDescription(&quot;&quot;)&gt;
&lt;Assembly: AssemblyCompany(&quot;&quot;)&gt;
&lt;Assembly: AssemblyProduct(&quot;&quot;)&gt;
&lt;Assembly: AssemblyCopyright(&quot;&quot;)&gt;
&lt;Assembly: AssemblyTrademark(&quot;&quot;)&gt;
&lt;Assembly: CLSCompliant(True)&gt;
&lt;Assembly: Guid(&quot;25B1C38A-5296-4C5F-AC0C-22398F96EBE5&quot;)&gt;
&lt;Assembly: AssemblyVersion(&quot;1.0.*&quot;)&gt;
"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="Application" File="Application.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System.xml
Imports MKSNManager

Namespace WFFD


public enum enumHACCPStep'Тип шага в ХАССП процессе
  HACCPStep_Operaciy=3'Операция
  HACCPStep_Zaversenie_processa=1'Завершение процесса
  HACCPStep_Kontrol_nay_tocka=4'Контрольная точка
  HACCPStep_Korrektiruusee_deystvie=5'Корректирующее действие
  HACCPStep_Ostanov_processa=2'Останов процесса
  HACCPStep_Process=6'Процесс
  HACCPStep_Nacalo_processa=0'Начало процесса
end enum 
public enum enumHaccpIdent'Идентификация
  HaccpIdent_Kacestvo_poverhnosti=6'Качество поверхности
  HaccpIdent_Zapah=2'Запах
  HaccpIdent_Forma=3'Форма
  HaccpIdent_Cvet=1'Цвет
  HaccpIdent_Vkus=4'Вкус
  HaccpIdent_Procee=100'Прочее
  HaccpIdent_Zvuk=5'Звук
  HaccpIdent_Vnesniy_vid=0'Внешний вид
end enum 
public enum enumWFStepClass'Тип шага процесса
  WFStepClass_SimpleFunction=0'SimpleFunction
  WFStepClass_StartFunction=1'StartFunction
  WFStepClass_StopFunction=2'StopFunction
  WFStepClass_PeriodicFunction=3'PeriodicFunction
end enum 
public enum enumMonths'Месяцы
  Months_Noybr_=11'Ноябрь
  Months_Fevral_=2'Февраль
  Months_Dekabr_=12'Декабрь
  Months_Mart=3'Март
  Months_Ynvar_=1'Январь
  Months_Sentybr_=9'Сентябрь
  Months_Iun_=6'Июнь
  Months_Oktybr_=10'Октябрь
  Months_May=5'Май
  Months_Avgust=8'Август
  Months_Iul_=7'Июль
  Months_Aprel_=4'Апрель
end enum 
public enum enumTypeStyle'Вариант трактовки типа поля
  TypeStyle_Interval=3'Интервал
  TypeStyle_Skalyrniy_tip=0'Скалярный тип
  TypeStyle_Ssilka=4'Ссылка
  TypeStyle_Perecislenie=2'Перечисление
  TypeStyle_Viragenie=1'Выражение
end enum 
public enum enumAggregationType'Вариант агрегации по полю
  AggregationType_MAX=5'MAX
  AggregationType_AVG=1'AVG
  AggregationType_SUM=3'SUM
  AggregationType_COUNT=2'COUNT
  AggregationType_MIN=4'MIN
  AggregationType_CUSTOM=6'CUSTOM
  AggregationType_none=0'none
end enum 
public enum enumVHAlignment'Выравнивание
  VHAlignment_Center_Center=4'Center Center
  VHAlignment_Center_Top=3'Center Top
  VHAlignment_Right_Top=6'Right Top
  VHAlignment_Right_Bottom=8'Right Bottom
  VHAlignment_Left_Bottom=2'Left Bottom
  VHAlignment_Right_Center=7'Right Center
  VHAlignment_Center_Bottom=5'Center Bottom
  VHAlignment_Left_Center=1'Left Center
  VHAlignment_Left_Top=0'Left Top
end enum 
public enum enumWFProcessState'Состояния процесса
  WFProcessState_Active=2'Active
  WFProcessState_Pause=3'Pause
  WFProcessState_Processed=5'Processed
  WFProcessState_Done=4'Done
  WFProcessState_Prepare=1'Prepare
  WFProcessState_Initial=0'Initial
end enum 
public enum enumNumerationRule'Правило нумерации
  NumerationRule_Edinay_zona=0'Единая зона
  NumerationRule_Po_godu=1'По году
  NumerationRule_Po_dnu=4'По дню
  NumerationRule_Po_kvartalu=2'По кварталу
  NumerationRule_Po_mesycu=3'По месяцу
  NumerationRule_Proizvol_nie_zoni=10'Произвольные зоны
end enum 
public enum enumMenuActionType'Вариант действия при выборе пункта меню
  MenuActionType_Otkrit__otcet=5'Открыть отчет
  MenuActionType_Nicego_ne_delat_=0'Ничего не делать
  MenuActionType_Vipolnit__metod=2'Выполнить метод
  MenuActionType_Otkrit__dokument=1'Открыть документ
  MenuActionType_Zapustit__ARM=4'Запустить АРМ
  MenuActionType_Otkrit__gurnal=3'Открыть журнал
end enum 
public enum enumColumnSortType'Вариант сортиовки данных колонки
  ColumnSortType_As_String=0'As String
  ColumnSortType_As_Numeric=1'As Numeric
  ColumnSortType_As_Date=2'As Date
end enum 
public enum enumAdditionType'Тип надбавки
  AdditionType_Ob_em=1'Объем
  AdditionType_Plotnost_=2'Плотность
  AdditionType_Procee=3'Прочее
  AdditionType_Ves=0'Вес
end enum 
public enum enumStructType'Тип раздела
  StructType_Derevo=2'Дерево
  StructType_Kollekciy=1'Коллекция
  StructType_Stroka_atributov=0'Строка атрибутов
end enum 
public enum enumTargetType'Вариант уровня приложения, куда может генерироваться код
  TargetType_SUBD=0'СУБД
  TargetType_ARM=4'АРМ
  TargetType_Dokumentaciy=3'Документация
  TargetType_MODEL_=1'МОДЕЛЬ
  TargetType_Prilogenie=2'Приложение
end enum 
public enum enumPartAddBehaivor'Поведение при добавлении строки раздела
  PartAddBehaivor_AddForm=0'AddForm
  PartAddBehaivor_RunAction=2'RunAction
  PartAddBehaivor_RefreshOnly=1'RefreshOnly
end enum 
public enum enumFolderType'Тип папки
  FolderType_Ishodysie=2'Исходящие
  FolderType_Zaversennie=10'Завершенные
  FolderType_Kalendar_=5'Календарь
  FolderType_cls__=0' 
  FolderType_Vhodysie=1'Входящие
  FolderType_Otlogennie=9'Отложенные
  FolderType_Gurnal=4'Журнал
  FolderType_V_rabote=8'В работе
  FolderType_Cernoviki=7'Черновики
  FolderType_Otpravlennie=6'Отправленные
  FolderType_Udalennie=3'Удаленные
end enum 
public enum enumWFShortcutType'Варианты ярлыков, которые может размещать процесс
  WFShortcutType_Function=1'Function
  WFShortcutType_Process=2'Process
  WFShortcutType_Document=0'Document
end enum 
public enum enumReferenceType'ReferenceType
  ReferenceType_Na_stroku_razdela=2'На строку раздела
  ReferenceType_Skalyrnoe_pole_OPN_ne_ssilkaCLS=0'Скалярное поле ( не ссылка)
  ReferenceType_Na_ob_ekt_=1'На объект 
end enum 
public enum enumSex'Мужской / Женский
  Sex_Mugskoy=1'Мужской
  Sex_Ne_susestvenno=0'Не существенно
  Sex_Genskiy=-1'Женский
end enum 
public enum enumMesureFormat'Формат индикатора
  MesureFormat_Data=1'Дата
  MesureFormat_Tekst=5'Текст
  MesureFormat_Ob_ekt=4'Объект
  MesureFormat_Spravocnik=2'Справочник
  MesureFormat_Cislo=0'Число
end enum 
public enum enumWFFuncParam'Вариант расшифровки параметра функции
  WFFuncParam_Dokument=5'Документ
  WFFuncParam_Znacenie=0'Значение
  WFFuncParam_Dokument_processa=4'Документ процесса
  WFFuncParam_Viragenie=2'Выражение
  WFFuncParam_Rol_=8'Роль
  WFFuncParam_Papka=3'Папка
  WFFuncParam_Pole=7'Поле
  WFFuncParam_Znacenie_iz_parametra=1'Значение из параметра
  WFFuncParam_Razdel=6'Раздел
  WFFuncParam_Tip_dokumenta=9'Тип документа
end enum 
public enum enumYesNo'Да / Нет (0 или 1)
  YesNo_Da=1'Да
  YesNo_Net=0'Нет
end enum 
public enum enumGeneratorStyle'GeneratorStyle
  GeneratorStyle_Odin_tip=0'Один тип
  GeneratorStyle_Vse_tipi_srazu=1'Все типы сразу
end enum 
public enum enumReportType'Вариант отчета
  ReportType_Dvumernay_matrica=1'Двумерная матрица
  ReportType_Tablica=0'Таблица
  ReportType_Eksport_po_WORD_sablonu=3'Экспорт по WORD шаблону
  ReportType_Tol_ko_rascet=2'Только расчет
  ReportType_Eksport_po_Excel_sablonu=4'Экспорт по Excel шаблону
end enum 
public enum enumHACCPPStep'Тип шага в ХАССП процессе
  HACCPPStep_Sir_e=5'Сырье
  HACCPPStep_Transportirovka=7'Транспортировка
  HACCPPStep_Operaciy=3'Операция
  HACCPPStep_Zaversenie_processa=1'Завершение процесса
  HACCPPStep_Nacalo_processa=0'Начало процесса
  HACCPPStep_Ostanov_processa=2'Останов процесса
  HACCPPStep_Vhod_iz=9'Вход из
  HACCPPStep_Vihod_v=8'Выход в
  HACCPPStep_Hranenie=6'Хранение
  HACCPPStep_Resenie=4'Решение
end enum 
public enum enumDayInWeek'День недели
  DayInWeek_Ponedel_nik=1'Понедельник
  DayInWeek_Sreda=3'Среда
  DayInWeek_Vtornik=2'Вторник
  DayInWeek_Pytnica=5'Пятница
  DayInWeek_Subbota=6'Суббота
  DayInWeek_Cetverg=4'Четверг
  DayInWeek_Voskresen_e=7'Воскресенье
end enum 
public enum enumPlatType'Тип плательщика
  PlatType_Otpravitel_=0'Отправитель
  PlatType_Polucatel_=1'Получатель
  PlatType_Drugoy=2'Другой
end enum 
public enum enumPartType'PartType
  PartType_Kollekciy=1'Коллекция
  PartType_Rassirenie=3'Расширение
  PartType_Stroka=0'Строка
  PartType_Derevo=2'Дерево
end enum 
public enum enumEmployment'Занятость
  Employment_Polnay=0'Полная
  Employment_Casticnay=1'Частичная
  Employment_Ne_vagno=-1'Не важно
end enum 
public enum enumKONTR_TYPE'Тип контрагента
  KONTR_TYPE_Procee=5'Прочее
  KONTR_TYPE_Perevozcik=4'Перевозчик
  KONTR_TYPE_Partner=2'Партнер
  KONTR_TYPE_Pokupatel_=0'Покупатель
  KONTR_TYPE_Ucreditel_=3'Учредитель
  KONTR_TYPE_Postavsik=1'Поставщик
end enum 
public enum enumConditionType'Варианты условий
  ConditionType_LSGT=2'&lt;&gt;
  ConditionType_GT=3'&gt;
  ConditionType_EQ=1'=
  ConditionType_GTEQ=4'&gt;=
  ConditionType_LSEQ=7'&lt;=
  ConditionType_like=8'like
  ConditionType_LS=6'&lt;
  ConditionType_none=0'none
end enum 
public enum enumVRTaskType'Тип задачи
  VRTaskType_V_opredelenniy_moment=0'В определенный момент
  VRTaskType_Fonovay=2'Фоновая
  VRTaskType_K_opredelennomu_vremeni=1'К определенному времени
end enum 
public enum enumOnJournalRowClick'действие при открытии строки журнала
  OnJournalRowClick_Otkrit__dokument=2'Открыть документ
  OnJournalRowClick_Otkrit__stroku=1'Открыть строку
  OnJournalRowClick_Nicego_ne_delat_=0'Ничего не делать
end enum 
public enum enumEducation'Образование
  Education_Srednee_special_noe=2'Среднее специальное
  Education_Srednee=1'Среднее
  Education_Ne_vagno=-1'Не важно
  Education_Vissee=4'Высшее
  Education_Nepolnoe_srednee=0'Неполное среднее
  Education_Nepolnoe_vissee=3'Неполное высшее
  Education_Neskol_ko_vissih=5'Несколько высших
end enum 
public enum enumDCType'Остатки/Дебит/Кредит
  DCType_Ostatki=-1'Остатки
  DCType_Debit=0'Дебит
  DCType_Kredit=1'Кредит
end enum 
public enum enumDevelopmentBase'Платформа разработки
  DevelopmentBase_JAVA=2'JAVA
  DevelopmentBase_OTHER=3'OTHER
  DevelopmentBase_DOTNET=1'DOTNET
  DevelopmentBase_VB6=0'VB6
end enum 
public enum enumBoolean'Да / Нет
  Boolean_Da=-1'Да
  Boolean_Net=0'Нет
end enum 
public enum enumTriState'Да / Нет / Не определено
  TriState_Net=0'Нет
  TriState_Ne_susestvenno=-1'Не существенно
  TriState_Da=1'Да
end enum 
public enum enumCurrencyType'Валюта платежа
  CurrencyType_Rubl_=0'Рубль
  CurrencyType_Evro=2'Евро
  CurrencyType_Dollar=1'Доллар
end enum 
public enum enumWFFuncState'Состояние функции в бизнес процессе
  WFFuncState_Processed=8'Processed
  WFFuncState_InWork=3'InWork
  WFFuncState_Pause=4'Pause
  WFFuncState_Ready=5'Ready
  WFFuncState_InControl=6'InControl
  WFFuncState_Prepare=1'Prepare
  WFFuncState_Active=2'Active
  WFFuncState_Done=7'Done
  WFFuncState_Initial=0'Initial
end enum 
public enum enumEmployment_'осталось для совместимости
  Employment__Polnay=0'Полная
  Employment__Casticnay=1'Частичная
  Employment__Ne_vagno=-1'Не важно
end enum 
public enum enumKONTR_STATUS'Состояние партнера
  KONTR_STATUS_Blokirovan=2'Блокирован
  KONTR_STATUS_Aktiveniy=0'Активеный
  KONTR_STATUS_Pssivniy=1'Пссивный
  KONTR_STATUS_Operacii_zapreseni=3'Операции запрещены
end enum 
public enum enumExtentionType'Тип расширения
  ExtentionType_OnFormExt=1'OnFormExt
  ExtentionType_CodeGenerator=7'CodeGenerator
  ExtentionType_JrnlAddExt=3'JrnlAddExt
  ExtentionType_VerifyRowExt=6'VerifyRowExt
  ExtentionType_StatusExt=0'StatusExt
  ExtentionType_ARMGenerator=8'ARMGenerator
  ExtentionType_DefaultExt=5'DefaultExt
  ExtentionType_CustomExt=2'CustomExt
  ExtentionType_JrnlRunExt=4'JrnlRunExt
end enum 
public enum enumReplicationType'Вариант репликации докуента
  ReplicationType_Ves__dokument=0'Весь документ
  ReplicationType_Lokal_niy=2'Локальный
  ReplicationType_Postrocno=1'Построчно
end enum 
public enum enumInfoStoreType'Тип каталога
  InfoStoreType_Gruppovoy=2'Групповой
  InfoStoreType_Personal_niy=1'Персональный
  InfoStoreType_cls__Obsiy=0' Общий
end enum 

    Public Class Application
        Inherits MKSNManager.Document.Doc_Base


        Protected Overrides Function MyTypeName() As String
            MyTypeName = &quot;WFFD&quot;
        End Function

  Private m_WFFD_ShortCut As WFFD_ShortCut_col
        Public ReadOnly Property WFFD_ShortCut() As WFFD_ShortCut_col
            Get
                If m_WFFD_ShortCut Is Nothing Then
                    m_WFFD_ShortCut = New WFFD_ShortCut_col
                    m_WFFD_ShortCut.Application = Me
                    m_WFFD_ShortCut.Parent = Me
                    m_WFFD_ShortCut.Refresh()
                End If
                WFFD_ShortCut = m_WFFD_ShortCut
            End Get
        End Property
  Private m_WFFD_Results As WFFD_Results_col
        Public ReadOnly Property WFFD_Results() As WFFD_Results_col
            Get
                If m_WFFD_Results Is Nothing Then
                    m_WFFD_Results = New WFFD_Results_col
                    m_WFFD_Results.Application = Me
                    m_WFFD_Results.Parent = Me
                    m_WFFD_Results.Refresh()
                End If
                WFFD_Results = m_WFFD_Results
            End Get
        End Property
  Private m_WFFD_CustomParam As WFFD_CustomParam_col
        Public ReadOnly Property WFFD_CustomParam() As WFFD_CustomParam_col
            Get
                If m_WFFD_CustomParam Is Nothing Then
                    m_WFFD_CustomParam = New WFFD_CustomParam_col
                    m_WFFD_CustomParam.Application = Me
                    m_WFFD_CustomParam.Parent = Me
                    m_WFFD_CustomParam.Refresh()
                End If
                WFFD_CustomParam = m_WFFD_CustomParam
            End Get
        End Property
  Private m_WFFD_Doer As WFFD_Doer_col
        Public ReadOnly Property WFFD_Doer() As WFFD_Doer_col
            Get
                If m_WFFD_Doer Is Nothing Then
                    m_WFFD_Doer = New WFFD_Doer_col
                    m_WFFD_Doer.Application = Me
                    m_WFFD_Doer.Parent = Me
                    m_WFFD_Doer.Refresh()
                End If
                WFFD_Doer = m_WFFD_Doer
            End Get
        End Property
  Private m_WFFD_common As WFFD_common_col
        Public ReadOnly Property WFFD_common() As WFFD_common_col
            Get
                If m_WFFD_common Is Nothing Then
                    m_WFFD_common = New WFFD_common_col
                    m_WFFD_common.Application = Me
                    m_WFFD_common.Parent = Me
                    m_WFFD_common.Refresh()
                End If
                WFFD_common = m_WFFD_common
            End Get
        End Property
  Private m_WFFD_ATTR1 As WFFD_ATTR1_col
        Public ReadOnly Property WFFD_ATTR1() As WFFD_ATTR1_col
            Get
                If m_WFFD_ATTR1 Is Nothing Then
                    m_WFFD_ATTR1 = New WFFD_ATTR1_col
                    m_WFFD_ATTR1.Application = Me
                    m_WFFD_ATTR1.Parent = Me
                    m_WFFD_ATTR1.Refresh()
                End If
                WFFD_ATTR1 = m_WFFD_ATTR1
            End Get
        End Property
  Private m_WFFD_DOCS As WFFD_DOCS_col
        Public ReadOnly Property WFFD_DOCS() As WFFD_DOCS_col
            Get
                If m_WFFD_DOCS Is Nothing Then
                    m_WFFD_DOCS = New WFFD_DOCS_col
                    m_WFFD_DOCS.Application = Me
                    m_WFFD_DOCS.Parent = Me
                    m_WFFD_DOCS.Refresh()
                End If
                WFFD_DOCS = m_WFFD_DOCS
            End Get
        End Property

        Public Overrides Sub Dispose()
            WFFD_ShortCut.Dispose()
            WFFD_Results.Dispose()
            WFFD_CustomParam.Dispose()
            WFFD_Doer.Dispose()
            WFFD_common.Dispose()
            WFFD_ATTR1.Dispose()
            WFFD_DOCS.Dispose()
        End Sub

        Protected Overrides Function FindInCollections(ByVal Table As String, ByVal InstID As String) As MKSNManager.Document.DocRow_Base
        FindInCollections = Nothing
            dim mFindInCollections As MKSNManager.Document.DocRow_Base
            mFindInCollections = WFFD_ShortCut.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFFD_Results.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFFD_CustomParam.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFFD_Doer.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFFD_common.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFFD_ATTR1.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
            mFindInCollections = WFFD_DOCS.FindObject(Table, InstID)
            if not mFindInCollections is nothing then return mFindInCollections
        End Function

        Protected Overrides Sub XMLLoadCollections(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
            Dim e_list As XmlNodeList
            On Error Resume Next
            e_list = node.SelectNodes(&quot;WFFD_ShortCut_COL&quot;)
            WFFD_ShortCut.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFFD_Results_COL&quot;)
            WFFD_Results.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFFD_CustomParam_COL&quot;)
            WFFD_CustomParam.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFFD_Doer_COL&quot;)
            WFFD_Doer.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFFD_common_COL&quot;)
            WFFD_common.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFFD_ATTR1_COL&quot;)
            WFFD_ATTR1.XMLLoad(e_list, LoadMode)
            e_list = node.SelectNodes(&quot;WFFD_DOCS_COL&quot;)
            WFFD_DOCS.XMLLoad(e_list, LoadMode)
        End Sub

        Public Overrides Sub XMLSaveCollections(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
            WFFD_ShortCut.XMLSave(node, Xdom)
            WFFD_Results.XMLSave(node, Xdom)
            WFFD_CustomParam.XMLSave(node, Xdom)
            WFFD_Doer.XMLSave(node, Xdom)
            WFFD_common.XMLSave(node, Xdom)
            WFFD_ATTR1.XMLSave(node, Xdom)
            WFFD_DOCS.XMLSave(node, Xdom)
        End Sub
Public Overrides Sub BatchUpdate()
  If Not Application.WorkOffline Then
    WFFD_ShortCut.BatchUpdate
    WFFD_Results.BatchUpdate
    WFFD_CustomParam.BatchUpdate
    WFFD_Doer.BatchUpdate
    WFFD_common.BatchUpdate
    WFFD_ATTR1.BatchUpdate
    WFFD_DOCS.BatchUpdate
  End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_ShortCut" File="WFFD_ShortCut.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFFD
    Public Class WFFD_ShortCut
        Inherits MKSNManager.Document.DocRow_Base

            private m_StartMode  as String
            private m_DocName  as String
            private m_Folder  as System.Guid

        Public Overrides Sub CleanFields()
            ' m_StartMode=   
            ' m_DocName=   
            ' m_Folder=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             dr(&quot;StartMode&quot;) =StartMode
             dr(&quot;DocName&quot;) =DocName
             if Folder is nothing then
               dr(&quot;Folder&quot;) =system.dbnull.value
               dr(&quot;Folder_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;Folder&quot;) =Folder.BRIEF
               dr(&quot;Folder_ID&quot;) =Folder.ID
             end if 
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          nv.Add(&quot;StartMode&quot;, StartMode, dbtype.string)
          nv.Add(&quot;DocName&quot;, DocName, dbtype.string)
          if m_Folder.Equals(System.Guid.Empty) then
            nv.Add(&quot;Folder&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;Folder&quot;, m_Folder, dbtype.guid)
          end if 
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          m_StartMode=reader.item(&quot;StartMode&quot;)
          m_DocName=reader.item(&quot;DocName&quot;)
          if isdbnull(reader.item(&quot;Folder&quot;)) then
            m_Folder = System.GUID.Empty
          else
            m_Folder=reader.item(&quot;Folder&quot;)
          end if 
        End Sub
        Public Property StartMode() As String
            Get
                LoadFromDatabase()
                StartMode = m_StartMode
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_StartMode = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property DocName() As String
            Get
                LoadFromDatabase()
                DocName = m_DocName
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_DocName = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Folder() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                Folder = me.application.Findrowobject(&quot;Folder&quot;,m_Folder)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_Folder = Value.id
                else
                   m_Folder=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            StartMode = node.Attributes.GetNamedItem(&quot;StartMode&quot;).Value
            DocName = node.Attributes.GetNamedItem(&quot;DocName&quot;).Value
            m_Folder = new system.guid(node.Attributes.GetNamedItem(&quot;Folder&quot;).Value)
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;StartMode&quot;, StartMode)  
          node.SetAttribute(&quot;DocName&quot;, DocName)  
          node.SetAttribute(&quot;Folder&quot;, m_Folder.tostring)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_ShortCut_col" File="WFFD_ShortCut_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFFD
    Public Class WFFD_ShortCut_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFFD_ShortCut&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;StartMode&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;DocName&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Folder_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;Folder&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFFD_ShortCut
        End Function
        Public Function GetItem( vIndex as object ) As WFFD.WFFD_ShortCut
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFFD.WFFD_ShortCut))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFFD.WFFD_ShortCut
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_Results" File="WFFD_Results.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFFD
    Public Class WFFD_Results
        Inherits MKSNManager.Document.DocRow_Base

            private m_ResultWeight  as double
            private m_Name  as String
        private m_WFFD_DOCSTOPS As WFFD_DOCSTOPS_col

        Public Overrides Sub CleanFields()
            ' m_ResultWeight=   
            ' m_Name=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             dr(&quot;ResultWeight&quot;) =ResultWeight
             dr(&quot;Name&quot;) =Name
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            mFindInside = WFFD_DOCSTOPS.FindObject(table,RowID)
            if not mFindInside is nothing then return mFindInside
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          nv.Add(&quot;ResultWeight&quot;, ResultWeight, dbtype.double)
          nv.Add(&quot;Name&quot;, Name, dbtype.string)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          m_ResultWeight=reader.item(&quot;ResultWeight&quot;)
          m_Name=reader.item(&quot;Name&quot;)
        End Sub
        Public Property ResultWeight() As double
            Get
                LoadFromDatabase()
                ResultWeight = m_ResultWeight
                AccessTime = Now
            End Get
            Set(ByVal Value As double )
                LoadFromDatabase()
                m_ResultWeight = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Name() As String
            Get
                LoadFromDatabase()
                Name = m_Name
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_Name = Value
                ChangeTime = Now
            End Set
        End Property
        Public readonly Property WFFD_DOCSTOPS() As WFFD_DOCSTOPS_col
            Get
                if  m_WFFD_DOCSTOPS is nothing then
                  m_WFFD_DOCSTOPS = new WFFD_DOCSTOPS_col
                  m_WFFD_DOCSTOPS.Parent = me
                  m_WFFD_DOCSTOPS.Application = me.Application
                  m_WFFD_DOCSTOPS.Refresh
                end if
                WFFD_DOCSTOPS = m_WFFD_DOCSTOPS
                AccessTime = Now
            End Get
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            ResultWeight = node.Attributes.GetNamedItem(&quot;ResultWeight&quot;).Value
            Name = node.Attributes.GetNamedItem(&quot;Name&quot;).Value
            e_list = node.SelectNodes(&quot;WFFD_DOCSTOPS_COL&quot;)
            WFFD_DOCSTOPS.XMLLoad(e_list,LoadMode)
             Changed = true
        End sub
        Public Overrides Sub Dispose()
            WFFD_DOCSTOPS.Dispose
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;ResultWeight&quot;, ResultWeight)  
          node.SetAttribute(&quot;Name&quot;, Name)  
            WFFD_DOCSTOPS.XMLSave(node,xdom)
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
            WFFD_DOCSTOPS.BatchUpdate
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_DOCSTOPS" File="WFFD_DOCSTOPS.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFFD
    Public Class WFFD_DOCSTOPS
        Inherits MKSNManager.Document.DocRow_Base

            private m_ProcessDocument  as System.Guid
            private m_DocStateName  as String

        Public Overrides Sub CleanFields()
            ' m_ProcessDocument=   
            ' m_DocStateName=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             if ProcessDocument is nothing then
               dr(&quot;ProcessDocument&quot;) =system.dbnull.value
               dr(&quot;ProcessDocument_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ProcessDocument&quot;) =ProcessDocument.BRIEF
               dr(&quot;ProcessDocument_ID&quot;) =ProcessDocument.ID
             end if 
             dr(&quot;DocStateName&quot;) =DocStateName
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          if m_ProcessDocument.Equals(System.Guid.Empty) then
            nv.Add(&quot;ProcessDocument&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ProcessDocument&quot;, m_ProcessDocument, dbtype.guid)
          end if 
          nv.Add(&quot;DocStateName&quot;, DocStateName, dbtype.string)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          if isdbnull(reader.item(&quot;ProcessDocument&quot;)) then
            m_ProcessDocument = System.GUID.Empty
          else
            m_ProcessDocument=reader.item(&quot;ProcessDocument&quot;)
          end if 
          m_DocStateName=reader.item(&quot;DocStateName&quot;)
        End Sub
        Public Property ProcessDocument() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ProcessDocument = me.application.Findrowobject(&quot;WFDef_Doc&quot;,m_ProcessDocument)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ProcessDocument = Value.id
                else
                   m_ProcessDocument=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property DocStateName() As String
            Get
                LoadFromDatabase()
                DocStateName = m_DocStateName
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_DocStateName = Value
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            m_ProcessDocument = new system.guid(node.Attributes.GetNamedItem(&quot;ProcessDocument&quot;).Value)
            DocStateName = node.Attributes.GetNamedItem(&quot;DocStateName&quot;).Value
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;ProcessDocument&quot;, m_ProcessDocument.tostring)  
          node.SetAttribute(&quot;DocStateName&quot;, DocStateName)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_Results_col" File="WFFD_Results_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFFD
    Public Class WFFD_Results_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFFD_Results&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ResultWeight&quot;, GetType(System.double))
            dt.Columns.Add(&quot;Name&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFFD_Results
        End Function
        Public Function GetItem( vIndex as object ) As WFFD.WFFD_Results
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFFD.WFFD_Results))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFFD.WFFD_Results
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_DOCSTOPS_col" File="WFFD_DOCSTOPS_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFFD
    Public Class WFFD_DOCSTOPS_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFFD_DOCSTOPS&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ProcessDocument_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ProcessDocument&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;DocStateName&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFFD_DOCSTOPS
        End Function
        Public Function GetItem( vIndex as object ) As WFFD.WFFD_DOCSTOPS
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFFD.WFFD_DOCSTOPS))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFFD.WFFD_DOCSTOPS
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_CustomParam" File="WFFD_CustomParam.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFFD
    Public Class WFFD_CustomParam
        Inherits MKSNManager.Document.DocRow_Base

            private m_ParamName  as String
            private m_the_Value  as STRING

        Public Overrides Sub CleanFields()
            ' m_ParamName=   
            ' m_the_Value=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             dr(&quot;ParamName&quot;) =ParamName
             dr(&quot;the_Value&quot;) =the_Value
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          nv.Add(&quot;ParamName&quot;, ParamName, dbtype.string)
          nv.Add(&quot;the_Value&quot;, the_Value, dbtype.string)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          m_ParamName=reader.item(&quot;ParamName&quot;)
          m_the_Value=reader.item(&quot;the_Value&quot;)
        End Sub
        Public Property ParamName() As String
            Get
                LoadFromDatabase()
                ParamName = m_ParamName
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_ParamName = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property the_Value() As STRING
            Get
                LoadFromDatabase()
                the_Value = m_the_Value
                AccessTime = Now
            End Get
            Set(ByVal Value As STRING )
                LoadFromDatabase()
                m_the_Value = Value
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            ParamName = node.Attributes.GetNamedItem(&quot;ParamName&quot;).Value
            the_Value = node.Attributes.GetNamedItem(&quot;the_Value&quot;).Value
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;ParamName&quot;, ParamName)  
          node.SetAttribute(&quot;the_Value&quot;, the_Value)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_CustomParam_col" File="WFFD_CustomParam_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFFD
    Public Class WFFD_CustomParam_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFFD_CustomParam&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ParamName&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;the_Value&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFFD_CustomParam
        End Function
        Public Function GetItem( vIndex as object ) As WFFD.WFFD_CustomParam
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFFD.WFFD_CustomParam))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFFD.WFFD_CustomParam
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_Doer" File="WFFD_Doer.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFFD
    Public Class WFFD_Doer
        Inherits MKSNManager.Document.DocRow_Base

            private m_DoerGroup  as System.Guid

        Public Overrides Sub CleanFields()
            ' m_DoerGroup=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             if DoerGroup is nothing then
               dr(&quot;DoerGroup&quot;) =system.dbnull.value
               dr(&quot;DoerGroup_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;DoerGroup&quot;) =DoerGroup.BRIEF
               dr(&quot;DoerGroup_ID&quot;) =DoerGroup.ID
             end if 
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          if m_DoerGroup.Equals(System.Guid.Empty) then
            nv.Add(&quot;DoerGroup&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;DoerGroup&quot;, m_DoerGroup, dbtype.guid)
          end if 
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          if isdbnull(reader.item(&quot;DoerGroup&quot;)) then
            m_DoerGroup = System.GUID.Empty
          else
            m_DoerGroup=reader.item(&quot;DoerGroup&quot;)
          end if 
        End Sub
        Public Property DoerGroup() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                DoerGroup = me.application.Findrowobject(&quot;Groups&quot;,m_DoerGroup)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_DoerGroup = Value.id
                else
                   m_DoerGroup=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            m_DoerGroup = new system.guid(node.Attributes.GetNamedItem(&quot;DoerGroup&quot;).Value)
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;DoerGroup&quot;, m_DoerGroup.tostring)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_Doer_col" File="WFFD_Doer_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFFD
    Public Class WFFD_Doer_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFFD_Doer&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;DoerGroup_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;DoerGroup&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFFD_Doer
        End Function
        Public Function GetItem( vIndex as object ) As WFFD.WFFD_Doer
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFFD.WFFD_Doer))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFFD.WFFD_Doer
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_common" File="WFFD_common.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFFD
    Public Class WFFD_common
        Inherits MKSNManager.Document.DocRow_Base

            private m_MaxPassNumber  as long
            private m_ReuseStep  as enumBoolean
            private m_TaskDescription  as STRING
            private m_StepType  as System.Guid
            private m_MaxPriority  as long
            private m_AutoCheckState  as enumBoolean
            private m_Name  as String
            private m_WorkTime  as double
            private m_GrowPriorityInterval  as long
            private m_IncPriority  as long
            private m_ReStartInterval  as long
            private m_MinPriority  as long
            private m_IntegrationData1  as String
            private m_StateCeckInterval  as long
            private m_Attachment  as Object
            private m_IntegrationData2  as String

        Public Overrides Sub CleanFields()
            ' m_MaxPassNumber=   
            ' m_ReuseStep=   
            ' m_TaskDescription=   
            ' m_StepType=   
            ' m_MaxPriority=   
            ' m_AutoCheckState=   
            ' m_Name=   
            ' m_WorkTime=   
            ' m_GrowPriorityInterval=   
            ' m_IncPriority=   
            ' m_ReStartInterval=   
            ' m_MinPriority=   
            ' m_IntegrationData1=   
            ' m_StateCeckInterval=   
            ' m_Attachment=   
            ' m_IntegrationData2=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             dr(&quot;MaxPassNumber&quot;) =MaxPassNumber
             select case ReuseStep
            case enumBoolean.Boolean_Da
              dr (&quot;ReuseStep&quot;)  = &quot;Да&quot;
              dr (&quot;ReuseStep_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;ReuseStep&quot;)  = &quot;Нет&quot;
              dr (&quot;ReuseStep_VAL&quot;)  = 0
              end select 'ReuseStep
             dr(&quot;TaskDescription&quot;) =TaskDescription
             if StepType is nothing then
               dr(&quot;StepType&quot;) =system.dbnull.value
               dr(&quot;StepType_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;StepType&quot;) =StepType.BRIEF
               dr(&quot;StepType_ID&quot;) =StepType.ID
             end if 
             dr(&quot;MaxPriority&quot;) =MaxPriority
             select case AutoCheckState
            case enumBoolean.Boolean_Da
              dr (&quot;AutoCheckState&quot;)  = &quot;Да&quot;
              dr (&quot;AutoCheckState_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;AutoCheckState&quot;)  = &quot;Нет&quot;
              dr (&quot;AutoCheckState_VAL&quot;)  = 0
              end select 'AutoCheckState
             dr(&quot;Name&quot;) =Name
             dr(&quot;WorkTime&quot;) =WorkTime
             dr(&quot;GrowPriorityInterval&quot;) =GrowPriorityInterval
             dr(&quot;IncPriority&quot;) =IncPriority
             dr(&quot;ReStartInterval&quot;) =ReStartInterval
             dr(&quot;MinPriority&quot;) =MinPriority
             dr(&quot;IntegrationData1&quot;) =IntegrationData1
             dr(&quot;StateCeckInterval&quot;) =StateCeckInterval
             dr(&quot;Attachment&quot;) =Attachment
             dr(&quot;IntegrationData2&quot;) =IntegrationData2
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          nv.Add(&quot;MaxPassNumber&quot;, MaxPassNumber, dbtype.Int32)
          nv.Add(&quot;ReuseStep&quot;, ReuseStep, dbtype.int16)
          nv.Add(&quot;TaskDescription&quot;, TaskDescription, dbtype.string)
          if m_StepType.Equals(System.Guid.Empty) then
            nv.Add(&quot;StepType&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;StepType&quot;, m_StepType, dbtype.guid)
          end if 
          nv.Add(&quot;MaxPriority&quot;, MaxPriority, dbtype.Int32)
          nv.Add(&quot;AutoCheckState&quot;, AutoCheckState, dbtype.int16)
          nv.Add(&quot;Name&quot;, Name, dbtype.string)
          nv.Add(&quot;WorkTime&quot;, WorkTime, dbtype.double)
          nv.Add(&quot;GrowPriorityInterval&quot;, GrowPriorityInterval, dbtype.Int32)
          nv.Add(&quot;IncPriority&quot;, IncPriority, dbtype.Int32)
          nv.Add(&quot;ReStartInterval&quot;, ReStartInterval, dbtype.Int32)
          nv.Add(&quot;MinPriority&quot;, MinPriority, dbtype.Int32)
          nv.Add(&quot;IntegrationData1&quot;, IntegrationData1, dbtype.string)
          nv.Add(&quot;StateCeckInterval&quot;, StateCeckInterval, dbtype.Int32)
          nv.Add(&quot;Attachment&quot;, Attachment, dbtype.Binary)
          nv.Add(&quot;IntegrationData2&quot;, IntegrationData2, dbtype.string)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          m_MaxPassNumber=reader.item(&quot;MaxPassNumber&quot;)
          m_ReuseStep=reader.item(&quot;ReuseStep&quot;)
          m_TaskDescription=reader.item(&quot;TaskDescription&quot;)
          if isdbnull(reader.item(&quot;StepType&quot;)) then
            m_StepType = System.GUID.Empty
          else
            m_StepType=reader.item(&quot;StepType&quot;)
          end if 
          m_MaxPriority=reader.item(&quot;MaxPriority&quot;)
          m_AutoCheckState=reader.item(&quot;AutoCheckState&quot;)
          m_Name=reader.item(&quot;Name&quot;)
          m_WorkTime=reader.item(&quot;WorkTime&quot;)
          m_GrowPriorityInterval=reader.item(&quot;GrowPriorityInterval&quot;)
          m_IncPriority=reader.item(&quot;IncPriority&quot;)
          m_ReStartInterval=reader.item(&quot;ReStartInterval&quot;)
          m_MinPriority=reader.item(&quot;MinPriority&quot;)
          m_IntegrationData1=reader.item(&quot;IntegrationData1&quot;)
          m_StateCeckInterval=reader.item(&quot;StateCeckInterval&quot;)
          m_Attachment=reader.item(&quot;Attachment&quot;)
          m_IntegrationData2=reader.item(&quot;IntegrationData2&quot;)
        End Sub
        Public Property MaxPassNumber() As long
            Get
                LoadFromDatabase()
                MaxPassNumber = m_MaxPassNumber
                AccessTime = Now
            End Get
            Set(ByVal Value As long )
                LoadFromDatabase()
                m_MaxPassNumber = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property ReuseStep() As enumBoolean
            Get
                LoadFromDatabase()
                ReuseStep = m_ReuseStep
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_ReuseStep = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property TaskDescription() As STRING
            Get
                LoadFromDatabase()
                TaskDescription = m_TaskDescription
                AccessTime = Now
            End Get
            Set(ByVal Value As STRING )
                LoadFromDatabase()
                m_TaskDescription = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property StepType() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                StepType = me.application.Findrowobject(&quot;WFDic_func&quot;,m_StepType)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_StepType = Value.id
                else
                   m_StepType=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property MaxPriority() As long
            Get
                LoadFromDatabase()
                MaxPriority = m_MaxPriority
                AccessTime = Now
            End Get
            Set(ByVal Value As long )
                LoadFromDatabase()
                m_MaxPriority = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property AutoCheckState() As enumBoolean
            Get
                LoadFromDatabase()
                AutoCheckState = m_AutoCheckState
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_AutoCheckState = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Name() As String
            Get
                LoadFromDatabase()
                Name = m_Name
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_Name = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property WorkTime() As double
            Get
                LoadFromDatabase()
                WorkTime = m_WorkTime
                AccessTime = Now
            End Get
            Set(ByVal Value As double )
                LoadFromDatabase()
                m_WorkTime = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property GrowPriorityInterval() As long
            Get
                LoadFromDatabase()
                GrowPriorityInterval = m_GrowPriorityInterval
                AccessTime = Now
            End Get
            Set(ByVal Value As long )
                LoadFromDatabase()
                m_GrowPriorityInterval = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property IncPriority() As long
            Get
                LoadFromDatabase()
                IncPriority = m_IncPriority
                AccessTime = Now
            End Get
            Set(ByVal Value As long )
                LoadFromDatabase()
                m_IncPriority = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property ReStartInterval() As long
            Get
                LoadFromDatabase()
                ReStartInterval = m_ReStartInterval
                AccessTime = Now
            End Get
            Set(ByVal Value As long )
                LoadFromDatabase()
                m_ReStartInterval = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property MinPriority() As long
            Get
                LoadFromDatabase()
                MinPriority = m_MinPriority
                AccessTime = Now
            End Get
            Set(ByVal Value As long )
                LoadFromDatabase()
                m_MinPriority = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property IntegrationData1() As String
            Get
                LoadFromDatabase()
                IntegrationData1 = m_IntegrationData1
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_IntegrationData1 = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property StateCeckInterval() As long
            Get
                LoadFromDatabase()
                StateCeckInterval = m_StateCeckInterval
                AccessTime = Now
            End Get
            Set(ByVal Value As long )
                LoadFromDatabase()
                m_StateCeckInterval = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Attachment() As Object
            Get
                LoadFromDatabase()
                Attachment = m_Attachment
                AccessTime = Now
            End Get
            Set(ByVal Value As Object )
                LoadFromDatabase()
                m_Attachment = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property IntegrationData2() As String
            Get
                LoadFromDatabase()
                IntegrationData2 = m_IntegrationData2
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_IntegrationData2 = Value
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            MaxPassNumber = node.Attributes.GetNamedItem(&quot;MaxPassNumber&quot;).Value
            ReuseStep = node.Attributes.GetNamedItem(&quot;ReuseStep&quot;).Value
            TaskDescription = node.Attributes.GetNamedItem(&quot;TaskDescription&quot;).Value
            m_StepType = new system.guid(node.Attributes.GetNamedItem(&quot;StepType&quot;).Value)
            MaxPriority = node.Attributes.GetNamedItem(&quot;MaxPriority&quot;).Value
            AutoCheckState = node.Attributes.GetNamedItem(&quot;AutoCheckState&quot;).Value
            Name = node.Attributes.GetNamedItem(&quot;Name&quot;).Value
            WorkTime = node.Attributes.GetNamedItem(&quot;WorkTime&quot;).Value
            GrowPriorityInterval = node.Attributes.GetNamedItem(&quot;GrowPriorityInterval&quot;).Value
            IncPriority = node.Attributes.GetNamedItem(&quot;IncPriority&quot;).Value
            ReStartInterval = node.Attributes.GetNamedItem(&quot;ReStartInterval&quot;).Value
            MinPriority = node.Attributes.GetNamedItem(&quot;MinPriority&quot;).Value
            IntegrationData1 = node.Attributes.GetNamedItem(&quot;IntegrationData1&quot;).Value
            StateCeckInterval = node.Attributes.GetNamedItem(&quot;StateCeckInterval&quot;).Value
            Attachment = node.Attributes.GetNamedItem(&quot;Attachment&quot;).Value
            IntegrationData2 = node.Attributes.GetNamedItem(&quot;IntegrationData2&quot;).Value
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;MaxPassNumber&quot;, MaxPassNumber)  
          node.SetAttribute(&quot;ReuseStep&quot;, ReuseStep)  
          node.SetAttribute(&quot;TaskDescription&quot;, TaskDescription)  
          node.SetAttribute(&quot;StepType&quot;, m_StepType.tostring)  
          node.SetAttribute(&quot;MaxPriority&quot;, MaxPriority)  
          node.SetAttribute(&quot;AutoCheckState&quot;, AutoCheckState)  
          node.SetAttribute(&quot;Name&quot;, Name)  
          node.SetAttribute(&quot;WorkTime&quot;, WorkTime)  
          node.SetAttribute(&quot;GrowPriorityInterval&quot;, GrowPriorityInterval)  
          node.SetAttribute(&quot;IncPriority&quot;, IncPriority)  
          node.SetAttribute(&quot;ReStartInterval&quot;, ReStartInterval)  
          node.SetAttribute(&quot;MinPriority&quot;, MinPriority)  
          node.SetAttribute(&quot;IntegrationData1&quot;, IntegrationData1)  
          node.SetAttribute(&quot;StateCeckInterval&quot;, StateCeckInterval)  
          node.SetAttribute(&quot;Attachment&quot;, Attachment)  
          node.SetAttribute(&quot;IntegrationData2&quot;, IntegrationData2)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_common_col" File="WFFD_common_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFFD
    Public Class WFFD_common_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFFD_common&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;MaxPassNumber&quot;, Gettype(System.Int32))
            dt.Columns.Add(&quot;ReuseStep_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;ReuseStep&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;TaskDescription&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;StepType_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;StepType&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;MaxPriority&quot;, Gettype(System.Int32))
            dt.Columns.Add(&quot;AutoCheckState_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;AutoCheckState&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Name&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;WorkTime&quot;, GetType(System.double))
            dt.Columns.Add(&quot;GrowPriorityInterval&quot;, Gettype(System.Int32))
            dt.Columns.Add(&quot;IncPriority&quot;, Gettype(System.Int32))
            dt.Columns.Add(&quot;ReStartInterval&quot;, Gettype(System.Int32))
            dt.Columns.Add(&quot;MinPriority&quot;, Gettype(System.Int32))
            dt.Columns.Add(&quot;IntegrationData1&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;StateCeckInterval&quot;, Gettype(System.Int32))
            dt.Columns.Add(&quot;Attachment&quot;, GetType(System.object))
            dt.Columns.Add(&quot;IntegrationData2&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFFD_common
        End Function
        Public Function GetItem( vIndex as object ) As WFFD.WFFD_common
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFFD.WFFD_common))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFFD.WFFD_common
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_ATTR1" File="WFFD_ATTR1.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFFD
    Public Class WFFD_ATTR1
        Inherits MKSNManager.Document.DocRow_Base

            private m_DocState1  as System.Guid
            private m_Folder  as System.Guid
            private m_ProcessParameter  as System.Guid
            private m_DocState2  as System.Guid
            private m_PartField  as System.Guid
            private m_ProcessParameter3  as System.Guid
            private m_the_Value  as String
            private m_Flag  as enumBoolean
            private m_Path2  as STRING
            private m_Path  as STRING
            private m_Flag2  as enumBoolean
            private m_ProcessDocument  as System.Guid
            private m_SubProcDocument  as String
            private m_SubProcessType  as System.Guid
            private m_ObjectType  as System.Guid
            private m_Value2  as String
            private m_DocumentPart  as System.Guid
            private m_ProcessParameter4  as System.Guid
            private m_ProcessParameter2  as System.Guid

        Public Overrides Sub CleanFields()
            ' m_DocState1=   
            ' m_Folder=   
            ' m_ProcessParameter=   
            ' m_DocState2=   
            ' m_PartField=   
            ' m_ProcessParameter3=   
            ' m_the_Value=   
            ' m_Flag=   
            ' m_Path2=   
            ' m_Path=   
            ' m_Flag2=   
            ' m_ProcessDocument=   
            ' m_SubProcDocument=   
            ' m_SubProcessType=   
            ' m_ObjectType=   
            ' m_Value2=   
            ' m_DocumentPart=   
            ' m_ProcessParameter4=   
            ' m_ProcessParameter2=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             if DocState1 is nothing then
               dr(&quot;DocState1&quot;) =system.dbnull.value
               dr(&quot;DocState1_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;DocState1&quot;) =DocState1.BRIEF
               dr(&quot;DocState1_ID&quot;) =DocState1.ID
             end if 
             if Folder is nothing then
               dr(&quot;Folder&quot;) =system.dbnull.value
               dr(&quot;Folder_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;Folder&quot;) =Folder.BRIEF
               dr(&quot;Folder_ID&quot;) =Folder.ID
             end if 
             if ProcessParameter is nothing then
               dr(&quot;ProcessParameter&quot;) =system.dbnull.value
               dr(&quot;ProcessParameter_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ProcessParameter&quot;) =ProcessParameter.BRIEF
               dr(&quot;ProcessParameter_ID&quot;) =ProcessParameter.ID
             end if 
             if DocState2 is nothing then
               dr(&quot;DocState2&quot;) =system.dbnull.value
               dr(&quot;DocState2_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;DocState2&quot;) =DocState2.BRIEF
               dr(&quot;DocState2_ID&quot;) =DocState2.ID
             end if 
             if PartField is nothing then
               dr(&quot;PartField&quot;) =system.dbnull.value
               dr(&quot;PartField_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;PartField&quot;) =PartField.BRIEF
               dr(&quot;PartField_ID&quot;) =PartField.ID
             end if 
             if ProcessParameter3 is nothing then
               dr(&quot;ProcessParameter3&quot;) =system.dbnull.value
               dr(&quot;ProcessParameter3_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ProcessParameter3&quot;) =ProcessParameter3.BRIEF
               dr(&quot;ProcessParameter3_ID&quot;) =ProcessParameter3.ID
             end if 
             dr(&quot;the_Value&quot;) =the_Value
             select case Flag
            case enumBoolean.Boolean_Da
              dr (&quot;Flag&quot;)  = &quot;Да&quot;
              dr (&quot;Flag_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;Flag&quot;)  = &quot;Нет&quot;
              dr (&quot;Flag_VAL&quot;)  = 0
              end select 'Flag
             dr(&quot;Path2&quot;) =Path2
             dr(&quot;Path&quot;) =Path
             select case Flag2
            case enumBoolean.Boolean_Da
              dr (&quot;Flag2&quot;)  = &quot;Да&quot;
              dr (&quot;Flag2_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;Flag2&quot;)  = &quot;Нет&quot;
              dr (&quot;Flag2_VAL&quot;)  = 0
              end select 'Flag2
             if ProcessDocument is nothing then
               dr(&quot;ProcessDocument&quot;) =system.dbnull.value
               dr(&quot;ProcessDocument_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ProcessDocument&quot;) =ProcessDocument.BRIEF
               dr(&quot;ProcessDocument_ID&quot;) =ProcessDocument.ID
             end if 
             dr(&quot;SubProcDocument&quot;) =SubProcDocument
             if SubProcessType is nothing then
               dr(&quot;SubProcessType&quot;) =system.dbnull.value
               dr(&quot;SubProcessType_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;SubProcessType&quot;) =SubProcessType.BRIEF
               dr(&quot;SubProcessType_ID&quot;) =SubProcessType.ID
             end if 
             if ObjectType is nothing then
               dr(&quot;ObjectType&quot;) =system.dbnull.value
               dr(&quot;ObjectType_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ObjectType&quot;) =ObjectType.BRIEF
               dr(&quot;ObjectType_ID&quot;) =ObjectType.ID
             end if 
             dr(&quot;Value2&quot;) =Value2
             if DocumentPart is nothing then
               dr(&quot;DocumentPart&quot;) =system.dbnull.value
               dr(&quot;DocumentPart_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;DocumentPart&quot;) =DocumentPart.BRIEF
               dr(&quot;DocumentPart_ID&quot;) =DocumentPart.ID
             end if 
             if ProcessParameter4 is nothing then
               dr(&quot;ProcessParameter4&quot;) =system.dbnull.value
               dr(&quot;ProcessParameter4_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ProcessParameter4&quot;) =ProcessParameter4.BRIEF
               dr(&quot;ProcessParameter4_ID&quot;) =ProcessParameter4.ID
             end if 
             if ProcessParameter2 is nothing then
               dr(&quot;ProcessParameter2&quot;) =system.dbnull.value
               dr(&quot;ProcessParameter2_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ProcessParameter2&quot;) =ProcessParameter2.BRIEF
               dr(&quot;ProcessParameter2_ID&quot;) =ProcessParameter2.ID
             end if 
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          if m_DocState1.Equals(System.Guid.Empty) then
            nv.Add(&quot;DocState1&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;DocState1&quot;, m_DocState1, dbtype.guid)
          end if 
          if m_Folder.Equals(System.Guid.Empty) then
            nv.Add(&quot;Folder&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;Folder&quot;, m_Folder, dbtype.guid)
          end if 
          if m_ProcessParameter.Equals(System.Guid.Empty) then
            nv.Add(&quot;ProcessParameter&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ProcessParameter&quot;, m_ProcessParameter, dbtype.guid)
          end if 
          if m_DocState2.Equals(System.Guid.Empty) then
            nv.Add(&quot;DocState2&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;DocState2&quot;, m_DocState2, dbtype.guid)
          end if 
          if m_PartField.Equals(System.Guid.Empty) then
            nv.Add(&quot;PartField&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;PartField&quot;, m_PartField, dbtype.guid)
          end if 
          if m_ProcessParameter3.Equals(System.Guid.Empty) then
            nv.Add(&quot;ProcessParameter3&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ProcessParameter3&quot;, m_ProcessParameter3, dbtype.guid)
          end if 
          nv.Add(&quot;the_Value&quot;, the_Value, dbtype.string)
          nv.Add(&quot;Flag&quot;, Flag, dbtype.int16)
          nv.Add(&quot;Path2&quot;, Path2, dbtype.string)
          nv.Add(&quot;Path&quot;, Path, dbtype.string)
          nv.Add(&quot;Flag2&quot;, Flag2, dbtype.int16)
          if m_ProcessDocument.Equals(System.Guid.Empty) then
            nv.Add(&quot;ProcessDocument&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ProcessDocument&quot;, m_ProcessDocument, dbtype.guid)
          end if 
          nv.Add(&quot;SubProcDocument&quot;, SubProcDocument, dbtype.string)
          if m_SubProcessType.Equals(System.Guid.Empty) then
            nv.Add(&quot;SubProcessType&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;SubProcessType&quot;, m_SubProcessType, dbtype.guid)
          end if 
          if m_ObjectType.Equals(System.Guid.Empty) then
            nv.Add(&quot;ObjectType&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ObjectType&quot;, m_ObjectType, dbtype.guid)
          end if 
          nv.Add(&quot;Value2&quot;, Value2, dbtype.string)
          if m_DocumentPart.Equals(System.Guid.Empty) then
            nv.Add(&quot;DocumentPart&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;DocumentPart&quot;, m_DocumentPart, dbtype.guid)
          end if 
          if m_ProcessParameter4.Equals(System.Guid.Empty) then
            nv.Add(&quot;ProcessParameter4&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ProcessParameter4&quot;, m_ProcessParameter4, dbtype.guid)
          end if 
          if m_ProcessParameter2.Equals(System.Guid.Empty) then
            nv.Add(&quot;ProcessParameter2&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ProcessParameter2&quot;, m_ProcessParameter2, dbtype.guid)
          end if 
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          if isdbnull(reader.item(&quot;DocState1&quot;)) then
            m_DocState1 = System.GUID.Empty
          else
            m_DocState1=reader.item(&quot;DocState1&quot;)
          end if 
          if isdbnull(reader.item(&quot;Folder&quot;)) then
            m_Folder = System.GUID.Empty
          else
            m_Folder=reader.item(&quot;Folder&quot;)
          end if 
          if isdbnull(reader.item(&quot;ProcessParameter&quot;)) then
            m_ProcessParameter = System.GUID.Empty
          else
            m_ProcessParameter=reader.item(&quot;ProcessParameter&quot;)
          end if 
          if isdbnull(reader.item(&quot;DocState2&quot;)) then
            m_DocState2 = System.GUID.Empty
          else
            m_DocState2=reader.item(&quot;DocState2&quot;)
          end if 
          if isdbnull(reader.item(&quot;PartField&quot;)) then
            m_PartField = System.GUID.Empty
          else
            m_PartField=reader.item(&quot;PartField&quot;)
          end if 
          if isdbnull(reader.item(&quot;ProcessParameter3&quot;)) then
            m_ProcessParameter3 = System.GUID.Empty
          else
            m_ProcessParameter3=reader.item(&quot;ProcessParameter3&quot;)
          end if 
          m_the_Value=reader.item(&quot;the_Value&quot;)
          m_Flag=reader.item(&quot;Flag&quot;)
          m_Path2=reader.item(&quot;Path2&quot;)
          m_Path=reader.item(&quot;Path&quot;)
          m_Flag2=reader.item(&quot;Flag2&quot;)
          if isdbnull(reader.item(&quot;ProcessDocument&quot;)) then
            m_ProcessDocument = System.GUID.Empty
          else
            m_ProcessDocument=reader.item(&quot;ProcessDocument&quot;)
          end if 
          m_SubProcDocument=reader.item(&quot;SubProcDocument&quot;)
          if isdbnull(reader.item(&quot;SubProcessType&quot;)) then
            m_SubProcessType = System.GUID.Empty
          else
            m_SubProcessType=reader.item(&quot;SubProcessType&quot;)
          end if 
          if isdbnull(reader.item(&quot;ObjectType&quot;)) then
            m_ObjectType = System.GUID.Empty
          else
            m_ObjectType=reader.item(&quot;ObjectType&quot;)
          end if 
          m_Value2=reader.item(&quot;Value2&quot;)
          if isdbnull(reader.item(&quot;DocumentPart&quot;)) then
            m_DocumentPart = System.GUID.Empty
          else
            m_DocumentPart=reader.item(&quot;DocumentPart&quot;)
          end if 
          if isdbnull(reader.item(&quot;ProcessParameter4&quot;)) then
            m_ProcessParameter4 = System.GUID.Empty
          else
            m_ProcessParameter4=reader.item(&quot;ProcessParameter4&quot;)
          end if 
          if isdbnull(reader.item(&quot;ProcessParameter2&quot;)) then
            m_ProcessParameter2 = System.GUID.Empty
          else
            m_ProcessParameter2=reader.item(&quot;ProcessParameter2&quot;)
          end if 
        End Sub
        Public Property DocState1() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                DocState1 = me.application.Findrowobject(&quot;OBJSTATUS&quot;,m_DocState1)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_DocState1 = Value.id
                else
                   m_DocState1=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property Folder() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                Folder = me.application.Findrowobject(&quot;Folder&quot;,m_Folder)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_Folder = Value.id
                else
                   m_Folder=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property ProcessParameter() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ProcessParameter = me.application.Findrowobject(&quot;WFDef_param&quot;,m_ProcessParameter)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ProcessParameter = Value.id
                else
                   m_ProcessParameter=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property DocState2() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                DocState2 = me.application.Findrowobject(&quot;OBJSTATUS&quot;,m_DocState2)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_DocState2 = Value.id
                else
                   m_DocState2=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property PartField() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                PartField = me.application.Findrowobject(&quot;FIELD&quot;,m_PartField)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_PartField = Value.id
                else
                   m_PartField=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property ProcessParameter3() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ProcessParameter3 = me.application.Findrowobject(&quot;WFDef_param&quot;,m_ProcessParameter3)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ProcessParameter3 = Value.id
                else
                   m_ProcessParameter3=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property the_Value() As String
            Get
                LoadFromDatabase()
                the_Value = m_the_Value
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_the_Value = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Flag() As enumBoolean
            Get
                LoadFromDatabase()
                Flag = m_Flag
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_Flag = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Path2() As STRING
            Get
                LoadFromDatabase()
                Path2 = m_Path2
                AccessTime = Now
            End Get
            Set(ByVal Value As STRING )
                LoadFromDatabase()
                m_Path2 = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Path() As STRING
            Get
                LoadFromDatabase()
                Path = m_Path
                AccessTime = Now
            End Get
            Set(ByVal Value As STRING )
                LoadFromDatabase()
                m_Path = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property Flag2() As enumBoolean
            Get
                LoadFromDatabase()
                Flag2 = m_Flag2
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_Flag2 = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property ProcessDocument() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ProcessDocument = me.application.Findrowobject(&quot;WFDef_Doc&quot;,m_ProcessDocument)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ProcessDocument = Value.id
                else
                   m_ProcessDocument=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property SubProcDocument() As String
            Get
                LoadFromDatabase()
                SubProcDocument = m_SubProcDocument
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_SubProcDocument = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property SubProcessType() As MKSNManager.Document.doc_base
            Get
                LoadFromDatabase()
                SubProcessType = me.application.manager.GetInstanceObject(m_SubProcessType)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.doc_base )
                LoadFromDatabase()
                if not  Value is nothing then
                  m_SubProcessType = Value.id
                else
                  m_SubProcessType =System.Guid.Empty 
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property ObjectType() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ObjectType = me.application.Findrowobject(&quot;OBJECTTYPE&quot;,m_ObjectType)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ObjectType = Value.id
                else
                   m_ObjectType=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property Value2() As String
            Get
                LoadFromDatabase()
                Value2 = m_Value2
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_Value2 = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property DocumentPart() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                DocumentPart = me.application.Findrowobject(&quot;PART&quot;,m_DocumentPart)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_DocumentPart = Value.id
                else
                   m_DocumentPart=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property ProcessParameter4() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ProcessParameter4 = me.application.Findrowobject(&quot;WFDef_param&quot;,m_ProcessParameter4)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ProcessParameter4 = Value.id
                else
                   m_ProcessParameter4=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property ProcessParameter2() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ProcessParameter2 = me.application.Findrowobject(&quot;WFDef_param&quot;,m_ProcessParameter2)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ProcessParameter2 = Value.id
                else
                   m_ProcessParameter2=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            m_DocState1 = new system.guid(node.Attributes.GetNamedItem(&quot;DocState1&quot;).Value)
            m_Folder = new system.guid(node.Attributes.GetNamedItem(&quot;Folder&quot;).Value)
            m_ProcessParameter = new system.guid(node.Attributes.GetNamedItem(&quot;ProcessParameter&quot;).Value)
            m_DocState2 = new system.guid(node.Attributes.GetNamedItem(&quot;DocState2&quot;).Value)
            m_PartField = new system.guid(node.Attributes.GetNamedItem(&quot;PartField&quot;).Value)
            m_ProcessParameter3 = new system.guid(node.Attributes.GetNamedItem(&quot;ProcessParameter3&quot;).Value)
            the_Value = node.Attributes.GetNamedItem(&quot;the_Value&quot;).Value
            Flag = node.Attributes.GetNamedItem(&quot;Flag&quot;).Value
            Path2 = node.Attributes.GetNamedItem(&quot;Path2&quot;).Value
            Path = node.Attributes.GetNamedItem(&quot;Path&quot;).Value
            Flag2 = node.Attributes.GetNamedItem(&quot;Flag2&quot;).Value
            m_ProcessDocument = new system.guid(node.Attributes.GetNamedItem(&quot;ProcessDocument&quot;).Value)
            SubProcDocument = node.Attributes.GetNamedItem(&quot;SubProcDocument&quot;).Value
            m_SubProcessType = new system.guid(node.Attributes.GetNamedItem(&quot;SubProcessType&quot;).Value)
            m_ObjectType = new system.guid(node.Attributes.GetNamedItem(&quot;ObjectType&quot;).Value)
            Value2 = node.Attributes.GetNamedItem(&quot;Value2&quot;).Value
            m_DocumentPart = new system.guid(node.Attributes.GetNamedItem(&quot;DocumentPart&quot;).Value)
            m_ProcessParameter4 = new system.guid(node.Attributes.GetNamedItem(&quot;ProcessParameter4&quot;).Value)
            m_ProcessParameter2 = new system.guid(node.Attributes.GetNamedItem(&quot;ProcessParameter2&quot;).Value)
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;DocState1&quot;, m_DocState1.tostring)  
          node.SetAttribute(&quot;Folder&quot;, m_Folder.tostring)  
          node.SetAttribute(&quot;ProcessParameter&quot;, m_ProcessParameter.tostring)  
          node.SetAttribute(&quot;DocState2&quot;, m_DocState2.tostring)  
          node.SetAttribute(&quot;PartField&quot;, m_PartField.tostring)  
          node.SetAttribute(&quot;ProcessParameter3&quot;, m_ProcessParameter3.tostring)  
          node.SetAttribute(&quot;the_Value&quot;, the_Value)  
          node.SetAttribute(&quot;Flag&quot;, Flag)  
          node.SetAttribute(&quot;Path2&quot;, Path2)  
          node.SetAttribute(&quot;Path&quot;, Path)  
          node.SetAttribute(&quot;Flag2&quot;, Flag2)  
          node.SetAttribute(&quot;ProcessDocument&quot;, m_ProcessDocument.tostring)  
          node.SetAttribute(&quot;SubProcDocument&quot;, SubProcDocument)  
          node.SetAttribute(&quot;SubProcessType&quot;, m_SubProcessType.tostring)  
          node.SetAttribute(&quot;ObjectType&quot;, m_ObjectType.tostring)  
          node.SetAttribute(&quot;Value2&quot;, Value2)  
          node.SetAttribute(&quot;DocumentPart&quot;, m_DocumentPart.tostring)  
          node.SetAttribute(&quot;ProcessParameter4&quot;, m_ProcessParameter4.tostring)  
          node.SetAttribute(&quot;ProcessParameter2&quot;, m_ProcessParameter2.tostring)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_ATTR1_col" File="WFFD_ATTR1_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFFD
    Public Class WFFD_ATTR1_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFFD_ATTR1&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;DocState1_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;DocState1&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Folder_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;Folder&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ProcessParameter_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ProcessParameter&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;DocState2_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;DocState2&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;PartField_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;PartField&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ProcessParameter3_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ProcessParameter3&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;the_Value&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Flag_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;Flag&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Path2&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Path&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Flag2_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;Flag2&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ProcessDocument_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ProcessDocument&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;SubProcDocument&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;SubProcessType_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;SubProcessType&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ObjectType_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ObjectType&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;Value2&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;DocumentPart_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;DocumentPart&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ProcessParameter4_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ProcessParameter4&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ProcessParameter2_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ProcessParameter2&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFFD_ATTR1
        End Function
        Public Function GetItem( vIndex as object ) As WFFD.WFFD_ATTR1
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFFD.WFFD_ATTR1))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFFD.WFFD_ATTR1
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_DOCS" File="WFFD_DOCS.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports System
Imports System.IO
Imports MKSNManager
Imports System.xml
Imports System.Data
Imports System.Convert
Imports System.DateTime

Namespace WFFD
    Public Class WFFD_DOCS
        Inherits MKSNManager.Document.DocRow_Base

            private m_ProcessDocument  as System.Guid
            private m_DocMode  as String
            private m_AllowWrite  as enumBoolean
            private m_AllowCreate  as enumBoolean

        Public Overrides Sub CleanFields()
            ' m_ProcessDocument=   
            ' m_DocMode=   
            ' m_AllowWrite=   
            ' m_AllowCreate=   
        End Sub
        Public Overrides Sub FillDataTable(ByRef DestDataTable As System.Data.DataTable)
            Dim dr As  DataRow
            dr = destdatatable.NewRow
            on error resume next
            dr(&quot;ID&quot;) =ID
            dr(&quot;Brief&quot;) =Brief
             if ProcessDocument is nothing then
               dr(&quot;ProcessDocument&quot;) =system.dbnull.value
               dr(&quot;ProcessDocument_ID&quot;) =System.Guid.Empty
             else
               dr(&quot;ProcessDocument&quot;) =ProcessDocument.BRIEF
               dr(&quot;ProcessDocument_ID&quot;) =ProcessDocument.ID
             end if 
             dr(&quot;DocMode&quot;) =DocMode
             select case AllowWrite
            case enumBoolean.Boolean_Da
              dr (&quot;AllowWrite&quot;)  = &quot;Да&quot;
              dr (&quot;AllowWrite_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;AllowWrite&quot;)  = &quot;Нет&quot;
              dr (&quot;AllowWrite_VAL&quot;)  = 0
              end select 'AllowWrite
             select case AllowCreate
            case enumBoolean.Boolean_Da
              dr (&quot;AllowCreate&quot;)  = &quot;Да&quot;
              dr (&quot;AllowCreate_VAL&quot;)  = -1
            case enumBoolean.Boolean_Net
              dr (&quot;AllowCreate&quot;)  = &quot;Нет&quot;
              dr (&quot;AllowCreate_VAL&quot;)  = 0
              end select 'AllowCreate
            DestDataTable.Rows.Add (dr)
        End Sub

        Public Overrides Function FindInside(ByVal Table As String, ByVal RowID As String) As MKSNManager.Document.DocRow_Base
            dim mFindInside As MKSNManager.Document.DocRow_Base = Nothing
            Return Nothing
        End Function

        Public Overrides Sub Pack(ByVal nv As MKSNManager.MKSN.NamedValues)
          if m_ProcessDocument.Equals(System.Guid.Empty) then
            nv.Add(&quot;ProcessDocument&quot;, system.dbnull.value, dbtype.guid)
          else
            nv.Add(&quot;ProcessDocument&quot;, m_ProcessDocument, dbtype.guid)
          end if 
          nv.Add(&quot;DocMode&quot;, DocMode, dbtype.string)
          nv.Add(&quot;AllowWrite&quot;, AllowWrite, dbtype.int16)
          nv.Add(&quot;AllowCreate&quot;, AllowCreate, dbtype.int16)
            nv.Add(PartName() &amp; &quot;id&quot;, ID, DbType.Guid)
        End Sub


        Public Overrides Sub Unpack(ByVal reader As System.Data.DataRow)
            on error resume next  
            If IsDBNull(reader.item(&quot;SecurityStyleID&quot;)) Then
                SecureStyleID = System.guid.Empty
            Else
                SecureStyleID = reader.item(&quot;SecurityStyleID&quot;)
            End If

            RowRetrived = True
            RetriveTime = Now
          if isdbnull(reader.item(&quot;ProcessDocument&quot;)) then
            m_ProcessDocument = System.GUID.Empty
          else
            m_ProcessDocument=reader.item(&quot;ProcessDocument&quot;)
          end if 
          m_DocMode=reader.item(&quot;DocMode&quot;)
          m_AllowWrite=reader.item(&quot;AllowWrite&quot;)
          m_AllowCreate=reader.item(&quot;AllowCreate&quot;)
        End Sub
        Public Property ProcessDocument() As MKSNManager.Document.docrow_base
            Get
                LoadFromDatabase()
                ProcessDocument = me.application.Findrowobject(&quot;WFDef_Doc&quot;,m_ProcessDocument)
                AccessTime = Now
            End Get
            Set(ByVal Value As MKSNManager.Document.docrow_base )
                LoadFromDatabase()
                if not Value is nothing then
                    m_ProcessDocument = Value.id
                else
                   m_ProcessDocument=System.Guid.Empty
                end if
                ChangeTime = Now
            End Set
        End Property
        Public Property DocMode() As String
            Get
                LoadFromDatabase()
                DocMode = m_DocMode
                AccessTime = Now
            End Get
            Set(ByVal Value As String )
                LoadFromDatabase()
                m_DocMode = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property AllowWrite() As enumBoolean
            Get
                LoadFromDatabase()
                AllowWrite = m_AllowWrite
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_AllowWrite = Value
                ChangeTime = Now
            End Set
        End Property
        Public Property AllowCreate() As enumBoolean
            Get
                LoadFromDatabase()
                AllowCreate = m_AllowCreate
                AccessTime = Now
            End Get
            Set(ByVal Value As enumBoolean )
                LoadFromDatabase()
                m_AllowCreate = Value
                ChangeTime = Now
            End Set
        End Property
        Protected Overrides sub XMLUnpack(ByVal node As System.Xml.XmlNode, Optional ByVal LoadMode As Integer = 0)
          Dim e_list As XmlNodeList
          on error resume next  
            m_ProcessDocument = new system.guid(node.Attributes.GetNamedItem(&quot;ProcessDocument&quot;).Value)
            DocMode = node.Attributes.GetNamedItem(&quot;DocMode&quot;).Value
            AllowWrite = node.Attributes.GetNamedItem(&quot;AllowWrite&quot;).Value
            AllowCreate = node.Attributes.GetNamedItem(&quot;AllowCreate&quot;).Value
             Changed = true
        End sub
        Public Overrides Sub Dispose()
        End Sub
        Protected Overrides sub XLMPack(ByVal node As System.Xml.XmlElement, ByVal Xdom As System.Xml.XmlDocument)
           on error resume next  
          node.SetAttribute(&quot;ProcessDocument&quot;, m_ProcessDocument.tostring)  
          node.SetAttribute(&quot;DocMode&quot;, DocMode)  
          node.SetAttribute(&quot;AllowWrite&quot;, AllowWrite)  
          node.SetAttribute(&quot;AllowCreate&quot;, AllowCreate)  
        End sub
Public Overrides Sub BatchUpdate()
If Not Application.WorkOffline Then
  If Deleted Then
    Delete
    Exit Sub
  End If
  If Changed Then Save
End If
End Sub
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFFD_DOCS_col" File="WFFD_DOCS_col.vb"><BlockHolder BlockName="code" BlockCode="
Option Explicit On

Imports MKSNManager
Imports System
Imports System.xml
Imports System.Data

Namespace WFFD
    Public Class WFFD_DOCS_col
        Inherits MKSNManager.Document.DocCollection_Base

        Public Overrides Function ChildPartName() As String
            ChildPartName = &quot;WFFD_DOCS&quot;
        End Function

        Protected Overrides Function CreateDataTable() As System.Data.DataTable
            Dim dt As DataTable
            dt = New DataTable
            dt.Columns.Add(&quot;ID&quot;, GetType(System.guid))
            dt.Columns.Add(&quot;Brief&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;ProcessDocument_ID&quot; , GetType(System.guid))
            dt.Columns.Add(&quot;ProcessDocument&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;DocMode&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;AllowWrite_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;AllowWrite&quot;, Gettype(System.string))
            dt.Columns.Add(&quot;AllowCreate_VAL&quot; , Gettype(System.Int16))
            dt.Columns.Add(&quot;AllowCreate&quot;, Gettype(System.string))
            return dt
        End Function

        Protected Overrides Function NewItem() As MKSNManager.Document.DocRow_Base
            NewItem = New WFFD_DOCS
        End Function
        Public Function GetItem( vIndex as object ) As WFFD.WFFD_DOCS
            on error resume next
            GetItem = Convert.ChangeType(mybase.Item(vIndex), GetType(WFFD.WFFD_DOCS))
        End Function
        Public Shadows Function Item( vIndex as object ) As WFFD.WFFD_DOCS
            on error resume next
            return GetItem(vIndex)
        End Function
    End Class
End Namespace

"><FormData Name=""/></BlockHolder></ModuleHolder></root>
