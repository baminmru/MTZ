<?xml version="1.0"?>
<root><AttributeHolder Name="Type" Value="ocx"/><AttributeHolder Name="Toolbox" Value="{E684D8A3-716C-4E59-AA94-7144C04B0074};{86CF1D34-0C5F-11D2-A9FC-0000F8754DA1};{EAB22AC0-30C1-11CF-A7EB-0000C05BAE0B};{1801C003-859D-471D-BF31-D4428050324B};{F9043C88-F6F2-101A-A3C9-08002B2F49FB};{831FDD16-0C5C-11D2-A9FC-0000F8754DA1}"/><AttributeHolder Name="References" Value="{2A75196C-D9EB-4129-B803-931327F72D5C};{45D6DB85-69D5-45C6-AD58-BB2DA56CCC79};{27532C15-381F-49B2-83D7-087D2BB897B8};{58DF4A4A-346E-4A52-82D1-1DC4A6CB4A60};{F5078F18-C551-11D3-89B9-0000F81FE221};{B33EE44C-4362-4227-932E-7BAD125CC18D}"/><AttributeHolder Name="ProjectName" Value="Процесс"/><AttributeHolder Name="Name" Value="WFRtmGUI"/><ModuleHolder ModuleName="GUI" File=""><AttributeHolder Name="Instancing" Value="multiuse"/><AttributeHolder Name="Type" Value="class"/><BlockHolder BlockName="'description" BlockCode="
private mOpenModal as Boolean
Dim opf As OpenFormInfo
Dim openForms As Collection

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Private Sub Class_Initialize()
 Set openForms = New Collection
 App.Title = &quot;Процесс&quot;
End Sub

Private Sub Class_Terminate()
  on error resume next
CloseClass
End Sub
Public Sub CloseClass()
Dim f As OpenFormInfo
  on error resume next
For Each f In openForms
    Set f.Form.Host = Nothing
    Unload f.Form
    Set f.Form = Nothing
Next
Set openForms = Nothing
End Sub
Private Function FindForm(ByVal InstanceID As String, ByVal mode As String) as object
  Dim f As OpenFormInfo
  For Each f In openForms
    If f.InstanceID = InstanceID And f.mode = mode and f.modal = false Then
      Set FindForm = f
      Exit Function
    End If
  Next
End Function
Public function GUIPath() as string
    GUIPath=app.path &amp; &quot;\&quot; &amp; app.exename &amp; &quot;.ocx&quot; 
End function
Public function FormCount(ByVal InstanceID As String) as long
    Dim f As OpenFormInfo
    Dim  cnt As Long
    cnt = 0
    For Each f In openForms
      If f.InstanceID = InstanceID Then
        cnt=cnt+1
      End If
    Next
    FormCount = cnt
End function
Public Sub EraseForm(ByVal InstanceID As String, ByVal mode As String, byval ModalMode as boolean)
    on error resume next
    Dim f As OpenFormInfo
    Dim i As Long, cnt As Long
    i = 1
    cnt = FormCount(InstanceID)
    For Each f In openForms
      If f.InstanceID = InstanceID And f.mode = mode and f.modal=modalmode Then
        goto found
      End If
      i = i + 1
    Next
    exit sub
found:
    openForms.Remove i
    With f.Form
      If Not .item Is Nothing Then
         .item.Manager.FreeInstanceObject .item.ID
      End If
    end with
    Set f.Form.Host = Nothing
End Sub
public property get IsModal() as boolean
 IsModal = mOpenModal
end property
public sub Show(byval mode as string, ObjItem as object, optional OpenModal as boolean = false)
 dim f as form
 dim defaccess as boolean
 on error resume next
 mOpenModal = OpenModal
 App.Title = ObjItem.Brief &amp; &quot; (тип: Процесс)&quot; 
 defaccess = ObjItem.MTZSession.CheckRight(objItem.SecureStyleID,&quot;OPEN&quot;) 
if not OpenModal then
  if defaccess or ( (not defaccess) and ObjItem.MTZSession.CheckRight(objItem.SecureStyleID,&quot;WFRtm:&quot;)) then
   set opf = FindForm(objitem.id,mode)
   if opf is nothing then
     set f = new frm_main
     Set opf = New OpenFormInfo
     Set opf.Form = f
     opf.InstanceID = ObjItem.ID
     opf.mode = mode
     opf.modal = openmodal
     openForms.Add opf
   end if
   set f = opf.Form
   f.init objItem, me,openmodal
   f.show
   f.windowState=0
  else
   MsgBox &quot;Доступ к документу запрещен&quot;,vbokonly+vbCritical ,&quot;Процесс&quot; 
  end if
end if
if OpenModal then
  if defaccess or ( (not defaccess) and ObjItem.MTZSession.CheckRight(objItem.SecureStyleID,&quot;WFRtm:&quot;)) then
    set f = new frm_main
     Set opf = New OpenFormInfo
     Set opf.Form = f
     opf.InstanceID = ObjItem.ID
     opf.mode = mode
     opf.modal = openmodal
     openForms.Add opf
   f.init objItem, me,openmodal
     f.show vbmodal
     unload f
     set f  =nothing
  else
   MsgBox &quot;Доступ к документу запрещен&quot;,vbokonly+vbCritical ,&quot;Процесс&quot; 
  end if
end if
end sub
Public Function ShowAddForm(ByVal Mode As String, RowItem As Object) As Boolean
 Dim f As Form
 Dim OK As Boolean
 On Error Resume Next
 Set f = Nothing
 Dim PartName As String
 PartName = TypeName(RowItem)

 If Mode = &quot;&quot; Then
  If UCase(PartName) = &quot;WFRTM_PARAM&quot; Then
    Set f = New frmWFRtm_Param_
  End If

 If Mode = &quot;&quot; Then
 End If
  If UCase(PartName) = &quot;WFRTM_SUBPROCESS&quot; Then
    Set f = New frmWFRTM_SUBPROCESS_
  End If

 If Mode = &quot;&quot; Then
 End If
  If UCase(PartName) = &quot;WFRTM_MAIN&quot; Then
    Set f = New frmWFRtm_main_
  End If

 If Mode = &quot;&quot; Then
 End If
  If UCase(PartName) = &quot;WFRTM_DOC&quot; Then
    Set f = New frmWFRtm_Doc_
  End If

 If Mode = &quot;&quot; Then
 End If
  If UCase(PartName) = &quot;WFRTM_FUNC&quot; Then
    Set f = New frmWFRtm_func_
  End If

 If Mode = &quot;&quot; Then
 End If
  If UCase(PartName) = &quot;WFRTM_PCOMM&quot; Then
    Set f = New frmWFRtm_Pcomm_
  End If

 If Mode = &quot;&quot; Then
 End If
 End If
  If f Is Nothing Then
    OK = False
  Else

    Set f.Item = RowItem
    f.OnInit
    f.Show vbModal
    Set f.Item = Nothing
    OK = f.OK
    Unload f
    Set f = Nothing
  End If
  ShowAddForm = OK
End Function


"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFRtm_Param" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="Panel" ControlIndex="0" PROGID="MTZ_PANEL.Scrolledwindow"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="1000"/><Properties Name="Width" PropValue="1000"/><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblBasedOn"/><Properties Name="Caption" PropValue="Реализует:"/><Properties Name="Top" PropValue="75"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtBasedOn"/><Properties Name="Text" PropValue=""/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Top" PropValue="405"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="ToolTipText" PropValue="Реализует"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdBasedOn"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="refopen.ico"/><Properties Name="Top" PropValue="405"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Реализует"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblthe_Value"/><Properties Name="Caption" PropValue="Значение:"/><Properties Name="Top" PropValue="780"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtthe_Value"/><Properties Name="Text" PropValue=""/><Properties Name="Top" PropValue="1110"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="MaxLength" PropValue="255"/><Properties Name="ToolTipText" PropValue="Значение"/><Properties Name="Locked" PropValue="False"/><Properties Name="Enabled" PropValue="True"/></ControlData></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public Item as object
   private OnInit as boolean
   public event Changed()
   Private mIsChanged As Boolean

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Public Function IsChanged() As Boolean
  IsChanged = mIsChanged
End Function
private sub Usercontrol_resize()
  on error resume next
  panel.width = usercontrol.width
  panel.height = usercontrol.height
end sub

private sub txtBasedOn_Change()
  Changing

end sub
private sub cmdBasedOn_CLick()
  on error resume next
        Dim id As String, brief As String
        If item.Application.Manager.GetReferenceDialogEx2(&quot;WFDef_param&quot;, id, brief) Then
          txtBasedOn.Tag = Left(id, 38)
          txtBasedOn = brief
        End If
end sub
private sub cmdBasedOn_MenuClick(ByVal sCaption As String)
          txtBasedOn.Tag = &quot;&quot;
          txtBasedOn = &quot;&quot;
End sub
private sub txtthe_Value_Change()
  Changing

end sub
Private Sub UserControl_Terminate()
  Set item = Nothing
End Sub
public function IsOK() as boolean
  On error resume next
  dim mIsOK as boolean
  mIsOk = true

if mIsOK then mIsOK = txtBasedOn.Tag&lt;&gt;&quot;&quot;
if mIsOK then mIsOK =IsSet(txtthe_Value.text)
  IsOk = mIsOk
end function
public sub InitPanel()
OnInit = true
dim iii as long ' for combo only
if item.CanChange then
  panel.enabled = true
else
  panel.enabled = false
end if

If Not item.BasedOn Is Nothing Then
  txtBasedOn.Tag = item.BasedOn.id
  txtBasedOn = item.BasedOn.brief
else
  txtBasedOn.Tag = &quot;&quot; 
  txtBasedOn = &quot;&quot; 
End If
 LoadBtnPictures cmdBasedOn,cmdBasedOn.tag
  cmdBasedOn.RemoveAllMenu
txtthe_Value = item.the_Value
OnInit = false
end sub
private sub Changing
if OnInit then exit sub

 mIsChanged=true 
 raiseevent Changed()
end sub
Public sub Save
if OnInit then exit sub

If txtBasedOn.Tag &lt;&gt; &quot;&quot; Then
  Set item.BasedOn = Item.Application.FindRowObject(&quot;WFDef_param&quot;,txtBasedOn.Tag)
Else
  Set item.BasedOn = Nothing
End If
item.the_Value = txtthe_Value
 mIsChanged=false 
 raiseevent Changed()
end sub
 Public sub OptimalSize(x As Single, y as single)
   Panel.OptimalSize x, y
   x=x + panel.left
   y=y + panel.top
 End sub
 
 
 Public Function OptimalY() As Single
   Dim x As Single, y As Single
   Panel.OptimalSize x, y
   OptimalY = y
 End Function
 Public sub Customize()
   Panel.Customize
 End sub
 Public property get PanelCustomisationString() as string
   PanelCustomisationString =Panel.PanelCustomisationString
 End property
 Public property Let PanelCustomisationString(s as string)
   Panel.PanelCustomisationString = s
 End property
 Public property get Enabled() as boolean
   Enabled =Panel.Enabled
 End property
 Public property Let Enabled(byval v as boolean)
   Panel.Enabled = v
 End property

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFRTM_SUBPROCESS" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="Panel" ControlIndex="0" PROGID="MTZ_PANEL.Scrolledwindow"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="1000"/><Properties Name="Width" PropValue="1000"/><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblName"/><Properties Name="Caption" PropValue="Имя процесса:"/><Properties Name="Top" PropValue="75"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtName"/><Properties Name="Text" PropValue=""/><Properties Name="Top" PropValue="405"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="MaxLength" PropValue="255"/><Properties Name="ToolTipText" PropValue="Имя процесса"/><Properties Name="Locked" PropValue="False"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblProcess"/><Properties Name="Caption" PropValue="Процесс:"/><Properties Name="Top" PropValue="780"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtProcess"/><Properties Name="Text" PropValue=""/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Top" PropValue="1110"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="ToolTipText" PropValue="Процесс"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdProcess"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="refopen.ico"/><Properties Name="Top" PropValue="1110"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Процесс"/></ControlData></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public Item as object
   private OnInit as boolean
   public event Changed()
   Private mIsChanged As Boolean

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Public Function IsChanged() As Boolean
  IsChanged = mIsChanged
End Function
private sub Usercontrol_resize()
  on error resume next
  panel.width = usercontrol.width
  panel.height = usercontrol.height
end sub

private sub txtName_Change()
  Changing

end sub
private sub txtProcess_Change()
  Changing

end sub
private sub cmdProcess_CLick()
  on error resume next
     If txtProcess.Tag =&quot;&quot; then
       cmdProcess_MenuClick &quot;Выбрать&quot; 
     Else
       cmdProcess_MenuClick &quot;Открыть&quot; 
     End If
end sub
private sub cmdProcess_MenuClick(ByVal sCaption As String)
  on error resume next
    dim inst as object
    dim obj as object
    dim Gobj as object
    Dim OK As boolean
    Dim id As string
    Dim brief As string
  if sCaption =&quot;Очистить&quot; then
          txtProcess.Tag = &quot;&quot;
          txtProcess = &quot;&quot;
  end if
  if sCaption =&quot;Открыть&quot; then
    if txtProcess.tag =&quot;&quot; then exit sub
    set inst  = item.Application.Manager.GetInstanceObject(txtProcess.tag)
    if inst is nothing then exit sub
    set obj = item.Application.Manager.GetInstanceGUI(txtProcess.tag)
    obj.show &quot;&quot;, inst,true
    set obj =nothing
    set inst =nothing
  end if
  if sCaption =&quot;Выбрать&quot; then
        OK=Item.Application.Manager.GetObjectListDialogEx(id,brief,&quot;&quot;,&quot;WFRtm&quot;)
        If OK Then
          txtProcess.Tag = left(ID,38)
          txtProcess = brief
        End If
  end if
  if sCaption =&quot;Создать&quot; then
     on error resume next
        id =Createguid2
        Item.Application.Manager.NewInstance id,&quot;WFRtm&quot;,&quot;Процесс &quot; &amp; Now 
        Set obj = Item.Application.Manager.GetInstanceObject(id)
        If not obj is nothing Then
          SET GOBJ = Item.Application.Manager.GetInstanceGUI(obj.id)
          GOBJ.Show &quot;&quot;,obj,true
          Set obj = Item.Application.Manager.GetInstanceObject(obj.id)
          If (Not Obj Is Nothing) Then
              txtProcess.Tag = obj.ID
              txtProcess = obj.brief
          else
              txtProcess.Tag = &quot;&quot;
              txtProcess = &quot;&quot;
          end if
          set obj = nothing
          set Gobj = nothing
        End If
  end if
End sub
Private Sub UserControl_Terminate()
  Set item = Nothing
End Sub
public function IsOK() as boolean
  On error resume next
  dim mIsOK as boolean
  mIsOk = true

if mIsOK then mIsOK =IsSet(txtName.text)
if mIsOK then mIsOK = txtProcess.Tag&lt;&gt;&quot;&quot;
  IsOk = mIsOk
end function
public sub InitPanel()
OnInit = true
dim iii as long ' for combo only
if item.CanChange then
  panel.enabled = true
else
  panel.enabled = false
end if

txtName = item.Name
If Not item.Process Is Nothing Then
  txtProcess.Tag = item.Process.id
  txtProcess = item.Process.brief
else
  txtProcess.Tag = &quot;&quot; 
  txtProcess = &quot;&quot; 
End If
 LoadBtnPictures cmdProcess,cmdProcess.tag
  cmdProcess.RemoveAllMenu
  cmdProcess.AddMenu &quot;Открыть&quot; 
  cmdProcess.AddMenu &quot;Создать&quot; 
  cmdProcess.AddMenu &quot;Выбрать&quot; 
OnInit = false
end sub
private sub Changing
if OnInit then exit sub

 mIsChanged=true 
 raiseevent Changed()
end sub
Public sub Save
if OnInit then exit sub

item.Name = txtName
If txtProcess.Tag &lt;&gt; &quot;&quot; Then
  Set item.Process = Item.Application.Manager.GetInstanceObject(txtProcess.Tag)
Else
  Set item.Process = Nothing
End If
 mIsChanged=false 
 raiseevent Changed()
end sub
 Public sub OptimalSize(x As Single, y as single)
   Panel.OptimalSize x, y
   x=x + panel.left
   y=y + panel.top
 End sub
 
 
 Public Function OptimalY() As Single
   Dim x As Single, y As Single
   Panel.OptimalSize x, y
   OptimalY = y
 End Function
 Public sub Customize()
   Panel.Customize
 End sub
 Public property get PanelCustomisationString() as string
   PanelCustomisationString =Panel.PanelCustomisationString
 End property
 Public property Let PanelCustomisationString(s as string)
   Panel.PanelCustomisationString = s
 End property
 Public property get Enabled() as boolean
   Enabled =Panel.Enabled
 End property
 Public property Let Enabled(byval v as boolean)
   Panel.Enabled = v
 End property

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFRtm_main" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="Panel" ControlIndex="0" PROGID="MTZ_PANEL.Scrolledwindow"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="1000"/><Properties Name="Width" PropValue="1000"/><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblProcessState"/><Properties Name="Caption" PropValue="Состояние процесса:"/><Properties Name="Top" PropValue="75"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.ComboBox"><Properties Name="NAME" PropValue="cmbProcessState"/><Properties Name="Style" PropValue="2"/><Properties Name="Sorted" PropValue="True"/><Properties Name="Top" PropValue="405"/><Properties Name="Left" PropValue="300"/><Properties Name="ToolTipText" PropValue="Состояние процесса"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblBasedOn"/><Properties Name="Caption" PropValue="Реализует:"/><Properties Name="Top" PropValue="780"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtBasedOn"/><Properties Name="Text" PropValue=""/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Top" PropValue="1110"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="ToolTipText" PropValue="Реализует"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdBasedOn"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="refopen.ico"/><Properties Name="Top" PropValue="1110"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Реализует"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblthe_Description"/><Properties Name="Caption" PropValue="Сопровоительная информация:"/><Properties Name="Top" PropValue="1485"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="16711680"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtthe_Description"/><Properties Name="Text" PropValue=""/><Properties Name="Top" PropValue="1815"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="1200"/><Properties Name="Width" PropValue="3000"/><Properties Name="Multiline" PropValue="True"/><Properties Name="Scrollbars" PropValue="2"/><Properties Name="ToolTipText" PropValue="Сопровоительная информация"/><Properties Name="Locked" PropValue="False"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblAttachment"/><Properties Name="Caption" PropValue="Приложение:"/><Properties Name="Top" PropValue="3090"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="16711680"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtAttachment"/><Properties Name="Top" PropValue="3420"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="BorderStyle" PropValue="1"/><Properties Name="ToolTipText" PropValue="Приложение"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdAttachment"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="fileopen.ico"/><Properties Name="Top" PropValue="3420"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Приложение"/></ControlData><ControlData Name="Dialog" ControlIndex="0" PROGID="MSComDlg.CommonDialog"><Properties Name="Name" PropValue="Dialog"/><Properties Name="Top" PropValue="3645"/><Properties Name="Left" PropValue="300"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblModerator"/><Properties Name="Caption" PropValue="Отвественный:"/><Properties Name="Top" PropValue="3795"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="16711680"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtModerator"/><Properties Name="Text" PropValue=""/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Top" PropValue="4125"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="ToolTipText" PropValue="Отвественный"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdModerator"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="refopen.ico"/><Properties Name="Top" PropValue="4125"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Отвественный"/></ControlData></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public Item as object
   private OnInit as boolean
   public event Changed()
   Private mIsChanged As Boolean

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Public Function IsChanged() As Boolean
  IsChanged = mIsChanged
End Function
private sub Usercontrol_resize()
  on error resume next
  panel.width = usercontrol.width
  panel.height = usercontrol.height
end sub

private sub cmbProcessState_Click()
  on error resume next
  Changing

end sub
private sub txtBasedOn_Change()
  Changing

end sub
private sub cmdBasedOn_CLick()
  on error resume next
     If txtBasedOn.Tag =&quot;&quot; then
       cmdBasedOn_MenuClick &quot;Выбрать&quot; 
     Else
       cmdBasedOn_MenuClick &quot;Открыть&quot; 
     End If
end sub
private sub cmdBasedOn_MenuClick(ByVal sCaption As String)
  on error resume next
    dim inst as object
    dim obj as object
    dim Gobj as object
    Dim OK As boolean
    Dim id As string
    Dim brief As string
  if sCaption =&quot;Очистить&quot; then
          txtBasedOn.Tag = &quot;&quot;
          txtBasedOn = &quot;&quot;
  end if
  if sCaption =&quot;Открыть&quot; then
    if txtBasedOn.tag =&quot;&quot; then exit sub
    set inst  = item.Application.Manager.GetInstanceObject(txtBasedOn.tag)
    if inst is nothing then exit sub
    set obj = item.Application.Manager.GetInstanceGUI(txtBasedOn.tag)
    obj.show &quot;&quot;, inst,true
    set obj =nothing
    set inst =nothing
  end if
  if sCaption =&quot;Выбрать&quot; then
        OK=Item.Application.Manager.GetObjectListDialogEx(id,brief,&quot;&quot;,&quot;WFDef&quot;)
        If OK Then
          txtBasedOn.Tag = left(ID,38)
          txtBasedOn = brief
        End If
  end if
  if sCaption =&quot;Создать&quot; then
     on error resume next
        id =Createguid2
        Item.Application.Manager.NewInstance id,&quot;WFDef&quot;,&quot;Определение процесса &quot; &amp; Now 
        Set obj = Item.Application.Manager.GetInstanceObject(id)
        If not obj is nothing Then
          SET GOBJ = Item.Application.Manager.GetInstanceGUI(obj.id)
          GOBJ.Show &quot;&quot;,obj,true
          Set obj = Item.Application.Manager.GetInstanceObject(obj.id)
          If (Not Obj Is Nothing) Then
              txtBasedOn.Tag = obj.ID
              txtBasedOn = obj.brief
          else
              txtBasedOn.Tag = &quot;&quot;
              txtBasedOn = &quot;&quot;
          end if
          set obj = nothing
          set Gobj = nothing
        End If
  end if
End sub
private sub txtthe_Description_Change()
  Changing

end sub
Private Sub cmdAttachment_Click()
  on error resume next
  if item.Attachment_ext &lt;&gt;&quot;&quot; and not isnull(item.Attachment)  then
    cmdAttachment_MenuClick &quot;Открыть&quot;
  else
    cmdAttachment_MenuClick &quot;Выбрать&quot;
  End if
End Sub

Private Sub cmdAttachment_MenuClick(ByVal sCaption As String)
  If sCaption = &quot;Выбрать&quot; Then
   Dialog.Flags = cdlOFNFileMustExist + cdlOFNHideReadOnly + cdlOFNPathMustExist
   Dialog.Filter = &quot;(*.*)|*.*&quot;
   Dialog.DialogTitle = &quot;Файл&quot;
   Dialog.CancelError = True
   On Error Resume Next
   Dialog.ShowOpen
   If (Err.Number &gt; 0) Then
    Err.Clear
    Exit Sub
   End If
   txtAttachment = Dialog.FileName
   item.Attachment = FileToArray(Dialog.FileName)
   item.Attachment_ext = GetFileExtension2(Dialog.FileName)
   Changing

  End If
  If sCaption = &quot;Очистить&quot; Then
   txtAttachment = &quot;&quot; 
   item.Attachment = null
   item.Attachment_ext = &quot;&quot;
   Changing
  End If
  If sCaption = &quot;Открыть&quot; Then
    item.Application.manager.StoreTempFileData DoOpenFile( item.Attachment, item.Attachment_ext),item.partname,item.id
  End If
  If sCaption = &quot;Сохранить&quot; Then
   Dialog.Flags = cdlOFNHideReadOnly + cdlOFNPathMustExist
   Dialog.Filter = &quot;(*.*)|*.*&quot;
   Dialog.DialogTitle = &quot;Файл&quot;
   Dialog.CancelError = True
   On Error Resume Next
   Dialog.ShowSave
   If (Err.Number &gt; 0) Then
    Err.Clear
    Exit Sub
   End If
   ArrayToFile Dialog.FileName, item.Attachment
  End If
End Sub
private sub txtModerator_Change()
  Changing

end sub
private sub cmdModerator_CLick()
  on error resume next
        Dim id As String, brief As String
        If item.Application.Manager.GetReferenceDialogEx2(&quot;Users&quot;, id, brief) Then
          txtModerator.Tag = Left(id, 38)
          txtModerator = brief
        End If
end sub
private sub cmdModerator_MenuClick(ByVal sCaption As String)
          txtModerator.Tag = &quot;&quot;
          txtModerator = &quot;&quot;
End sub
Private Sub UserControl_Terminate()
  Set item = Nothing
End Sub
public function IsOK() as boolean
  On error resume next
  dim mIsOK as boolean
  mIsOk = true

if mIsOK then mIsOK =(cmbProcessState.ListIndex &gt;=0)
if mIsOK then mIsOK = txtBasedOn.Tag&lt;&gt;&quot;&quot;
  IsOk = mIsOk
end function
public sub InitPanel()
OnInit = true
dim iii as long ' for combo only
if item.CanChange then
  panel.enabled = true
else
  panel.enabled = false
end if

cmbProcessState.Clear
cmbProcessState.additem &quot;Active&quot;
cmbProcessState.itemdata(cmbProcessState.newindex)= 2
cmbProcessState.additem &quot;Pause&quot;
cmbProcessState.itemdata(cmbProcessState.newindex)= 3
cmbProcessState.additem &quot;Processed&quot;
cmbProcessState.itemdata(cmbProcessState.newindex)= 5
cmbProcessState.additem &quot;Done&quot;
cmbProcessState.itemdata(cmbProcessState.newindex)= 4
cmbProcessState.additem &quot;Prepare&quot;
cmbProcessState.itemdata(cmbProcessState.newindex)= 1
cmbProcessState.additem &quot;Initial&quot;
cmbProcessState.itemdata(cmbProcessState.newindex)= 0
 For iii = 0 To cmbProcessState.ListCount-1
  If Item.ProcessState = cmbProcessState.ItemData(iii) Then
   cmbProcessState.ListIndex = iii
   Exit For
  End If
 Next
If Not item.BasedOn Is Nothing Then
  txtBasedOn.Tag = item.BasedOn.id
  txtBasedOn = item.BasedOn.brief
else
  txtBasedOn.Tag = &quot;&quot; 
  txtBasedOn = &quot;&quot; 
End If
 LoadBtnPictures cmdBasedOn,cmdBasedOn.tag
  cmdBasedOn.RemoveAllMenu
  cmdBasedOn.AddMenu &quot;Открыть&quot; 
  cmdBasedOn.AddMenu &quot;Создать&quot; 
  cmdBasedOn.AddMenu &quot;Выбрать&quot; 
txtthe_Description = item.the_Description
 if  lenb(item.Attachment)&gt;0 then 
   txtAttachment=&quot;Данные (&quot; &amp; item.Attachment_ext &amp; &quot;)&quot;
 else 
   txtAttachment=&quot;&quot;
 end if 
 LoadBtnPictures cmdAttachment,cmdAttachment.tag
 cmdAttachment.RemoveAllMenu
 cmdAttachment.AddMenu &quot;Выбрать&quot;
 cmdAttachment.AddMenu &quot;Сохранить&quot;
 cmdAttachment.AddMenu &quot;Открыть&quot;
 cmdAttachment.AddMenu &quot;Очистить&quot;
If Not item.Moderator Is Nothing Then
  txtModerator.Tag = item.Moderator.id
  txtModerator = item.Moderator.brief
else
  txtModerator.Tag = &quot;&quot; 
  txtModerator = &quot;&quot; 
End If
 LoadBtnPictures cmdModerator,cmdModerator.tag
  cmdModerator.RemoveAllMenu
  cmdModerator.AddMenu &quot;Очистить&quot; 
OnInit = false
end sub
private sub Changing
if OnInit then exit sub

 mIsChanged=true 
 raiseevent Changed()
end sub
Public sub Save
if OnInit then exit sub

 if cmbProcessState.listindex&gt;=0 then
   item.ProcessState = cmbProcessState.itemdata(cmbProcessState.listindex)
 end if
If txtBasedOn.Tag &lt;&gt; &quot;&quot; Then
  Set item.BasedOn = Item.Application.Manager.GetInstanceObject(txtBasedOn.Tag)
Else
  Set item.BasedOn = Nothing
End If
item.the_Description = txtthe_Description
 ' SEE cmdAttachment_CLICK
If txtModerator.Tag &lt;&gt; &quot;&quot; Then
  Set item.Moderator = Item.Application.FindRowObject(&quot;Users&quot;,txtModerator.Tag)
Else
  Set item.Moderator = Nothing
End If
 mIsChanged=false 
 raiseevent Changed()
end sub
 Public sub OptimalSize(x As Single, y as single)
   Panel.OptimalSize x, y
   x=x + panel.left
   y=y + panel.top
 End sub
 
 
 Public Function OptimalY() As Single
   Dim x As Single, y As Single
   Panel.OptimalSize x, y
   OptimalY = y
 End Function
 Public sub Customize()
   Panel.Customize
 End sub
 Public property get PanelCustomisationString() as string
   PanelCustomisationString =Panel.PanelCustomisationString
 End property
 Public property Let PanelCustomisationString(s as string)
   Panel.PanelCustomisationString = s
 End property
 Public property get Enabled() as boolean
   Enabled =Panel.Enabled
 End property
 Public property Let Enabled(byval v as boolean)
   Panel.Enabled = v
 End property

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFRtm_Doc" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="Panel" ControlIndex="0" PROGID="MTZ_PANEL.Scrolledwindow"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="1000"/><Properties Name="Width" PropValue="1000"/><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblBasedOn"/><Properties Name="Caption" PropValue="Реализует:"/><Properties Name="Top" PropValue="75"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtBasedOn"/><Properties Name="Text" PropValue=""/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Top" PropValue="405"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="ToolTipText" PropValue="Реализует"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdBasedOn"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="refopen.ico"/><Properties Name="Top" PropValue="405"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Реализует"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblDocument"/><Properties Name="Caption" PropValue="Документ:"/><Properties Name="Top" PropValue="780"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtDocument"/><Properties Name="Text" PropValue=""/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Top" PropValue="1110"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="ToolTipText" PropValue="Документ"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdDocument"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="refopen.ico"/><Properties Name="Top" PropValue="1110"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Документ"/></ControlData></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public Item as object
   private OnInit as boolean
   public event Changed()
   Private mIsChanged As Boolean

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Public Function IsChanged() As Boolean
  IsChanged = mIsChanged
End Function
private sub Usercontrol_resize()
  on error resume next
  panel.width = usercontrol.width
  panel.height = usercontrol.height
end sub

private sub txtBasedOn_Change()
  Changing

end sub
private sub cmdBasedOn_CLick()
  on error resume next
        Dim id As String, brief As String
        If item.Application.Manager.GetReferenceDialogEx2(&quot;WFDef_Doc&quot;, id, brief) Then
          txtBasedOn.Tag = Left(id, 38)
          txtBasedOn = brief
        End If
end sub
private sub cmdBasedOn_MenuClick(ByVal sCaption As String)
          txtBasedOn.Tag = &quot;&quot;
          txtBasedOn = &quot;&quot;
End sub
private sub txtDocument_Change()
  Changing

end sub
private sub cmdDocument_CLick()
  on error resume next
     If txtDocument.Tag =&quot;&quot; then
       cmdDocument_MenuClick &quot;Выбрать&quot; 
     Else
       cmdDocument_MenuClick &quot;Открыть&quot; 
     End If
end sub
private sub cmdDocument_MenuClick(ByVal sCaption As String)
  on error resume next
    dim inst as object
    dim obj as object
    dim Gobj as object
    Dim OK As boolean
    Dim id As string
    Dim brief As string
  if sCaption =&quot;Очистить&quot; then
          txtDocument.Tag = &quot;&quot;
          txtDocument = &quot;&quot;
  end if
  if sCaption =&quot;Открыть&quot; then
    if txtDocument.tag =&quot;&quot; then exit sub
    set inst  = item.Application.Manager.GetInstanceObject(txtDocument.tag)
    if inst is nothing then exit sub
    set obj = item.Application.Manager.GetInstanceGUI(txtDocument.tag)
    obj.show &quot;&quot;, inst,true
    set obj =nothing
    set inst =nothing
  end if
  if sCaption =&quot;Выбрать&quot; then
        OK=Item.Application.Manager.GetObjectListDialogEx(id,brief,&quot;&quot;,&quot;&quot;)
        If OK Then
          txtDocument.Tag = left(ID,38)
          txtDocument = brief
        End If
  end if
  if sCaption =&quot;Создать&quot; then
     on error resume next
        Set obj = Item.Application.Manager.GetNewObject()
        If not obj is nothing Then
          SET GOBJ = Item.Application.Manager.GetInstanceGUI(obj.id)
          GOBJ.Show &quot;&quot;,obj,true
          Set obj = Item.Application.Manager.GetInstanceObject(obj.id)
          If (Not Obj Is Nothing) Then
              txtDocument.Tag = obj.ID
              txtDocument = obj.brief
          else
              txtDocument.Tag = &quot;&quot;
              txtDocument = &quot;&quot;
          end if
          set obj = nothing
          set Gobj = nothing
        End If
  end if
End sub
Private Sub UserControl_Terminate()
  Set item = Nothing
End Sub
public function IsOK() as boolean
  On error resume next
  dim mIsOK as boolean
  mIsOk = true

if mIsOK then mIsOK = txtBasedOn.Tag&lt;&gt;&quot;&quot;
if mIsOK then mIsOK = txtDocument.Tag&lt;&gt;&quot;&quot;
  IsOk = mIsOk
end function
public sub InitPanel()
OnInit = true
dim iii as long ' for combo only
if item.CanChange then
  panel.enabled = true
else
  panel.enabled = false
end if

If Not item.BasedOn Is Nothing Then
  txtBasedOn.Tag = item.BasedOn.id
  txtBasedOn = item.BasedOn.brief
else
  txtBasedOn.Tag = &quot;&quot; 
  txtBasedOn = &quot;&quot; 
End If
 LoadBtnPictures cmdBasedOn,cmdBasedOn.tag
  cmdBasedOn.RemoveAllMenu
If Not item.Document Is Nothing Then
  txtDocument.Tag = item.Document.id
  txtDocument = item.Document.brief
else
  txtDocument.Tag = &quot;&quot; 
  txtDocument = &quot;&quot; 
End If
 LoadBtnPictures cmdDocument,cmdDocument.tag
  cmdDocument.RemoveAllMenu
  cmdDocument.AddMenu &quot;Открыть&quot; 
  cmdDocument.AddMenu &quot;Создать&quot; 
  cmdDocument.AddMenu &quot;Выбрать&quot; 
OnInit = false
end sub
private sub Changing
if OnInit then exit sub

 mIsChanged=true 
 raiseevent Changed()
end sub
Public sub Save
if OnInit then exit sub

If txtBasedOn.Tag &lt;&gt; &quot;&quot; Then
  Set item.BasedOn = Item.Application.FindRowObject(&quot;WFDef_Doc&quot;,txtBasedOn.Tag)
Else
  Set item.BasedOn = Nothing
End If
If txtDocument.Tag &lt;&gt; &quot;&quot; Then
  Set item.Document = Item.Application.Manager.GetInstanceObject(txtDocument.Tag)
Else
  Set item.Document = Nothing
End If
 mIsChanged=false 
 raiseevent Changed()
end sub
 Public sub OptimalSize(x As Single, y as single)
   Panel.OptimalSize x, y
   x=x + panel.left
   y=y + panel.top
 End sub
 
 
 Public Function OptimalY() As Single
   Dim x As Single, y As Single
   Panel.OptimalSize x, y
   OptimalY = y
 End Function
 Public sub Customize()
   Panel.Customize
 End sub
 Public property get PanelCustomisationString() as string
   PanelCustomisationString =Panel.PanelCustomisationString
 End property
 Public property Let PanelCustomisationString(s as string)
   Panel.PanelCustomisationString = s
 End property
 Public property get Enabled() as boolean
   Enabled =Panel.Enabled
 End property
 Public property Let Enabled(byval v as boolean)
   Panel.Enabled = v
 End property

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFRtm_func" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="Panel" ControlIndex="0" PROGID="MTZ_PANEL.Scrolledwindow"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="1000"/><Properties Name="Width" PropValue="1000"/><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblFunc"/><Properties Name="Caption" PropValue="Функция:"/><Properties Name="Top" PropValue="75"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtFunc"/><Properties Name="Text" PropValue=""/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Top" PropValue="405"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="ToolTipText" PropValue="Функция"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdFunc"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="refopen.ico"/><Properties Name="Top" PropValue="405"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Функция"/></ControlData></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public Item as object
   private OnInit as boolean
   public event Changed()
   Private mIsChanged As Boolean

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Public Function IsChanged() As Boolean
  IsChanged = mIsChanged
End Function
private sub Usercontrol_resize()
  on error resume next
  panel.width = usercontrol.width
  panel.height = usercontrol.height
end sub

private sub txtFunc_Change()
  Changing

end sub
private sub cmdFunc_CLick()
  on error resume next
     If txtFunc.Tag =&quot;&quot; then
       cmdFunc_MenuClick &quot;Создать&quot; 
     Else
       cmdFunc_MenuClick &quot;Открыть&quot; 
     End If
end sub
private sub cmdFunc_MenuClick(ByVal sCaption As String)
  on error resume next
    dim inst as object
    dim obj as object
    dim Gobj as object
    Dim OK As boolean
    Dim id As string
    Dim brief As string
  if sCaption =&quot;Очистить&quot; then
       if txtFunc.Tag &lt;&gt; &quot;&quot; then
         item.Application.MTZSession.SetOwner txtFunc.Tag, &quot;&quot;, item.ID
         item.Application.Manager.DeleteInstance txtFunc.Tag
       end if
          txtFunc.Tag = &quot;&quot;
          txtFunc = &quot;&quot;
  end if
  if sCaption =&quot;Открыть&quot; then
    if txtFunc.tag =&quot;&quot; then exit sub
    set inst  = item.Application.Manager.GetInstanceObject(txtFunc.tag)
    if inst is nothing then exit sub
    set obj = item.Application.Manager.GetInstanceGUI(txtFunc.tag)
    obj.show &quot;&quot;, inst,true
    set obj =nothing
    set inst =nothing
  end if
  if sCaption =&quot;Выбрать&quot; then
        OK=Item.Application.Manager.GetObjectListDialogEx(id,brief,&quot;&quot;,&quot;WFFR&quot;)
        If OK Then
          txtFunc.Tag = left(ID,38)
          txtFunc = brief
        End If
  end if
  if sCaption =&quot;Создать&quot; then
     on error resume next
        id =Createguid2
        Item.Application.Manager.NewInstance id,&quot;WFFR&quot;,&quot;Активная функця &quot; &amp; Now 
        Set obj = Item.Application.Manager.GetInstanceObject(id)
        If not obj is nothing Then
          item.Application.MTZSession.SetOwner obj.ID, item.PartName, item.ID
          SET GOBJ = Item.Application.Manager.GetInstanceGUI(obj.id)
          GOBJ.Show &quot;&quot;,obj,true
          Set obj = Item.Application.Manager.GetInstanceObject(obj.id)
          If (Not Obj Is Nothing) Then
              txtFunc.Tag = obj.ID
              txtFunc = obj.brief
          else
              txtFunc.Tag = &quot;&quot;
              txtFunc = &quot;&quot;
          end if
          set obj = nothing
          set Gobj = nothing
        End If
  end if
End sub
Private Sub UserControl_Terminate()
  Set item = Nothing
End Sub
public function IsOK() as boolean
  On error resume next
  dim mIsOK as boolean
  mIsOk = true

if mIsOK then mIsOK = txtFunc.Tag&lt;&gt;&quot;&quot;
  IsOk = mIsOk
end function
public sub InitPanel()
OnInit = true
dim iii as long ' for combo only
if item.CanChange then
  panel.enabled = true
else
  panel.enabled = false
end if

If Not item.Func Is Nothing Then
  txtFunc.Tag = item.Func.id
  txtFunc = item.Func.brief
else
  txtFunc.Tag = &quot;&quot; 
  txtFunc = &quot;&quot; 
End If
 LoadBtnPictures cmdFunc,cmdFunc.tag
  cmdFunc.RemoveAllMenu
  cmdFunc.AddMenu &quot;Открыть&quot; 
OnInit = false
end sub
private sub Changing
if OnInit then exit sub

 mIsChanged=true 
 raiseevent Changed()
end sub
Public sub Save
if OnInit then exit sub

If txtFunc.Tag &lt;&gt; &quot;&quot; Then
  Set item.Func = Item.Application.Manager.GetInstanceObject(txtFunc.Tag)
Else
  Set item.Func = Nothing
End If
 mIsChanged=false 
 raiseevent Changed()
end sub
 Public sub OptimalSize(x As Single, y as single)
   Panel.OptimalSize x, y
   x=x + panel.left
   y=y + panel.top
 End sub
 
 
 Public Function OptimalY() As Single
   Dim x As Single, y As Single
   Panel.OptimalSize x, y
   OptimalY = y
 End Function
 Public sub Customize()
   Panel.Customize
 End sub
 Public property get PanelCustomisationString() as string
   PanelCustomisationString =Panel.PanelCustomisationString
 End property
 Public property Let PanelCustomisationString(s as string)
   Panel.PanelCustomisationString = s
 End property
 Public property get Enabled() as boolean
   Enabled =Panel.Enabled
 End property
 Public property Let Enabled(byval v as boolean)
   Panel.Enabled = v
 End property

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="WFRtm_Pcomm" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="Panel" ControlIndex="0" PROGID="MTZ_PANEL.Scrolledwindow"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="1000"/><Properties Name="Width" PropValue="1000"/><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblAuthor"/><Properties Name="Caption" PropValue="Автор:"/><Properties Name="Top" PropValue="75"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtAuthor"/><Properties Name="Text" PropValue=""/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Top" PropValue="405"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="ToolTipText" PropValue="Автор"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdAuthor"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="refopen.ico"/><Properties Name="Top" PropValue="405"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Автор"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblSubject"/><Properties Name="Caption" PropValue="Тема:"/><Properties Name="Top" PropValue="780"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="255"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtSubject"/><Properties Name="Text" PropValue=""/><Properties Name="Top" PropValue="1110"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="MaxLength" PropValue="255"/><Properties Name="ToolTipText" PropValue="Тема"/><Properties Name="Locked" PropValue="False"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblMessage"/><Properties Name="Caption" PropValue="Сообщение:"/><Properties Name="Top" PropValue="1485"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="16711680"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtMessage"/><Properties Name="Text" PropValue=""/><Properties Name="Top" PropValue="1815"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="1200"/><Properties Name="Width" PropValue="3000"/><Properties Name="Multiline" PropValue="True"/><Properties Name="Scrollbars" PropValue="2"/><Properties Name="ToolTipText" PropValue="Сообщение"/><Properties Name="Locked" PropValue="False"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.Label"><Properties Name="BackStyle" PropValue="0"/><Properties Name="NAME" PropValue="lblAttachment"/><Properties Name="Caption" PropValue="Вложение:"/><Properties Name="Top" PropValue="3090"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="3000"/><Properties Name="Enabled" PropValue="True"/><Properties Name="ForeColor" PropValue="16711680"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="VB.textbox"><Properties Name="NAME" PropValue="txtAttachment"/><Properties Name="Top" PropValue="3420"/><Properties Name="Left" PropValue="300"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="2550"/><Properties Name="Locked" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="BorderStyle" PropValue="1"/><Properties Name="ToolTipText" PropValue="Вложение"/></ControlData><ControlData Name="" ControlIndex="0" PROGID="MTZ_PANEL.DropButton"><Properties Name="NAME" PropValue="cmdAttachment"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="fileopen.ico"/><Properties Name="Top" PropValue="3420"/><Properties Name="Left" PropValue="2850"/><Properties Name="Height" PropValue="300"/><Properties Name="Width" PropValue="450"/><Properties Name="ToolTipText" PropValue="Вложение"/></ControlData><ControlData Name="Dialog" ControlIndex="0" PROGID="MSComDlg.CommonDialog"><Properties Name="Name" PropValue="Dialog"/><Properties Name="Top" PropValue="3645"/><Properties Name="Left" PropValue="300"/></ControlData></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public Item as object
   private OnInit as boolean
   public event Changed()
   Private mIsChanged As Boolean

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Public Function IsChanged() As Boolean
  IsChanged = mIsChanged
End Function
private sub Usercontrol_resize()
  on error resume next
  panel.width = usercontrol.width
  panel.height = usercontrol.height
end sub

private sub txtAuthor_Change()
  Changing

end sub
private sub cmdAuthor_CLick()
  on error resume next
        Dim id As String, brief As String
        If item.Application.Manager.GetReferenceDialogEx2(&quot;Users&quot;, id, brief) Then
          txtAuthor.Tag = Left(id, 38)
          txtAuthor = brief
        End If
end sub
private sub cmdAuthor_MenuClick(ByVal sCaption As String)
          txtAuthor.Tag = &quot;&quot;
          txtAuthor = &quot;&quot;
End sub
private sub txtSubject_Change()
  Changing

end sub
private sub txtMessage_Change()
  Changing

end sub
Private Sub cmdAttachment_Click()
  on error resume next
  if item.Attachment_ext &lt;&gt;&quot;&quot; and not isnull(item.Attachment)  then
    cmdAttachment_MenuClick &quot;Открыть&quot;
  else
    cmdAttachment_MenuClick &quot;Выбрать&quot;
  End if
End Sub

Private Sub cmdAttachment_MenuClick(ByVal sCaption As String)
  If sCaption = &quot;Выбрать&quot; Then
   Dialog.Flags = cdlOFNFileMustExist + cdlOFNHideReadOnly + cdlOFNPathMustExist
   Dialog.Filter = &quot;(*.*)|*.*&quot;
   Dialog.DialogTitle = &quot;Файл&quot;
   Dialog.CancelError = True
   On Error Resume Next
   Dialog.ShowOpen
   If (Err.Number &gt; 0) Then
    Err.Clear
    Exit Sub
   End If
   txtAttachment = Dialog.FileName
   item.Attachment = FileToArray(Dialog.FileName)
   item.Attachment_ext = GetFileExtension2(Dialog.FileName)
   Changing

  End If
  If sCaption = &quot;Очистить&quot; Then
   txtAttachment = &quot;&quot; 
   item.Attachment = null
   item.Attachment_ext = &quot;&quot;
   Changing
  End If
  If sCaption = &quot;Открыть&quot; Then
    item.Application.manager.StoreTempFileData DoOpenFile( item.Attachment, item.Attachment_ext),item.partname,item.id
  End If
  If sCaption = &quot;Сохранить&quot; Then
   Dialog.Flags = cdlOFNHideReadOnly + cdlOFNPathMustExist
   Dialog.Filter = &quot;(*.*)|*.*&quot;
   Dialog.DialogTitle = &quot;Файл&quot;
   Dialog.CancelError = True
   On Error Resume Next
   Dialog.ShowSave
   If (Err.Number &gt; 0) Then
    Err.Clear
    Exit Sub
   End If
   ArrayToFile Dialog.FileName, item.Attachment
  End If
End Sub
Private Sub UserControl_Terminate()
  Set item = Nothing
End Sub
public function IsOK() as boolean
  On error resume next
  dim mIsOK as boolean
  mIsOk = true

if mIsOK then mIsOK = txtAuthor.Tag&lt;&gt;&quot;&quot;
if mIsOK then mIsOK =IsSet(txtSubject.text)
  IsOk = mIsOk
end function
public sub InitPanel()
OnInit = true
dim iii as long ' for combo only
if item.CanChange then
  panel.enabled = true
else
  panel.enabled = false
end if

If Not item.Author Is Nothing Then
  txtAuthor.Tag = item.Author.id
  txtAuthor = item.Author.brief
else
  txtAuthor.Tag = &quot;&quot; 
  txtAuthor = &quot;&quot; 
End If
 LoadBtnPictures cmdAuthor,cmdAuthor.tag
  cmdAuthor.RemoveAllMenu
txtSubject = item.Subject
txtMessage = item.Message
 if  lenb(item.Attachment)&gt;0 then 
   txtAttachment=&quot;Данные (&quot; &amp; item.Attachment_ext &amp; &quot;)&quot;
 else 
   txtAttachment=&quot;&quot;
 end if 
 LoadBtnPictures cmdAttachment,cmdAttachment.tag
 cmdAttachment.RemoveAllMenu
 cmdAttachment.AddMenu &quot;Выбрать&quot;
 cmdAttachment.AddMenu &quot;Сохранить&quot;
 cmdAttachment.AddMenu &quot;Открыть&quot;
 cmdAttachment.AddMenu &quot;Очистить&quot;
OnInit = false
end sub
private sub Changing
if OnInit then exit sub

 mIsChanged=true 
 raiseevent Changed()
end sub
Public sub Save
if OnInit then exit sub

If txtAuthor.Tag &lt;&gt; &quot;&quot; Then
  Set item.Author = Item.Application.FindRowObject(&quot;Users&quot;,txtAuthor.Tag)
Else
  Set item.Author = Nothing
End If
item.Subject = txtSubject
item.Message = txtMessage
 ' SEE cmdAttachment_CLICK
 mIsChanged=false 
 raiseevent Changed()
end sub
 Public sub OptimalSize(x As Single, y as single)
   Panel.OptimalSize x, y
   x=x + panel.left
   y=y + panel.top
 End sub
 
 
 Public Function OptimalY() As Single
   Dim x As Single, y As Single
   Panel.OptimalSize x, y
   OptimalY = y
 End Function
 Public sub Customize()
   Panel.Customize
 End sub
 Public property get PanelCustomisationString() as string
   PanelCustomisationString =Panel.PanelCustomisationString
 End property
 Public property Let PanelCustomisationString(s as string)
   Panel.PanelCustomisationString = s
 End property
 Public property get Enabled() as boolean
   Enabled =Panel.Enabled
 End property
 Public property Let Enabled(byval v as boolean)
   Panel.Enabled = v
 End property

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="frmWFRtm_Param_" File=""><AttributeHolder Name="Type" Value="form"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="" ControlIndex="0" PROGID="WFRtmGUI.WFRtm_Param"><Properties Name="Name" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="6000"/><Properties Name="Width" PropValue="9000"/></ControlData><ControlData Name="cmdOK" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdOK"/><Properties Name="Caption" PropValue="&amp;OK"/><Properties Name="Default" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="1275"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="825"/><Properties Name="ToolTipText" PropValue="Назначенные значения параметров"/></ControlData><ControlData Name="cmdCancel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdCancel"/><Properties Name="Caption" PropValue="Отмена"/><Properties Name="Cancel" PropValue="True"/><Properties Name="CausesValidation" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="2250"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="975"/></ControlData><PropertyData Name="Caption" PropValue="Параметры"/><PropertyData Name="BorderStyle" PropValue="2"/><PropertyData Name="Left" PropValue="0"/><PropertyData Name="Top" PropValue="0"/><PropertyData Name="StartupPosition" PropValue="1"/><PropertyData Name="Minbutton" PropValue="False"/><PropertyData Name="Height" PropValue="7200"/><PropertyData Name="Width" PropValue="9600"/></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public OK as boolean
   public item as object
   Public NotFirstTime As Boolean


"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
sub cmdCancel_Click()
OK=false
me.hide
end sub

sub cmdOK_Click()
 on error goto bye
 if panel.isOK then
   panel.save
   OK=true
   me.hide
 else
   MsgBox &quot;Не все обязательные поля заполнены&quot;,vbOKOnly + VBExclamation
 end if
bye:
end sub

sub form_resize()
 if me.windowstate =1 then exit sub
 on error resume next
 panel.top=0
 Panel.left=0
 cmdOK.left=0
 cmdCancel.left=cmdok.width + 5*screen.TwipsPerPixelY
 cmdOK.Top = Me.ScaleHeight - cmdOK.Height 
 cmdCancel.Top = Me.ScaleHeight - cmdCancel.Height
 Panel.Width = Me.ScaleWidth
 Panel.Height = cmdOK.Top -3 * screen.TwipsPerPixelY
end sub
sub form_load()
 dim x as single, y as single
 LoadIcon
 LoadFormSkin me
 panel.optimalsize x,y
 Me.Move Me.Left, Me.Top, X + Me.panel.Left * 2 + 20 * Screen.TwipsPerPixelX, Me.panel.Top + Y + cmdOK.Height + 40 * Screen.TwipsPerPixelX
 
end sub
sub form_DblCLick()
 panel.customize
 SaveToSkin me
end sub
sub panel_Changed()
 cmdOK.Enabled = true
end sub
sub form_Activate()
 if NotFirstTime then exit sub
 OnInit
 notFirsttime = true
end sub
public sub OnInit()
 set Panel.item = item
 Panel.initPanel
 cmdOK.Enabled = false
end sub
private sub LoadFormSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long, buf As String
  ff = FreeFile
  Open s &amp; frm.name For Input As #ff
  buf = Input(LOF(ff), ff)
  Close #ff
  frm.panel.PanelCustomisationString = buf
end sub

private sub SaveToSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long
  ff = FreeFile
  kill s &amp; frm.name
  Open s &amp; frm.name For output As #ff
  print #ff, frm.panel.PanelCustomisationString
  Close #ff
end sub

Private Sub LoadIcon()
  On Error Resume Next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;IMAGEPATH&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Set Me.Icon = LoadPicture(s &amp; &quot;\card.ico&quot;)
End Sub

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="frmWFRTM_SUBPROCESS_" File=""><AttributeHolder Name="Type" Value="form"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="" ControlIndex="0" PROGID="WFRtmGUI.WFRTM_SUBPROCESS"><Properties Name="Name" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="6000"/><Properties Name="Width" PropValue="9000"/></ControlData><ControlData Name="cmdOK" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdOK"/><Properties Name="Caption" PropValue="&amp;OK"/><Properties Name="Default" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="1275"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="825"/><Properties Name="ToolTipText" PropValue="Дочерние процессы "/></ControlData><ControlData Name="cmdCancel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdCancel"/><Properties Name="Caption" PropValue="Отмена"/><Properties Name="Cancel" PropValue="True"/><Properties Name="CausesValidation" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="2250"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="975"/></ControlData><PropertyData Name="Caption" PropValue="Подпроцессы"/><PropertyData Name="BorderStyle" PropValue="2"/><PropertyData Name="Left" PropValue="0"/><PropertyData Name="Top" PropValue="0"/><PropertyData Name="StartupPosition" PropValue="1"/><PropertyData Name="Minbutton" PropValue="False"/><PropertyData Name="Height" PropValue="7200"/><PropertyData Name="Width" PropValue="9600"/></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public OK as boolean
   public item as object
   Public NotFirstTime As Boolean


"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
sub cmdCancel_Click()
OK=false
me.hide
end sub

sub cmdOK_Click()
 on error goto bye
 if panel.isOK then
   panel.save
   OK=true
   me.hide
 else
   MsgBox &quot;Не все обязательные поля заполнены&quot;,vbOKOnly + VBExclamation
 end if
bye:
end sub

sub form_resize()
 if me.windowstate =1 then exit sub
 on error resume next
 panel.top=0
 Panel.left=0
 cmdOK.left=0
 cmdCancel.left=cmdok.width + 5*screen.TwipsPerPixelY
 cmdOK.Top = Me.ScaleHeight - cmdOK.Height 
 cmdCancel.Top = Me.ScaleHeight - cmdCancel.Height
 Panel.Width = Me.ScaleWidth
 Panel.Height = cmdOK.Top -3 * screen.TwipsPerPixelY
end sub
sub form_load()
 dim x as single, y as single
 LoadIcon
 LoadFormSkin me
 panel.optimalsize x,y
 Me.Move Me.Left, Me.Top, X + Me.panel.Left * 2 + 20 * Screen.TwipsPerPixelX, Me.panel.Top + Y + cmdOK.Height + 40 * Screen.TwipsPerPixelX
 
end sub
sub form_DblCLick()
 panel.customize
 SaveToSkin me
end sub
sub panel_Changed()
 cmdOK.Enabled = true
end sub
sub form_Activate()
 if NotFirstTime then exit sub
 OnInit
 notFirsttime = true
end sub
public sub OnInit()
 set Panel.item = item
 Panel.initPanel
 cmdOK.Enabled = false
end sub
private sub LoadFormSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long, buf As String
  ff = FreeFile
  Open s &amp; frm.name For Input As #ff
  buf = Input(LOF(ff), ff)
  Close #ff
  frm.panel.PanelCustomisationString = buf
end sub

private sub SaveToSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long
  ff = FreeFile
  kill s &amp; frm.name
  Open s &amp; frm.name For output As #ff
  print #ff, frm.panel.PanelCustomisationString
  Close #ff
end sub

Private Sub LoadIcon()
  On Error Resume Next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;IMAGEPATH&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Set Me.Icon = LoadPicture(s &amp; &quot;\card.ico&quot;)
End Sub

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="frmWFRtm_main_" File=""><AttributeHolder Name="Type" Value="form"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="" ControlIndex="0" PROGID="WFRtmGUI.WFRtm_main"><Properties Name="Name" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="6000"/><Properties Name="Width" PropValue="9000"/></ControlData><ControlData Name="cmdOK" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdOK"/><Properties Name="Caption" PropValue="&amp;OK"/><Properties Name="Default" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="1275"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="825"/><Properties Name="ToolTipText" PropValue="Общие данные процесса"/></ControlData><ControlData Name="cmdCancel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdCancel"/><Properties Name="Caption" PropValue="Отмена"/><Properties Name="Cancel" PropValue="True"/><Properties Name="CausesValidation" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="2250"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="975"/></ControlData><PropertyData Name="Caption" PropValue="Общие данные"/><PropertyData Name="BorderStyle" PropValue="2"/><PropertyData Name="Left" PropValue="0"/><PropertyData Name="Top" PropValue="0"/><PropertyData Name="StartupPosition" PropValue="1"/><PropertyData Name="Minbutton" PropValue="False"/><PropertyData Name="Height" PropValue="7200"/><PropertyData Name="Width" PropValue="9600"/></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public OK as boolean
   public item as object
   Public NotFirstTime As Boolean


"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
sub cmdCancel_Click()
OK=false
me.hide
end sub

sub cmdOK_Click()
 on error goto bye
 if panel.isOK then
   panel.save
   OK=true
   me.hide
 else
   MsgBox &quot;Не все обязательные поля заполнены&quot;,vbOKOnly + VBExclamation
 end if
bye:
end sub

sub form_resize()
 if me.windowstate =1 then exit sub
 on error resume next
 panel.top=0
 Panel.left=0
 cmdOK.left=0
 cmdCancel.left=cmdok.width + 5*screen.TwipsPerPixelY
 cmdOK.Top = Me.ScaleHeight - cmdOK.Height 
 cmdCancel.Top = Me.ScaleHeight - cmdCancel.Height
 Panel.Width = Me.ScaleWidth
 Panel.Height = cmdOK.Top -3 * screen.TwipsPerPixelY
end sub
sub form_load()
 dim x as single, y as single
 LoadIcon
 LoadFormSkin me
 panel.optimalsize x,y
 Me.Move Me.Left, Me.Top, X + Me.panel.Left * 2 + 20 * Screen.TwipsPerPixelX, Me.panel.Top + Y + cmdOK.Height + 40 * Screen.TwipsPerPixelX
 
end sub
sub form_DblCLick()
 panel.customize
 SaveToSkin me
end sub
sub panel_Changed()
 cmdOK.Enabled = true
end sub
sub form_Activate()
 if NotFirstTime then exit sub
 OnInit
 notFirsttime = true
end sub
public sub OnInit()
 set Panel.item = item
 Panel.initPanel
 cmdOK.Enabled = false
end sub
private sub LoadFormSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long, buf As String
  ff = FreeFile
  Open s &amp; frm.name For Input As #ff
  buf = Input(LOF(ff), ff)
  Close #ff
  frm.panel.PanelCustomisationString = buf
end sub

private sub SaveToSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long
  ff = FreeFile
  kill s &amp; frm.name
  Open s &amp; frm.name For output As #ff
  print #ff, frm.panel.PanelCustomisationString
  Close #ff
end sub

Private Sub LoadIcon()
  On Error Resume Next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;IMAGEPATH&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Set Me.Icon = LoadPicture(s &amp; &quot;\card.ico&quot;)
End Sub

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="frmWFRtm_Doc_" File=""><AttributeHolder Name="Type" Value="form"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="" ControlIndex="0" PROGID="WFRtmGUI.WFRtm_Doc"><Properties Name="Name" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="6000"/><Properties Name="Width" PropValue="9000"/></ControlData><ControlData Name="cmdOK" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdOK"/><Properties Name="Caption" PropValue="&amp;OK"/><Properties Name="Default" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="1275"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="825"/><Properties Name="ToolTipText" PropValue="Экземпляры документов в данном процессе"/></ControlData><ControlData Name="cmdCancel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdCancel"/><Properties Name="Caption" PropValue="Отмена"/><Properties Name="Cancel" PropValue="True"/><Properties Name="CausesValidation" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="2250"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="975"/></ControlData><PropertyData Name="Caption" PropValue="Документы"/><PropertyData Name="BorderStyle" PropValue="2"/><PropertyData Name="Left" PropValue="0"/><PropertyData Name="Top" PropValue="0"/><PropertyData Name="StartupPosition" PropValue="1"/><PropertyData Name="Minbutton" PropValue="False"/><PropertyData Name="Height" PropValue="7200"/><PropertyData Name="Width" PropValue="9600"/></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public OK as boolean
   public item as object
   Public NotFirstTime As Boolean


"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
sub cmdCancel_Click()
OK=false
me.hide
end sub

sub cmdOK_Click()
 on error goto bye
 if panel.isOK then
   panel.save
   OK=true
   me.hide
 else
   MsgBox &quot;Не все обязательные поля заполнены&quot;,vbOKOnly + VBExclamation
 end if
bye:
end sub

sub form_resize()
 if me.windowstate =1 then exit sub
 on error resume next
 panel.top=0
 Panel.left=0
 cmdOK.left=0
 cmdCancel.left=cmdok.width + 5*screen.TwipsPerPixelY
 cmdOK.Top = Me.ScaleHeight - cmdOK.Height 
 cmdCancel.Top = Me.ScaleHeight - cmdCancel.Height
 Panel.Width = Me.ScaleWidth
 Panel.Height = cmdOK.Top -3 * screen.TwipsPerPixelY
end sub
sub form_load()
 dim x as single, y as single
 LoadIcon
 LoadFormSkin me
 panel.optimalsize x,y
 Me.Move Me.Left, Me.Top, X + Me.panel.Left * 2 + 20 * Screen.TwipsPerPixelX, Me.panel.Top + Y + cmdOK.Height + 40 * Screen.TwipsPerPixelX
 
end sub
sub form_DblCLick()
 panel.customize
 SaveToSkin me
end sub
sub panel_Changed()
 cmdOK.Enabled = true
end sub
sub form_Activate()
 if NotFirstTime then exit sub
 OnInit
 notFirsttime = true
end sub
public sub OnInit()
 set Panel.item = item
 Panel.initPanel
 cmdOK.Enabled = false
end sub
private sub LoadFormSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long, buf As String
  ff = FreeFile
  Open s &amp; frm.name For Input As #ff
  buf = Input(LOF(ff), ff)
  Close #ff
  frm.panel.PanelCustomisationString = buf
end sub

private sub SaveToSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long
  ff = FreeFile
  kill s &amp; frm.name
  Open s &amp; frm.name For output As #ff
  print #ff, frm.panel.PanelCustomisationString
  Close #ff
end sub

Private Sub LoadIcon()
  On Error Resume Next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;IMAGEPATH&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Set Me.Icon = LoadPicture(s &amp; &quot;\card.ico&quot;)
End Sub

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="frmWFRtm_func_" File=""><AttributeHolder Name="Type" Value="form"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="" ControlIndex="0" PROGID="WFRtmGUI.WFRtm_func"><Properties Name="Name" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="6000"/><Properties Name="Width" PropValue="9000"/></ControlData><ControlData Name="cmdOK" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdOK"/><Properties Name="Caption" PropValue="&amp;OK"/><Properties Name="Default" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="1275"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="825"/><Properties Name="ToolTipText" PropValue="функции процесса"/></ControlData><ControlData Name="cmdCancel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdCancel"/><Properties Name="Caption" PropValue="Отмена"/><Properties Name="Cancel" PropValue="True"/><Properties Name="CausesValidation" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="2250"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="975"/></ControlData><PropertyData Name="Caption" PropValue="Функции"/><PropertyData Name="BorderStyle" PropValue="2"/><PropertyData Name="Left" PropValue="0"/><PropertyData Name="Top" PropValue="0"/><PropertyData Name="StartupPosition" PropValue="1"/><PropertyData Name="Minbutton" PropValue="False"/><PropertyData Name="Height" PropValue="7200"/><PropertyData Name="Width" PropValue="9600"/></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public OK as boolean
   public item as object
   Public NotFirstTime As Boolean


"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
sub cmdCancel_Click()
OK=false
me.hide
end sub

sub cmdOK_Click()
 on error goto bye
 if panel.isOK then
   panel.save
   OK=true
   me.hide
 else
   MsgBox &quot;Не все обязательные поля заполнены&quot;,vbOKOnly + VBExclamation
 end if
bye:
end sub

sub form_resize()
 if me.windowstate =1 then exit sub
 on error resume next
 panel.top=0
 Panel.left=0
 cmdOK.left=0
 cmdCancel.left=cmdok.width + 5*screen.TwipsPerPixelY
 cmdOK.Top = Me.ScaleHeight - cmdOK.Height 
 cmdCancel.Top = Me.ScaleHeight - cmdCancel.Height
 Panel.Width = Me.ScaleWidth
 Panel.Height = cmdOK.Top -3 * screen.TwipsPerPixelY
end sub
sub form_load()
 dim x as single, y as single
 LoadIcon
 LoadFormSkin me
 panel.optimalsize x,y
 Me.Move Me.Left, Me.Top, X + Me.panel.Left * 2 + 20 * Screen.TwipsPerPixelX, Me.panel.Top + Y + cmdOK.Height + 40 * Screen.TwipsPerPixelX
 
end sub
sub form_DblCLick()
 panel.customize
 SaveToSkin me
end sub
sub panel_Changed()
 cmdOK.Enabled = true
end sub
sub form_Activate()
 if NotFirstTime then exit sub
 OnInit
 notFirsttime = true
end sub
public sub OnInit()
 set Panel.item = item
 Panel.initPanel
 cmdOK.Enabled = false
end sub
private sub LoadFormSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long, buf As String
  ff = FreeFile
  Open s &amp; frm.name For Input As #ff
  buf = Input(LOF(ff), ff)
  Close #ff
  frm.panel.PanelCustomisationString = buf
end sub

private sub SaveToSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long
  ff = FreeFile
  kill s &amp; frm.name
  Open s &amp; frm.name For output As #ff
  print #ff, frm.panel.PanelCustomisationString
  Close #ff
end sub

Private Sub LoadIcon()
  On Error Resume Next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;IMAGEPATH&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Set Me.Icon = LoadPicture(s &amp; &quot;\card.ico&quot;)
End Sub

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="frmWFRtm_Pcomm_" File=""><AttributeHolder Name="Type" Value="form"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="" ControlIndex="0" PROGID="WFRtmGUI.WFRtm_Pcomm"><Properties Name="Name" PropValue="Panel"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Height" PropValue="6000"/><Properties Name="Width" PropValue="9000"/></ControlData><ControlData Name="cmdOK" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdOK"/><Properties Name="Caption" PropValue="&amp;OK"/><Properties Name="Default" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="1275"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="825"/><Properties Name="ToolTipText" PropValue="Комментарии к процессу в целом"/></ControlData><ControlData Name="cmdCancel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="NAME" PropValue="cmdCancel"/><Properties Name="Caption" PropValue="Отмена"/><Properties Name="Cancel" PropValue="True"/><Properties Name="CausesValidation" PropValue="False"/><Properties Name="Top" PropValue="6225"/><Properties Name="Left" PropValue="2250"/><Properties Name="Height" PropValue="345"/><Properties Name="Width" PropValue="975"/></ControlData><PropertyData Name="Caption" PropValue="Комментарии"/><PropertyData Name="BorderStyle" PropValue="2"/><PropertyData Name="Left" PropValue="0"/><PropertyData Name="Top" PropValue="0"/><PropertyData Name="StartupPosition" PropValue="1"/><PropertyData Name="Minbutton" PropValue="False"/><PropertyData Name="Height" PropValue="7200"/><PropertyData Name="Width" PropValue="9600"/></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="
   public OK as boolean
   public item as object
   Public NotFirstTime As Boolean


"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
sub cmdCancel_Click()
OK=false
me.hide
end sub

sub cmdOK_Click()
 on error goto bye
 if panel.isOK then
   panel.save
   OK=true
   me.hide
 else
   MsgBox &quot;Не все обязательные поля заполнены&quot;,vbOKOnly + VBExclamation
 end if
bye:
end sub

sub form_resize()
 if me.windowstate =1 then exit sub
 on error resume next
 panel.top=0
 Panel.left=0
 cmdOK.left=0
 cmdCancel.left=cmdok.width + 5*screen.TwipsPerPixelY
 cmdOK.Top = Me.ScaleHeight - cmdOK.Height 
 cmdCancel.Top = Me.ScaleHeight - cmdCancel.Height
 Panel.Width = Me.ScaleWidth
 Panel.Height = cmdOK.Top -3 * screen.TwipsPerPixelY
end sub
sub form_load()
 dim x as single, y as single
 LoadIcon
 LoadFormSkin me
 panel.optimalsize x,y
 Me.Move Me.Left, Me.Top, X + Me.panel.Left * 2 + 20 * Screen.TwipsPerPixelX, Me.panel.Top + Y + cmdOK.Height + 40 * Screen.TwipsPerPixelX
 
end sub
sub form_DblCLick()
 panel.customize
 SaveToSkin me
end sub
sub panel_Changed()
 cmdOK.Enabled = true
end sub
sub form_Activate()
 if NotFirstTime then exit sub
 OnInit
 notFirsttime = true
end sub
public sub OnInit()
 set Panel.item = item
 Panel.initPanel
 cmdOK.Enabled = false
end sub
private sub LoadFormSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long, buf As String
  ff = FreeFile
  Open s &amp; frm.name For Input As #ff
  buf = Input(LOF(ff), ff)
  Close #ff
  frm.panel.PanelCustomisationString = buf
end sub

private sub SaveToSkin( frm as form )
  on error resume next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long
  ff = FreeFile
  kill s &amp; frm.name
  Open s &amp; frm.name For output As #ff
  print #ff, frm.panel.PanelCustomisationString
  Close #ff
end sub

Private Sub LoadIcon()
  On Error Resume Next
  Dim s As String
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;IMAGEPATH&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Set Me.Icon = LoadPicture(s &amp; &quot;\card.ico&quot;)
End Sub

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="vpnWFRtm_main_" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="controlset"/><FormData Name=""><ControlData Name="pnlWFRtm_main" ControlIndex="0" PROGID="VB.Frame"><Properties Name="Name" PropValue="pnlWFRtm_main"/><Properties Name="visible" PropValue="True"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Width" PropValue="9000"/><Properties Name="Height" PropValue="6000"/><Properties Name="BorderStyle" PropValue="0"/><ControlData Name="editWFRtm_main" ControlIndex="0" PROGID="WFRtmGUI.WFRtm_main"><Properties Name="Name" PropValue="editWFRtm_main"/></ControlData><ControlData Name="cmdWFRtm_mainSave" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_mainSave"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="SAVE.ico"/><Properties Name="ToolTipText" PropValue="Сохранить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="75"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="False"/></ControlData><ControlData Name="cmdWFRtm_mainRef" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_mainRef"/><Properties Name="Tag" PropValue="Refresh.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Обновить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="450"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_mainCfg" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_mainCfg"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="config.ico"/><Properties Name="ToolTipText" PropValue="Настройка внешнего вида"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="825"/></ControlData></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="public Item as object
public ParentForm as Object
public ModalMode as boolean

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Private Sub cmdWFRtm_mainRef_Click()
  on error resume next
  Item.WFRtm_main.Refresh
  cmdWFRtm_mainAdd_Click
End Sub
Private Sub cmdWFRtm_mainCfg_Click()
    on error resume next 
    editWFRtm_main.Customize
    dim ff as long 
    ff = FreeFile
    Open GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;c:\&quot;) &amp; &quot;WFRtm_editWFRtm_main_&quot; For Output As #ff
    print #ff, editWFRtm_main.PanelCustomisationString
    Close #ff
End Sub
Private Sub cmdWFRtm_mainAdd_Click()
  on error resume next
 dim u as object
 If Item.WFRtm_main.Count = 0 Then
   set u=Item.WFRtm_main.Add

 End If
 Set editWFRtm_main.Item = Item.WFRtm_main.Item(1)
 editWFRtm_main.InitPanel
 cmdWFRtm_mainSave.Enabled = True
End Sub
Private Sub cmdWFRtm_mainDel_Click()
  on error resume next
  if  editWFRtm_main.item is nothing then exit sub
  If MsgBox(&quot;Удалить элемент&quot; &amp; vbCrLf &amp; editWFRtm_main.item.Brief &amp; vbcrlf &amp; &quot;?&quot;, vbYesNo + vbQuestion, &quot;Внимание&quot;) = vbYes Then
    on error goto bye
    editWFRtm_main.item.parent.Delete editWFRtm_main.item.id
    cmdWFRtm_mainSave.Enabled = false
    editWFRtm_main.Enabled = false
    set editWFRtm_main.item = nothing
  End If
Exit Sub
bye:
msgbox err.description,vbokonly+vbExclamation,&quot;Удаление&quot;
End Sub
Private Sub editWFRtm_main_Changed()
 cmdWFRtm_mainSave.Enabled = true
End Sub
Private Sub cmdWFRtm_mainSave_Click()
  on error resume next
    if editWFRtm_main.IsOK then
    editWFRtm_main.Save
  on error goto bye
    editWFRtm_main.item.Save
    cmdWFRtm_mainSave.Enabled = false
    else
      MsgBox &quot;Не все обязательные поля заполнены&quot;,vbOKOnly+VBExclamation
    end if
Exit Sub
bye:
   MsgBox Err.Description, vbOKOnly + vbExclamation, &quot;Изменение&quot;
  editWFRtm_main.item.REFRESH
  editWFRtm_main.InitPanel
End Sub
public sub OnInit(aItem as object, optional pForm as object = nothing)
 on error resume next
 set Item =aItem
 set ParentForm = pForm

  LoadBtnPictures cmdWFRtm_mainSave,cmdWFRtm_mainSave.tag
  LoadBtnPictures cmdWFRtm_mainRef,cmdWFRtm_mainRef.tag
  LoadBtnPictures cmdWFRtm_mainCfg,cmdWFRtm_mainCfg.tag
  dim ff as long, buf as string
  ff = FreeFile
  On Error Resume Next
  Open GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;c:\&quot;) &amp; &quot;WFRtm_editWFRtm_main_&quot; For Input As #ff
  buf = &quot;&quot;
  buf = Input(LOF(ff), ff)
  Close #ff
  if buf &lt;&gt;&quot;&quot; then editWFRtm_main.PanelCustomisationString = buf
  cmdWFRtm_mainAdd_click
end sub
private sub OnTabClick()

      editWFRtm_main.Top = 40 * Screen.TwipsPerPixelX
      editWFRtm_main.Left = 5 * Screen.TwipsPerPixelX
      editWFRtm_main.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      editWFRtm_main.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
end sub
public sub OnClick(aItem as object, optional pForm as object = nothing)
  on error resume next
  set Item =aItem
  set ParentForm = pForm
  OnTabClick
end sub
public sub OnSave()
  
  editWFRtm_main.Save
if editWFRtm_main.item.Changed then
  editWFRtm_main.item.Save
end if
end sub
public function IsChanged() as boolean
  dim m_IsChanged as boolean
  on error resume next
  
 m_isChanged = m_isChanged or editWFRtm_main.IsChanged
  IsChanged = m_IsChanged
end function
private sub UserControl_Resize()
  On Error Resume Next
  pnlWFRtm_main.Move 0, 0, UserControl.Width, UserControl.Height
  OnTabClick
end sub
public sub CloseClass()
  On Error Resume Next
  set parentForm = nothing
  set item = nothing
end sub
private sub UserControl_Terminate()
  On Error Resume Next
  CloseClass
end sub

'переместить клиента в каталоге
'{5CB1388C-1623-4B36-A775-00B70BEE27AF}
private sub Run_VBMoveVRC ( VRCATFolder as variant , optional RowItem as object )
'do nothing
end sub



'Передать права объекту контактное лицо от объекта клиент
'{79DED4FD-045C-45F8-AC79-2E5A3D956D97}
private sub Run_VBMigrateRight ( optional RowItem as object )
'Migrate security
On Error GoTo bye
  If RowItem.Person Is Nothing Then Exit Sub

  RowItem.Person.Secure Item.SecureStyleID
  RowItem.Person.propagate
bye:
  Exit Sub
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Применить стиль защиты для объекта Предназначен для каталога клиентов
'{31EC6CF7-8DBD-4EFE-BF12-4D168F653D34}
private sub Run_VBApplySecurity ( optional RowItem as object )
'Apply security
On Error GoTo bye
  If RowItem.Client Is Nothing Then Exit Sub
  If RowItem.Parent.Parent.AccessLevel Is Nothing Then Exit Sub
  RowItem.Client.Secure RowItem.Parent.Parent.AccessLevel.id
  RowItem.Client.propagate
  Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Создание отчета из разных карточек
'{5B8FB7B9-D8B1-4CA0-90AF-55F83D1A6E5D}
private sub Run_VBMakeReport ( ReportType as variant , optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 'ID = CreateGUID2
 'Call RowItem.Application.Manager.NewInstance(ID, &quot;VRRPT&quot;, &quot;Отчет &quot; &amp; Date)
 'Set RowItem.Report = RowItem.Application.Manager.GetInstanceObject(ID)
 If RowItem.Report.VRRPT_MAIN.Count = 0 Then
  Set Obj = RowItem.Report.VRRPT_MAIN.Add
 Else
  Set Obj = RowItem.Report.VRRPT_MAIN.Item(1)
 End If
 
 Set Obj.Author = RowItem.Application.FindRowObject(&quot;Users&quot;, Item.Application.MTZSession.GetSessionUserID())
 Obj.TheDate = Date
 
 If ReportType = &quot;CLNT&quot; Then
   Set Obj.Client = RowItem.Application
 End If
 If ReportType = &quot;PRJ&quot; Then
   Set Obj.Project = RowItem.Application
 End If
 If ReportType = &quot;CONT&quot; Then
   Set Obj.Contract = RowItem.Application
 End If
 If ReportType = &quot;PERS&quot; Then
   Set Obj.Person = RowItem.Application
 End If
 
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание отчета&quot;
end sub



'Создать новую оплату из клиента
'{42A1A436-8AA2-4F1F-999B-6680DFF514DE}
private sub Run_VBNewPayIn ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKP&quot;, &quot;Платеж &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKP_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKP_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKP_DEF.Item(1)
 End If
 
 Set Obj.FromClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'Создать новый платеж из клиента
'{2BB30818-90ED-4627-8ABB-85B3FBA46750}
private sub Run_VBNewPayOut ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKO&quot;, &quot;Оплата &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKO_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKO_DEF.Item(1)
 End If
 
 Set Obj.ToClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'открытие карточки по идентификатору
'{94E8F6DB-106A-44DC-9483-86C801798FF0}
private sub Run_VBOpenRef ( StartMode as variant ,ID as variant , optional RowItem as object )
on error resume next
If ID &lt;&gt; &quot;&quot; Then
    Dim Obj As Object
    Set Obj = item.Manager.GetInstanceObject(ID)
    If Not Obj Is Nothing Then
      Dim objGui As Object
      Set objGui =  item.Manager.GetInstanceGUI(Obj.ID)
      If objGui Is Nothing Then Exit Sub

       If StartMode = &quot;AUTO&quot; Then
        StartMode = &quot;&quot;
        dim i as long
        For i = 100 To 0 Step -10
          If Obj.MTZSession.CheckRight(Obj.SecureStyleid, Obj.TypeName &amp; &quot;:&quot; &amp; &quot;M&quot; &amp; i) Then
            StartMode = &quot;M&quot; &amp; i
            Exit For
          End If
        Next
       End If
      
      objGui.Show StartMode &amp; &quot;&quot;, Obj
      Set objGui = Nothing
    End If
  End If
  
end sub



'
'{069956DC-3305-45EF-9331-91CE323B5942}
private sub Run_WFDefName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Description
parentform.caption = item.name
Item.Save
end sub



'
'{D8914FB4-6B5D-491A-A72F-985617727583}
private sub Run_WFFuncName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Name
ParentForm.Caption = item.Name
Item.Save
end sub



'Изменить название объекта
'{4FB59D1A-0123-47D3-9F4F-E12085C5D074}
private sub Run_VBUpdateItemName ( Name as variant , optional RowItem as object )
on error resume next
item.name = Name
' может не быть формы, если используем просто ActiveX
ParentForm.Caption = item.Name
item.Save
end sub



'Создать заявку из клиента
'{49EA5CBF-93CF-41A8-B1F1-E37FE4D59EA5}
private sub Run_VBNewZayavka ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKZ&quot;, &quot;Заявка &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKz_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKZ_DEF.Item(1)
 End If
 
 Set Obj.ClientFrom = RowItem.Application
 Obj.QueryDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Заявки&quot;
end sub



"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="vpnWFRtm_func_" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="controlset"/><FormData Name=""><ControlData Name="pnlWFRtm_func" ControlIndex="0" PROGID="VB.Frame"><Properties Name="Name" PropValue="pnlWFRtm_func"/><Properties Name="visible" PropValue="True"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Width" PropValue="9000"/><Properties Name="Height" PropValue="6000"/><Properties Name="BorderStyle" PropValue="0"/><ControlData Name="gridWFRtm_func" ControlIndex="0" PROGID="GridEx20.GridEX"><Properties Name="Name" PropValue="gridWFRtm_func"/><Properties Name="DataMode" PropValue="99"/><Properties Name="AllowEdit" PropValue="False"/><Properties Name="AllowAddNew" PropValue="False"/><Properties Name="AllowDelete" PropValue="True"/><Properties Name="ColumnAutoResize" PropValue="False"/><Properties Name="AutomaticSort" PropValue="True"/><Properties Name="RecordNavigator" PropValue="False"/><Properties Name="SelectionStyle" PropValue="1"/><Properties Name="HideSelection" PropValue="2"/><Properties Name="TabKeyBehavior" PropValue="1"/><Properties Name="RecordNavigatorString" PropValue="Запись:|из"/><Properties Name="GroupByBoxInfoText" PropValue="Группировка"/><Properties Name="ItemCount" PropValue="0"/></ControlData><ControlData Name="cmdWFRtm_funcAdd" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_funcAdd"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="NEW.ico"/><Properties Name="ToolTipText" PropValue="Добавить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="75"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_funcEdit" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_funcEdit"/><Properties Name="Tag" PropValue="PROP.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Свойства"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="450"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_funcDel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_funcDel"/><Properties Name="Tag" PropValue="DELETE.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Удалить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="825"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_funcRef" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_funcRef"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="Refresh.ico"/><Properties Name="ToolTipText" PropValue="Обновить"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1200"/></ControlData><ControlData Name="cmdWFRtm_funcPrn" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_funcPrn"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="PrintPreview.ico"/><Properties Name="ToolTipText" PropValue="Печать"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1575"/></ControlData><ControlData Name="cmdWFRtm_funcFnd" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_funcFnd"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="find.ico"/><Properties Name="ToolTipText" PropValue="Поиск"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1950"/></ControlData></ControlData><ControlData Name="mnuPopupWFRtm_func" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Меню для Функции"/><Properties Name="Name" PropValue="mnuPopupWFRtm_func"/><Properties Name="Visible" PropValue="False"/><ControlData Name="mnuWFRtm_funcAdd" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Создать"/><Properties Name="Name" PropValue="mnuWFRtm_funcAdd"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_funcEdit" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Свойства"/><Properties Name="Name" PropValue="mnuWFRtm_funcEdit"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_funcDelete" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Удалить"/><Properties Name="Name" PropValue="mnuWFRtm_funcDelete"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_funcOpen" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Открыть"/><Properties Name="Name" PropValue="mnuWFRtm_funcOpen"/></ControlData><ControlData Name="mnuWFRtm_funcRef" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Обновить"/><Properties Name="Name" PropValue="mnuWFRtm_funcRef"/></ControlData><ControlData Name="mnuWFRtm_funcS1" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="-"/><Properties Name="Name" PropValue="mnuWFRtm_funcS1"/></ControlData><ControlData Name="mnuWFRtm_funcBuffer" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Буфер"/><Properties Name="Name" PropValue="mnuWFRtm_funcBuffer"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><ControlData Name="mnuWFRtm_funcCOPY" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Копировать"/><Properties Name="Name" PropValue="mnuWFRtm_funcCOPY"/></ControlData><ControlData Name="mnuWFRtm_funcCUT" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вырезать"/><Properties Name="Name" PropValue="mnuWFRtm_funcCUT"/></ControlData><ControlData Name="mnuWFRtm_funcPASTE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вставить"/><Properties Name="Name" PropValue="mnuWFRtm_funcPASTE"/></ControlData><ControlData Name="mnuWFRtm_funcCHANGE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Заменить"/><Properties Name="Name" PropValue="mnuWFRtm_funcCHANGE"/></ControlData><ControlData Name="mnuWFRtm_funcCLEAN" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Очистить"/><Properties Name="Name" PropValue="mnuWFRtm_funcCLEAN"/></ControlData></ControlData><ControlData Name="mnuWFRtm_funcPrn" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Печать"/><Properties Name="Name" PropValue="mnuWFRtm_funcPrn"/></ControlData><ControlData Name="mnuWFRtm_funcCfg" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Настроить"/><Properties Name="Name" PropValue="mnuWFRtm_funcCfg"/></ControlData><ControlData Name="mnuWFRtm_funcFind" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Поиск"/><Properties Name="Name" PropValue="mnuWFRtm_funcFind"/></ControlData></ControlData><ControlData Name="menuTimerWFRtm_func" ControlIndex="0" PROGID="VB.Timer"><Properties Name="Name" PropValue="menuTimerWFRtm_func"/><Properties Name="Enabled" PropValue="False"/><Properties Name="Interval" PropValue="1"/></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="public Item as object
public ParentForm as Object
public ModalMode as boolean
private fndWFRtm_func as object
private menuActionWFRtm_func as string

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
private sub opWFRtm_func_OpenRef_(RowItem as object)
with RowItem
Run_VBOpenRef  ID:=.Func.ID, StartMode:=&quot;&quot;,  RowItem:=RowItem
end with
end sub
Private Sub cmdWFRtm_funcCfg_Click()
  on error resume next
Dim jset As object 'MTZ_JSetup.Customizer
Set jset = CreateObject(&quot;MTZ_JSetup.Customizer&quot;)
jset.ShowSumary gridWFRtm_func,&quot;gridWFRtm_func&quot;
Set jset = Nothing
End Sub

Private Sub cmdWFRtm_funcPrn_Click()
  on error resume next
Dim jset As object 'MTZ_JSetup.Customizer
Set jset = CreateObject(&quot;MTZ_JSetup.Customizer&quot;)
jset.Preview gridWFRtm_func,&quot;Функции&quot;
Set jset = Nothing
End Sub

Private Sub cmdWFRtm_funcRef_Click()
  on error resume next
  item.WFRtm_func.Refresh
  gridWFRtm_func.itemCount = item.WFRtm_func.count
  gridWFRtm_func.Refetch
  gridWFRtm_func.Refresh
End Sub
Private Sub cmdWFRtm_funcAcc_Click()
On Error Resume Next
If gridWFRtm_func.ItemCount = 0 Then Exit Sub
If gridWFRtm_func.Row &gt; 0 Then
 If gridWFRtm_func.RowIndex(gridWFRtm_func.Row) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_func.RowBookmark(gridWFRtm_func.RowIndex(gridWFRtm_func.Row))
    Set u = Item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
    Item.Application.Manager.ShowSecurityDialog u
 End If
End If
End Sub
Private Sub cmdWFRtm_funcEdit_Click()
  on error resume next
If gridWFRtm_func.ItemCount = 0 Then Exit Sub
If gridWFRtm_func.Row &gt; 0 then
 If gridWFRtm_func.RowIndex(gridWFRtm_func.Row ) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_func.RowBookmark(gridWFRtm_func.RowIndex(gridWFRtm_func.Row))
    Set u = Item.FindRowObject(Right(bm, len(bm)-38), Left(bm, 38))
    Set frmWFRtm_func_.Item = u
    again: frmWFRtm_func_.NotFirstTime = False
    frmWFRtm_func_.OnInit
    frmWFRtm_func_.Show vbModal
    If frmWFRtm_func_.OK Then
    on error resume next
    err.clear
    u.save
    if err.number &lt;&gt;0 then 
      msgbox err.description,vbokonly+vbExclamation,&quot;Изменение&quot;
      goto again
    end if 
    gridWFRtm_func.RefreshRowBookmark bm
    else
     u.refresh
    End If
 End If
End If
End Sub
Private Sub cmdWFRtm_funcDel_Click()
  on error resume next
  gridWFRtm_func.Delete
End Sub
Private Sub cmdWFRtm_funcAdd_Click()
  on error resume next
      Dim u As Object
      Set u = Item.WFRtm_func.Add()

      Set frmWFRtm_func_.Item = u
      again: frmWFRtm_func_.NotFirstTime = False
      frmWFRtm_func_.OnInit
      frmWFRtm_func_.Show vbModal
      If frmWFRtm_func_.OK Then
        err.clear
        u.save
        if err.number &lt;&gt;0 then 
          msgbox err.description,vbokonly+vbExclamation,&quot;Создание&quot;
          goto again
        end if 
        gridWFRtm_func.ItemCount = Item.WFRtm_func.Count
        gridWFRtm_func.Refresh
        gridWFRtm_func.RefreshGroups
        gridWFRtm_func.Refreshsort
        gridWFRtm_func.MoveToBookmark u.ID &amp; &quot;WFRtm_func&quot;
      Else
        Item.WFRtm_func.Delete u.ID
        Item.WFRtm_func.Remove u.ID
      End If
      Exit Sub
bye:
   MsgBox Err.Description,vbokonly+vbExclamation,&quot;Создание&quot;
End Sub
Private Sub cmdWFRtm_funcFnd_Click()
  on error resume next
  fndWFRtm_func.ShowForm
End Sub
Private Sub cmdWFRtm_funcRun_Click()
  on error resume next
  gridWFRtm_func_DblClick
End Sub
Private Sub gridWFRtm_func_UnboundReadData(ByVal RowIndex As Long, ByVal Bookmark As Variant, ByVal Values As GridEX20.JSRowData)
on error resume next
Item.WFRtm_func.LoadRow gridWFRtm_func, RowIndex, Bookmark, Values
End Sub
Private Sub gridWFRtm_func_BeforeDeleteEX(ByVal RowIndex As Long, ByVal Bookmark As Variant, ByVal Cancel As GridEX20.JSRetBoolean)
  If gridWFRtm_func.ItemCount = 0 Then Exit Sub
  Dim u As Object
  Set u = Item.FindRowObject(&quot;WFRtm_func&quot;, Left(Bookmark, 38))
  If Not u Is Nothing Then
    on error resume next
    If MsgBox(&quot;Удалить элемент&quot; &amp; vbCrLf &amp; u.Brief &amp; vbcrlf &amp; &quot;?&quot;, vbYesNo + vbQuestion, &quot;Внимание&quot;) = vbYes Then
      on error goto bye
      u.parent.Delete u.id
    Else
      Cancel = True
    End If
  End If
Exit Sub
bye:
   Cancel = True
   MsgBox Err.Description, vbOKOnly + vbExclamation, &quot;Удаление&quot;
End Sub

Private Sub gridWFRtm_func_DblClick()
If gridWFRtm_func.ItemCount = 0 Then Exit Sub
If gridWFRtm_func.Row &gt; 0 then
  If gridWFRtm_func.RowIndex(gridWFRtm_func.Row ) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_func.RowBookmark(gridWFRtm_func.RowIndex(gridWFRtm_func.Row))
    Set u = Item.FindRowObject(Right(bm, len(bm)-38), Left(bm, 38))
    on error resume next
    if not u is nothing then
      opWFRtm_func_OpenRef_ u
    end if
     u.refresh
  End If
End If
End Sub
Private Sub gridWFRtm_func_KeyPress(KeyAscii As Integer)
  If gridWFRtm_func.ItemCount = 0 Then Exit Sub
  On Error Resume Next
  fndWFRtm_func.FindOnPress KeyAscii
End Sub

Private Sub gridWFRtm_func_RowColChange(ByVal LastRow As Long, ByVal LastCol As Integer)
 ON ERROR RESUME NEXT
If LastRow &lt;&gt; gridWFRtm_func.Row And LastRow &gt; 0 Then
  gridWFRtm_func.GetRowData(LastRow).RowStyle = &quot;Default&quot;
  gridWFRtm_func.GetRowData(gridWFRtm_func.Row).RowStyle = &quot;SelectedRow&quot;
End If
End Sub
Private Sub mnuWFRtm_funcPASTE_Click()
On Error Resume Next
    Dim u As Object
    Set u = item.WFRtm_func.Add()
    If GetFromBuffer(u) Then
      gridWFRtm_func.ItemCount = u.parent.Count
    End If
End Sub
'Hidden GRID Setup...
private sub gridWFRtm_func_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim ShiftDown, AltDown, CtrlDown
    ShiftDown = (Shift And vbShiftMask) &gt; 0
    AltDown = (Shift And vbAltMask) &gt; 0
    CtrlDown = (Shift And vbCtrlMask) &gt; 0
    If KeyCode = vbKeyF4 Then
        If ShiftDown And CtrlDown And AltDown Then
            cmdWFRtm_funcCfg_Click
        End If
    End If
end sub

private sub gridWFRtm_func_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
  If Button = 2 And Shift = 0 Then
  on error resume next
  PopupMenu mnuPopupWFRtm_func
End If
end sub
private sub mnuWFRtm_funcAdd_click()
   menuActionWFRtm_func =&quot;ADD&quot;
   menuTimerWFRtm_func.enabled = true
end sub
private sub mnuWFRtm_funcEdit_click()
   menuActionWFRtm_func =&quot;EDIT&quot;
   menuTimerWFRtm_func.enabled = true
end sub
private sub mnuWFRtm_funcDelete_click()
   menuActionWFRtm_func =&quot;DEL&quot;
   menuTimerWFRtm_func.enabled = true
end sub
private sub mnuWFRtm_funcOpen_click()
   menuActionWFRtm_func =&quot;RUN&quot;
   menuTimerWFRtm_func.enabled = true
end sub
private sub mnuWFRtm_funcRef_click()
   menuActionWFRtm_func =&quot;REF&quot;
   menuTimerWFRtm_func.enabled = true
end sub
  Private Sub mnuWFRtm_funcCOPY_Click()
    On Error Resume Next
    If gridWFRtm_func.ItemCount = 0 Then Exit Sub
    If gridWFRtm_func.Row &gt; 0 Then
     If gridWFRtm_func.RowIndex(gridWFRtm_func.Row) &gt; 0 Then
        Dim u As Object
        Dim bm
        bm = gridWFRtm_func.RowBookmark(gridWFRtm_func.RowIndex(gridWFRtm_func.Row))
        Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
        SaveToBuffer u
      End If
    End If
  End Sub
  Private Sub mnuWFRtm_funcCUT_Click()
    On Error Resume Next
    If gridWFRtm_func.ItemCount = 0 Then Exit Sub
    If gridWFRtm_func.Row &gt; 0 Then
     If gridWFRtm_func.RowIndex(gridWFRtm_func.Row) &gt; 0 Then
        Dim u As Object
        Dim bm
        bm = gridWFRtm_func.RowBookmark(gridWFRtm_func.RowIndex(gridWFRtm_func.Row))
        Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
        SaveToBuffer u
        SET BM = u.parent
        u.parent.Delete u.ID
        gridWFRtm_func.ITEMCOUNT = BM.COUNT
      End If
    End If
  End Sub
Private Sub mnuWFRtm_funcCHANGE_Click()
  On Error Resume Next
  If gridWFRtm_func.ItemCount = 0 Then Exit Sub
  If gridWFRtm_func.Row &gt; 0 Then
   If gridWFRtm_func.RowIndex(gridWFRtm_func.Row) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_func.RowBookmark(gridWFRtm_func.RowIndex(gridWFRtm_func.Row))
    Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
    If GetFromBuffer(u) Then
      gridWFRtm_func.ItemCount = u.parent.Count
      gridWFRtm_func.RefreshRowIndex gridWFRtm_func.RowIndex(gridWFRtm_func.Row)
    End If
   End If
  End If
End Sub
  Private Sub mnuWFRtm_funcCLEAN_Click()
    item.Manager.ClearBuffer &quot; &amp; p.name &amp; &quot;
  End Sub
private sub mnuWFRtm_funcPrn_click()
   menuActionWFRtm_func =&quot;PRN&quot;
   menuTimerWFRtm_func.enabled = true
end sub
private sub mnuWFRtm_funcCfg_click()
   menuActionWFRtm_func =&quot;CFG&quot;
   menuTimerWFRtm_func.enabled = true
end sub
private sub mnuWFRtm_funcFind_click()
   menuActionWFRtm_func =&quot;FND&quot;
   menuTimerWFRtm_func.enabled = true
end sub
private sub mnuWFRtm_funcAcc_click()
   menuActionWFRtm_func =&quot;ACC&quot;
   menuTimerWFRtm_func.enabled = true
end sub
private sub menuTimerWFRtm_func_timer()
   menuTimerWFRtm_func.enabled = false
   if menuActionWFRtm_func =&quot;ADD&quot; then cmdWFRtm_funcADD_CLick
   if menuActionWFRtm_func =&quot;EDIT&quot; then cmdWFRtm_funcEDIT_CLick
   if menuActionWFRtm_func =&quot;DEL&quot; then cmdWFRtm_funcDEL_CLick
   if menuActionWFRtm_func =&quot;RUN&quot; then cmdWFRtm_funcRUN_CLick
   if menuActionWFRtm_func =&quot;REF&quot; then cmdWFRtm_funcREF_CLick
   if menuActionWFRtm_func =&quot;PRN&quot; then cmdWFRtm_funcPRN_CLick
   if menuActionWFRtm_func =&quot;CFG&quot; then cmdWFRtm_funcCFG_CLick
   if menuActionWFRtm_func =&quot;FND&quot; then cmdWFRtm_funcFND_CLick
   if menuActionWFRtm_func =&quot;ACC&quot; then cmdWFRtm_funcACC_CLick
   menuActionWFRtm_func =&quot;&quot;
end sub
public sub OnInit(aItem as object, optional pForm as object = nothing)
 on error resume next
 set Item =aItem
 set ParentForm = pForm

  LoadBtnPictures cmdWFRtm_funcAdd,cmdWFRtm_funcAdd.tag
  LoadBtnPictures cmdWFRtm_funcEdit,cmdWFRtm_funcEdit.tag
  LoadBtnPictures cmdWFRtm_funcDel,cmdWFRtm_funcDel.tag
  LoadBtnPictures cmdWFRtm_funcRef,cmdWFRtm_funcRef.tag
  LoadBtnPictures cmdWFRtm_funcPrn,cmdWFRtm_funcPrn.tag
  LoadBtnPictures cmdWFRtm_funcFnd,cmdWFRtm_funcFnd.tag
  item.WFRtm_func.PrepareGrid gridWFRtm_func
  LoadGridLayout gridWFRtm_func
  Set fndWFRtm_func = Nothing
  On Error Resume Next
  Set fndWFRtm_func = CreateObject(&quot;MTZ_JSetup.GridFinder&quot;)
  fndWFRtm_func.Init gridWFRtm_func
end sub
private sub OnTabClick()

      gridWFRtm_func.Top = 40 * Screen.TwipsPerPixelX
      gridWFRtm_func.Left = 5 * Screen.TwipsPerPixelX
      gridWFRtm_func.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      gridWFRtm_func.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
      gridWFRtm_func.Top = 40 * Screen.TwipsPerPixelX
      gridWFRtm_func.Left = 5 * Screen.TwipsPerPixelX
      gridWFRtm_func.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      gridWFRtm_func.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
end sub
public sub OnClick(aItem as object, optional pForm as object = nothing)
  on error resume next
  set Item =aItem
  set ParentForm = pForm
  OnTabClick
end sub
public sub OnSave()
  
end sub
public function IsChanged() as boolean
  dim m_IsChanged as boolean
  on error resume next
  
  IsChanged = m_IsChanged
end function
private sub UserControl_Resize()
  On Error Resume Next
  pnlWFRtm_func.Move 0, 0, UserControl.Width, UserControl.Height
  OnTabClick
end sub
public sub CloseClass()
  On Error Resume Next
  set parentForm = nothing
  set item = nothing
  set fndWFRtm_func = nothing
end sub
private sub UserControl_Terminate()
  On Error Resume Next
  CloseClass
end sub

'переместить клиента в каталоге
'{5CB1388C-1623-4B36-A775-00B70BEE27AF}
private sub Run_VBMoveVRC ( VRCATFolder as variant , optional RowItem as object )
'do nothing
end sub



'Передать права объекту контактное лицо от объекта клиент
'{79DED4FD-045C-45F8-AC79-2E5A3D956D97}
private sub Run_VBMigrateRight ( optional RowItem as object )
'Migrate security
On Error GoTo bye
  If RowItem.Person Is Nothing Then Exit Sub

  RowItem.Person.Secure Item.SecureStyleID
  RowItem.Person.propagate
bye:
  Exit Sub
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Применить стиль защиты для объекта Предназначен для каталога клиентов
'{31EC6CF7-8DBD-4EFE-BF12-4D168F653D34}
private sub Run_VBApplySecurity ( optional RowItem as object )
'Apply security
On Error GoTo bye
  If RowItem.Client Is Nothing Then Exit Sub
  If RowItem.Parent.Parent.AccessLevel Is Nothing Then Exit Sub
  RowItem.Client.Secure RowItem.Parent.Parent.AccessLevel.id
  RowItem.Client.propagate
  Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Создание отчета из разных карточек
'{5B8FB7B9-D8B1-4CA0-90AF-55F83D1A6E5D}
private sub Run_VBMakeReport ( ReportType as variant , optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 'ID = CreateGUID2
 'Call RowItem.Application.Manager.NewInstance(ID, &quot;VRRPT&quot;, &quot;Отчет &quot; &amp; Date)
 'Set RowItem.Report = RowItem.Application.Manager.GetInstanceObject(ID)
 If RowItem.Report.VRRPT_MAIN.Count = 0 Then
  Set Obj = RowItem.Report.VRRPT_MAIN.Add
 Else
  Set Obj = RowItem.Report.VRRPT_MAIN.Item(1)
 End If
 
 Set Obj.Author = RowItem.Application.FindRowObject(&quot;Users&quot;, Item.Application.MTZSession.GetSessionUserID())
 Obj.TheDate = Date
 
 If ReportType = &quot;CLNT&quot; Then
   Set Obj.Client = RowItem.Application
 End If
 If ReportType = &quot;PRJ&quot; Then
   Set Obj.Project = RowItem.Application
 End If
 If ReportType = &quot;CONT&quot; Then
   Set Obj.Contract = RowItem.Application
 End If
 If ReportType = &quot;PERS&quot; Then
   Set Obj.Person = RowItem.Application
 End If
 
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание отчета&quot;
end sub



'Создать новую оплату из клиента
'{42A1A436-8AA2-4F1F-999B-6680DFF514DE}
private sub Run_VBNewPayIn ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKP&quot;, &quot;Платеж &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKP_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKP_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKP_DEF.Item(1)
 End If
 
 Set Obj.FromClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'Создать новый платеж из клиента
'{2BB30818-90ED-4627-8ABB-85B3FBA46750}
private sub Run_VBNewPayOut ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKO&quot;, &quot;Оплата &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKO_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKO_DEF.Item(1)
 End If
 
 Set Obj.ToClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'открытие карточки по идентификатору
'{94E8F6DB-106A-44DC-9483-86C801798FF0}
private sub Run_VBOpenRef ( StartMode as variant ,ID as variant , optional RowItem as object )
on error resume next
If ID &lt;&gt; &quot;&quot; Then
    Dim Obj As Object
    Set Obj = item.Manager.GetInstanceObject(ID)
    If Not Obj Is Nothing Then
      Dim objGui As Object
      Set objGui =  item.Manager.GetInstanceGUI(Obj.ID)
      If objGui Is Nothing Then Exit Sub

       If StartMode = &quot;AUTO&quot; Then
        StartMode = &quot;&quot;
        dim i as long
        For i = 100 To 0 Step -10
          If Obj.MTZSession.CheckRight(Obj.SecureStyleid, Obj.TypeName &amp; &quot;:&quot; &amp; &quot;M&quot; &amp; i) Then
            StartMode = &quot;M&quot; &amp; i
            Exit For
          End If
        Next
       End If
      
      objGui.Show StartMode &amp; &quot;&quot;, Obj
      Set objGui = Nothing
    End If
  End If
  
end sub



'
'{069956DC-3305-45EF-9331-91CE323B5942}
private sub Run_WFDefName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Description
parentform.caption = item.name
Item.Save
end sub



'
'{D8914FB4-6B5D-491A-A72F-985617727583}
private sub Run_WFFuncName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Name
ParentForm.Caption = item.Name
Item.Save
end sub



'Изменить название объекта
'{4FB59D1A-0123-47D3-9F4F-E12085C5D074}
private sub Run_VBUpdateItemName ( Name as variant , optional RowItem as object )
on error resume next
item.name = Name
' может не быть формы, если используем просто ActiveX
ParentForm.Caption = item.Name
item.Save
end sub



'Создать заявку из клиента
'{49EA5CBF-93CF-41A8-B1F1-E37FE4D59EA5}
private sub Run_VBNewZayavka ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKZ&quot;, &quot;Заявка &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKz_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKZ_DEF.Item(1)
 End If
 
 Set Obj.ClientFrom = RowItem.Application
 Obj.QueryDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Заявки&quot;
end sub



"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="vpnWFRtm_Pcomm_" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="controlset"/><FormData Name=""><ControlData Name="pnlWFRtm_Pcomm" ControlIndex="0" PROGID="VB.Frame"><Properties Name="Name" PropValue="pnlWFRtm_Pcomm"/><Properties Name="visible" PropValue="True"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Width" PropValue="9000"/><Properties Name="Height" PropValue="6000"/><Properties Name="BorderStyle" PropValue="0"/><ControlData Name="treeWFRtm_Pcomm" ControlIndex="0" PROGID="mscomctllib.treeview"><Properties Name="Name" PropValue="treeWFRtm_Pcomm"/><Properties Name="LabelEdit" PropValue="1"/><Properties Name="LineStyle" PropValue="1"/><Properties Name="Sorted" PropValue="True"/><Properties Name="Indentation" PropValue="75"/><Properties Name="HideSelection" PropValue="False"/><Properties Name="Left" PropValue="225"/><Properties Name="Top" PropValue="600"/></ControlData><ControlData Name="cmdWFRtm_PcommAddRoot" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_PcommAddRoot"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="NEWROOT.ico"/><Properties Name="ToolTipText" PropValue="Добавить ветку"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="75"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_PcommAdd" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_PcommAdd"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="NEW.ico"/><Properties Name="ToolTipText" PropValue="Добавить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="450"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_PcommEdit" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_PcommEdit"/><Properties Name="Tag" PropValue="PROP.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Свойства"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="825"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_PcommDel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_PcommDel"/><Properties Name="Tag" PropValue="DELETE.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Удалить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1200"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_PcommRef" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_PcommRef"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="Refresh.ico"/><Properties Name="ToolTipText" PropValue="Обновить"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1575"/></ControlData><ControlData Name="cmdWFRtm_PcommAcc" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_PcommAcc"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="security.ico"/><Properties Name="ToolTipText" PropValue="Стиль защиты"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1950"/></ControlData></ControlData><ControlData Name="mnuPopupWFRtm_Pcomm" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Меню для Комментарии"/><Properties Name="Name" PropValue="mnuPopupWFRtm_Pcomm"/><Properties Name="Visible" PropValue="False"/><ControlData Name="mnuWFRtm_PcommAddRoot" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Создать ветку"/><Properties Name="Name" PropValue="mnuWFRtm_PcommAddRoot"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_PcommAdd" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Создать"/><Properties Name="Name" PropValue="mnuWFRtm_PcommAdd"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_PcommEdit" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Свойства"/><Properties Name="Name" PropValue="mnuWFRtm_PcommEdit"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_PcommDelete" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Удалить"/><Properties Name="Name" PropValue="mnuWFRtm_PcommDelete"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_PcommS1" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="-"/><Properties Name="Name" PropValue="mnuWFRtm_PcommS1"/></ControlData><ControlData Name="mnuWFRtm_PcommBuffer" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Буфер"/><Properties Name="Name" PropValue="mnuWFRtm_PcommBuffer"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><ControlData Name="mnuWFRtm_PcommCOPY" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Копировать"/><Properties Name="Name" PropValue="mnuWFRtm_PcommCOPY"/></ControlData><ControlData Name="mnuWFRtm_PcommCUT" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вырезать"/><Properties Name="Name" PropValue="mnuWFRtm_PcommCUT"/></ControlData><ControlData Name="mnuWFRtm_PcommPASTE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вставить"/><Properties Name="Name" PropValue="mnuWFRtm_PcommPASTE"/></ControlData><ControlData Name="mnuWFRtm_PcommCHANGE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Заменить"/><Properties Name="Name" PropValue="mnuWFRtm_PcommCHANGE"/></ControlData><ControlData Name="mnuWFRtm_PcommCLEAN" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Очистить"/><Properties Name="Name" PropValue="mnuWFRtm_PcommCLEAN"/></ControlData></ControlData><ControlData Name="mnuWFRtm_PcommRef" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Обновить"/><Properties Name="Name" PropValue="mnuWFRtm_PcommRef"/></ControlData><ControlData Name="mnuWFRtm_PcommAcc" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Стиль защиты"/><Properties Name="Name" PropValue="mnuWFRtm_PcommAcc"/></ControlData></ControlData><ControlData Name="menuTimerWFRtm_Pcomm" ControlIndex="0" PROGID="VB.Timer"><Properties Name="Name" PropValue="menuTimerWFRtm_Pcomm"/><Properties Name="Enabled" PropValue="False"/><Properties Name="Interval" PropValue="1"/></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="public Item as object
public ParentForm as Object
public ModalMode as boolean
private menuActionWFRtm_Pcomm as string

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Private Sub cmdWFRtm_PcommAdd_Click()
  on error resume next
  on error resume next
  Dim f As Object, p As Object
If (treeWFRtm_Pcomm.SelectedItem is Nothing) Then  exit sub
  Set p = Item.FindRowObject(&quot;WFRtm_Pcomm&quot;, Left(treeWFRtm_Pcomm.SelectedItem.Key, 38))
  Set f = p.WFRtm_Pcomm.Add()

      Set frmWFRtm_Pcomm_.Item = f
      again: frmWFRtm_Pcomm_.NotFirstTime = False
      frmWFRtm_Pcomm_.OnInit
      frmWFRtm_Pcomm_.Show vbModal
      If frmWFRtm_Pcomm_.OK Then
        err.clear
        f.save
        if err.number &lt;&gt;0 then 
          msgbox err.description,vbokonly+vbExclamation,&quot;Создание&quot;
          goto again
        end if 
          If treeWFRtm_Pcomm.SelectedItem.child.tag &lt;&gt; &quot;ToDelete&quot; Then  
            f.LoadToTree treeWFRtm_Pcomm, treeWFRtm_Pcomm.SelectedItem.Key
          end if
          set treeWFRtm_Pcomm.SelectedItem = treeWFRtm_Pcomm.nodes.item(  f.ID &amp; &quot;WFRtm_Pcomm&quot;)
      Else
        Item.WFRtm_Pcomm.Delete f.ID
        Item.WFRtm_Pcomm.Remove f.ID
      End If
End Sub

Private Sub cmdWFRtm_PcommAddRoot_Click()
  on error resume next
Dim f As Object, p As Object
  Set f = Item.WFRtm_Pcomm.Add()

      Set frmWFRtm_Pcomm_.Item = f
      again: frmWFRtm_Pcomm_.NotFirstTime = False
      frmWFRtm_Pcomm_.OnInit
      frmWFRtm_Pcomm_.Show vbModal
      If frmWFRtm_Pcomm_.OK Then
        err.clear
        f.save
        if err.number &lt;&gt;0 then 
          msgbox err.description,vbokonly+vbExclamation,&quot;Создание&quot;
          goto again
        end if 
    Item.WFRtm_Pcomm.refresh
    treeWFRtm_Pcomm.nodes.clear
    Item.WFRtm_Pcomm.filltree treeWFRtm_Pcomm
          set treeWFRtm_Pcomm.SelectedItem = treeWFRtm_Pcomm.nodes.item(  f.ID &amp; &quot;WFRtm_Pcomm&quot;)
      Else
        Item.WFRtm_Pcomm.Remove f.ID
      End If
End Sub

Private Sub cmdWFRtm_PcommEdit_Click()
  on error resume next
  Dim f As Object
  If treeWFRtm_Pcomm.SelectedItem Is Nothing Then Exit Sub
  Set f = Item.FindRowObject(&quot;WFRtm_Pcomm&quot;, Left(treeWFRtm_Pcomm.SelectedItem.Key, 38))
  Set frmWFRtm_Pcomm_.Item = f
  again: frmWFRtm_Pcomm_.NotFirstTime = False
  frmWFRtm_Pcomm_.OnInit
  frmWFRtm_Pcomm_.Show vbModal
  If frmWFRtm_Pcomm_.OK Then
    err.clear
    f.save
    if err.number &lt;&gt;0 then 
      msgbox err.description,vbokonly+vbExclamation,&quot;Изменение&quot;
      goto again
    end if 
  End If
End Sub

Private Sub cmdWFRtm_PcommDel_Click()
  on error resume next
  Dim f As Object
  If treeWFRtm_Pcomm.SelectedItem Is Nothing Then Exit Sub
  Set f = Item.FindRowObject(&quot;WFRtm_Pcomm&quot;, Left(treeWFRtm_Pcomm.SelectedItem.Key, 38))
  If MsgBox(&quot;Удалить элемент&quot; &amp; vbCrLf &amp; f.Brief &amp; vbCrLf &amp; &quot;?&quot;, vbYesNo + vbQuestion, &quot;Внимание&quot;) = vbYes Then
  on error goto bye
     if f.Parent.Delete( f.ID) then
       treeWFRtm_Pcomm.Nodes.Remove treeWFRtm_Pcomm.SelectedItem.Key
     End If
  End If
Exit Sub
bye:
msgbox err.description,vbokonly+vbExclamation,&quot;Удаление&quot;
End Sub

Private Sub cmdWFRtm_PcommAcc_Click()
  on error resume next
  Dim f As Object
  If treeWFRtm_Pcomm.SelectedItem Is Nothing Then Exit Sub
  Set f = Item.FindRowObject(&quot;WFRtm_Pcomm&quot;, Left(treeWFRtm_Pcomm.SelectedItem.Key, 38))
  item.application.manager.ShowSecurityDialog f
End Sub

Private Sub cmdWFRtm_PcommREf_Click()
  on error resume next
  Item.WFRtm_Pcomm.refresh
  treeWFRtm_Pcomm.nodes.clear
  Item.WFRtm_Pcomm.filltree treeWFRtm_Pcomm
End Sub

Private Sub treeWFRtm_Pcomm_DblClick()
If treeWFRtm_Pcomm.SelectedItem Is Nothing Then Exit Sub
  cmdWFRtm_PcommEdit_Click
End Sub
Private Sub treeWFRtm_Pcomm_Expand(ByVal Node As MSComctlLib.Node)
If Node.Child.Tag = &quot;ToDelete&quot; Then
 parentform.mousepointer = vbHourglass
 treeWFRtm_Pcomm.Nodes.Remove Node.Child.Index
 Dim f As Object
 Set f = Item.FindRowObject(&quot;WFRtm_Pcomm&quot;, Left(Node.Key, 38))
 f.expandpart treeWFRtm_Pcomm, Node.Key
 parentform.mousepointer = vbNormal
End If
End Sub

private sub treeWFRtm_Pcomm_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
  If Button = 2 And Shift = 0 Then
  PopupMenu mnuPopupWFRtm_Pcomm
End If
end sub
private sub mnuWFRtm_PcommAddRoot_click()
   menuActionWFRtm_Pcomm =&quot;ADDROOT&quot;
   menuTimerWFRtm_Pcomm.enabled = true
end sub
private sub mnuWFRtm_PcommAdd_click()
   menuActionWFRtm_Pcomm =&quot;ADD&quot;
   menuTimerWFRtm_Pcomm.enabled = true
end sub
private sub mnuWFRtm_PcommEdit_click()
   menuActionWFRtm_Pcomm =&quot;EDIT&quot;
   menuTimerWFRtm_Pcomm.enabled = true
end sub
private sub mnuWFRtm_PcommDelete_click()
   menuActionWFRtm_Pcomm =&quot;DEL&quot;
   menuTimerWFRtm_Pcomm.enabled = true
end sub
  Private Sub mnuWFRtm_PcommCOPY_Click()
    On Error Resume Next
    If TREEWFRtm_Pcomm.SELECTEDItem is nothing Then Exit Sub
        Dim u As Object
        Set u = Item.FindRowObject(&quot;WFRtm_Pcomm&quot;, Left(treeWFRtm_Pcomm.SelectedItem.Key, 38))
        SaveToBuffer u
  End Sub
  Private Sub mnuWFRtm_PcommCUT_Click()
    On Error Resume Next
    If TREEWFRtm_Pcomm.SELECTEDItem is nothing Then Exit Sub
    Dim u As Object,BM
    Set u = Item.FindRowObject(&quot;WFRtm_Pcomm&quot;, Left(treeWFRtm_Pcomm.SelectedItem.Key, 38))
    SaveToBuffer u
    SET BM = u.parent
    u.parent.Delete u.ID
    TREEWFRtm_Pcomm.nodes.remove TREEWFRtm_Pcomm.selecteditem.key
  End Sub
Private Sub mnuWFRtm_PcommPASTE_Click()
On Error Resume Next
If treeWFRtm_Pcomm.SelectedItem Is Nothing Then Exit Sub
  Dim u As Object, f as object
  Set f = Item.FindRowObject(&quot;WFRtm_Pcomm&quot;, Left(treeWFRtm_Pcomm.SelectedItem.Key, 38))
  Set u = f.WFRtm_Pcomm.Add()
  If GetFromBuffer(u) Then
    If treeWFRtm_Pcomm.SelectedItem.child.tag &lt;&gt; &quot;ToDelete&quot; Then  
      u.LoadToTree treeWFRtm_Pcomm, treeWFRtm_Pcomm.SelectedItem.Key
    end if
  Else
   f.WFRtm_Pcomm.refresh
  End If
End Sub
Private Sub mnuWFRtm_PcommCHANGE_Click()
  On Error Resume Next
  If TREEWFRtm_Pcomm.SELECTEDItem is nothing Then Exit Sub
  Dim u As Object,BM
  Set u = Item.FindRowObject(&quot;WFRtm_Pcomm&quot;, Left(treeWFRtm_Pcomm.SelectedItem.Key, 38))
  If GetFromBuffer(u) Then
    TREEWFRtm_Pcomm.SELECTEDItem.text = u.brief
      treeWFRtm_Pcomm.SelectedItem.Expanded = False
      While treeWFRtm_Pcomm.SelectedItem.Children &gt; 0
        treeWFRtm_Pcomm.Nodes.Remove treeWFRtm_Pcomm.SelectedItem.Child.Key
      Wend
      treeWFRtm_Pcomm.Nodes.Add(treeWFRtm_Pcomm.SelectedItem.Key, 4, &quot;Expanding ...&quot;).Tag = &quot;ToDelete&quot;
      treeWFRtm_Pcomm_Expand treeWFRtm_Pcomm.SelectedItem
  End If
End Sub
  Private Sub mnuWFRtm_PcommCLEAN_Click()
    item.Manager.ClearBuffer &quot; &amp; p.name &amp; &quot;
  End Sub
private sub mnuWFRtm_PcommRef_click()
   menuActionWFRtm_Pcomm =&quot;REF&quot;
   menuTimerWFRtm_Pcomm.enabled = true
end sub
private sub mnuWFRtm_PcommAcc_click()
   menuActionWFRtm_Pcomm =&quot;ACC&quot;
   menuTimerWFRtm_Pcomm.enabled = true
end sub
private sub menuTimerWFRtm_Pcomm_timer()
   menuTimerWFRtm_Pcomm.enabled = false
   if menuActionWFRtm_Pcomm =&quot;ADDROOT&quot; then cmdWFRtm_PcommADDROOT_CLick
   if menuActionWFRtm_Pcomm =&quot;ADD&quot; then cmdWFRtm_PcommADD_CLick
   if menuActionWFRtm_Pcomm =&quot;EDIT&quot; then cmdWFRtm_PcommEDIT_CLick
   if menuActionWFRtm_Pcomm =&quot;DEL&quot; then cmdWFRtm_PcommDEL_CLick
   if menuActionWFRtm_Pcomm =&quot;REF&quot; then cmdWFRtm_PcommREF_CLick
   if menuActionWFRtm_Pcomm =&quot;ACC&quot; then cmdWFRtm_PcommACC_CLick
   menuActionWFRtm_Pcomm =&quot;&quot;
end sub
public sub OnInit(aItem as object, optional pForm as object = nothing)
 on error resume next
 set Item =aItem
 set ParentForm = pForm

  LoadBtnPictures cmdWFRtm_PcommAddRoot,cmdWFRtm_PcommAddRoot.tag
  LoadBtnPictures cmdWFRtm_PcommAdd,cmdWFRtm_PcommAdd.tag
  LoadBtnPictures cmdWFRtm_PcommEdit,cmdWFRtm_PcommEdit.tag
  LoadBtnPictures cmdWFRtm_PcommDel,cmdWFRtm_PcommDel.tag
  LoadBtnPictures cmdWFRtm_PcommRef,cmdWFRtm_PcommRef.tag
  LoadBtnPictures cmdWFRtm_PcommAcc,cmdWFRtm_PcommAcc.tag
Item.WFRtm_Pcomm.filltree treeWFRtm_Pcomm
end sub
private sub OnTabClick()

      treeWFRtm_Pcomm.Top = 40 * Screen.TwipsPerPixelX
      treeWFRtm_Pcomm.Left = 5 * Screen.TwipsPerPixelX
      treeWFRtm_Pcomm.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      treeWFRtm_Pcomm.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
end sub
public sub OnClick(aItem as object, optional pForm as object = nothing)
  on error resume next
  set Item =aItem
  set ParentForm = pForm
  OnTabClick
end sub
public sub OnSave()
  
end sub
public function IsChanged() as boolean
  dim m_IsChanged as boolean
  on error resume next
  
  IsChanged = m_IsChanged
end function
private sub UserControl_Resize()
  On Error Resume Next
  pnlWFRtm_Pcomm.Move 0, 0, UserControl.Width, UserControl.Height
  OnTabClick
end sub
public sub CloseClass()
  On Error Resume Next
  set parentForm = nothing
  set item = nothing
end sub
private sub UserControl_Terminate()
  On Error Resume Next
  CloseClass
end sub

'переместить клиента в каталоге
'{5CB1388C-1623-4B36-A775-00B70BEE27AF}
private sub Run_VBMoveVRC ( VRCATFolder as variant , optional RowItem as object )
'do nothing
end sub



'Передать права объекту контактное лицо от объекта клиент
'{79DED4FD-045C-45F8-AC79-2E5A3D956D97}
private sub Run_VBMigrateRight ( optional RowItem as object )
'Migrate security
On Error GoTo bye
  If RowItem.Person Is Nothing Then Exit Sub

  RowItem.Person.Secure Item.SecureStyleID
  RowItem.Person.propagate
bye:
  Exit Sub
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Применить стиль защиты для объекта Предназначен для каталога клиентов
'{31EC6CF7-8DBD-4EFE-BF12-4D168F653D34}
private sub Run_VBApplySecurity ( optional RowItem as object )
'Apply security
On Error GoTo bye
  If RowItem.Client Is Nothing Then Exit Sub
  If RowItem.Parent.Parent.AccessLevel Is Nothing Then Exit Sub
  RowItem.Client.Secure RowItem.Parent.Parent.AccessLevel.id
  RowItem.Client.propagate
  Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Создание отчета из разных карточек
'{5B8FB7B9-D8B1-4CA0-90AF-55F83D1A6E5D}
private sub Run_VBMakeReport ( ReportType as variant , optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 'ID = CreateGUID2
 'Call RowItem.Application.Manager.NewInstance(ID, &quot;VRRPT&quot;, &quot;Отчет &quot; &amp; Date)
 'Set RowItem.Report = RowItem.Application.Manager.GetInstanceObject(ID)
 If RowItem.Report.VRRPT_MAIN.Count = 0 Then
  Set Obj = RowItem.Report.VRRPT_MAIN.Add
 Else
  Set Obj = RowItem.Report.VRRPT_MAIN.Item(1)
 End If
 
 Set Obj.Author = RowItem.Application.FindRowObject(&quot;Users&quot;, Item.Application.MTZSession.GetSessionUserID())
 Obj.TheDate = Date
 
 If ReportType = &quot;CLNT&quot; Then
   Set Obj.Client = RowItem.Application
 End If
 If ReportType = &quot;PRJ&quot; Then
   Set Obj.Project = RowItem.Application
 End If
 If ReportType = &quot;CONT&quot; Then
   Set Obj.Contract = RowItem.Application
 End If
 If ReportType = &quot;PERS&quot; Then
   Set Obj.Person = RowItem.Application
 End If
 
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание отчета&quot;
end sub



'Создать новую оплату из клиента
'{42A1A436-8AA2-4F1F-999B-6680DFF514DE}
private sub Run_VBNewPayIn ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKP&quot;, &quot;Платеж &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKP_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKP_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKP_DEF.Item(1)
 End If
 
 Set Obj.FromClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'Создать новый платеж из клиента
'{2BB30818-90ED-4627-8ABB-85B3FBA46750}
private sub Run_VBNewPayOut ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKO&quot;, &quot;Оплата &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKO_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKO_DEF.Item(1)
 End If
 
 Set Obj.ToClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'открытие карточки по идентификатору
'{94E8F6DB-106A-44DC-9483-86C801798FF0}
private sub Run_VBOpenRef ( StartMode as variant ,ID as variant , optional RowItem as object )
on error resume next
If ID &lt;&gt; &quot;&quot; Then
    Dim Obj As Object
    Set Obj = item.Manager.GetInstanceObject(ID)
    If Not Obj Is Nothing Then
      Dim objGui As Object
      Set objGui =  item.Manager.GetInstanceGUI(Obj.ID)
      If objGui Is Nothing Then Exit Sub

       If StartMode = &quot;AUTO&quot; Then
        StartMode = &quot;&quot;
        dim i as long
        For i = 100 To 0 Step -10
          If Obj.MTZSession.CheckRight(Obj.SecureStyleid, Obj.TypeName &amp; &quot;:&quot; &amp; &quot;M&quot; &amp; i) Then
            StartMode = &quot;M&quot; &amp; i
            Exit For
          End If
        Next
       End If
      
      objGui.Show StartMode &amp; &quot;&quot;, Obj
      Set objGui = Nothing
    End If
  End If
  
end sub



'
'{069956DC-3305-45EF-9331-91CE323B5942}
private sub Run_WFDefName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Description
parentform.caption = item.name
Item.Save
end sub



'
'{D8914FB4-6B5D-491A-A72F-985617727583}
private sub Run_WFFuncName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Name
ParentForm.Caption = item.Name
Item.Save
end sub



'Изменить название объекта
'{4FB59D1A-0123-47D3-9F4F-E12085C5D074}
private sub Run_VBUpdateItemName ( Name as variant , optional RowItem as object )
on error resume next
item.name = Name
' может не быть формы, если используем просто ActiveX
ParentForm.Caption = item.Name
item.Save
end sub



'Создать заявку из клиента
'{49EA5CBF-93CF-41A8-B1F1-E37FE4D59EA5}
private sub Run_VBNewZayavka ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKZ&quot;, &quot;Заявка &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKz_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKZ_DEF.Item(1)
 End If
 
 Set Obj.ClientFrom = RowItem.Application
 Obj.QueryDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Заявки&quot;
end sub



"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="vpnWFRtm_Param_" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="controlset"/><FormData Name=""><ControlData Name="pnlWFRtm_Param" ControlIndex="0" PROGID="VB.Frame"><Properties Name="Name" PropValue="pnlWFRtm_Param"/><Properties Name="visible" PropValue="True"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Width" PropValue="9000"/><Properties Name="Height" PropValue="6000"/><Properties Name="BorderStyle" PropValue="0"/><ControlData Name="gridWFRtm_Param" ControlIndex="0" PROGID="GridEx20.GridEX"><Properties Name="Name" PropValue="gridWFRtm_Param"/><Properties Name="DataMode" PropValue="99"/><Properties Name="AllowEdit" PropValue="False"/><Properties Name="AllowAddNew" PropValue="False"/><Properties Name="AllowDelete" PropValue="True"/><Properties Name="ColumnAutoResize" PropValue="False"/><Properties Name="AutomaticSort" PropValue="True"/><Properties Name="RecordNavigator" PropValue="False"/><Properties Name="SelectionStyle" PropValue="1"/><Properties Name="HideSelection" PropValue="2"/><Properties Name="TabKeyBehavior" PropValue="1"/><Properties Name="RecordNavigatorString" PropValue="Запись:|из"/><Properties Name="GroupByBoxInfoText" PropValue="Группировка"/><Properties Name="ItemCount" PropValue="0"/></ControlData><ControlData Name="cmdWFRtm_ParamAdd" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_ParamAdd"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="NEW.ico"/><Properties Name="ToolTipText" PropValue="Добавить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="75"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_ParamEdit" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_ParamEdit"/><Properties Name="Tag" PropValue="PROP.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Свойства"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="450"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_ParamDel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_ParamDel"/><Properties Name="Tag" PropValue="DELETE.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Удалить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="825"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_ParamRef" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_ParamRef"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="Refresh.ico"/><Properties Name="ToolTipText" PropValue="Обновить"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1200"/></ControlData><ControlData Name="cmdWFRtm_ParamPrn" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_ParamPrn"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="PrintPreview.ico"/><Properties Name="ToolTipText" PropValue="Печать"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1575"/></ControlData><ControlData Name="cmdWFRtm_ParamFnd" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_ParamFnd"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="find.ico"/><Properties Name="ToolTipText" PropValue="Поиск"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1950"/></ControlData></ControlData><ControlData Name="mnuPopupWFRtm_Param" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Меню для Параметры"/><Properties Name="Name" PropValue="mnuPopupWFRtm_Param"/><Properties Name="Visible" PropValue="False"/><ControlData Name="mnuWFRtm_ParamAdd" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Создать"/><Properties Name="Name" PropValue="mnuWFRtm_ParamAdd"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_ParamEdit" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Свойства"/><Properties Name="Name" PropValue="mnuWFRtm_ParamEdit"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_ParamDelete" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Удалить"/><Properties Name="Name" PropValue="mnuWFRtm_ParamDelete"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_ParamOpen" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Открыть"/><Properties Name="Name" PropValue="mnuWFRtm_ParamOpen"/></ControlData><ControlData Name="mnuWFRtm_ParamRef" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Обновить"/><Properties Name="Name" PropValue="mnuWFRtm_ParamRef"/></ControlData><ControlData Name="mnuWFRtm_ParamS1" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="-"/><Properties Name="Name" PropValue="mnuWFRtm_ParamS1"/></ControlData><ControlData Name="mnuWFRtm_ParamBuffer" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Буфер"/><Properties Name="Name" PropValue="mnuWFRtm_ParamBuffer"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><ControlData Name="mnuWFRtm_ParamCOPY" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Копировать"/><Properties Name="Name" PropValue="mnuWFRtm_ParamCOPY"/></ControlData><ControlData Name="mnuWFRtm_ParamCUT" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вырезать"/><Properties Name="Name" PropValue="mnuWFRtm_ParamCUT"/></ControlData><ControlData Name="mnuWFRtm_ParamPASTE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вставить"/><Properties Name="Name" PropValue="mnuWFRtm_ParamPASTE"/></ControlData><ControlData Name="mnuWFRtm_ParamCHANGE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Заменить"/><Properties Name="Name" PropValue="mnuWFRtm_ParamCHANGE"/></ControlData><ControlData Name="mnuWFRtm_ParamCLEAN" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Очистить"/><Properties Name="Name" PropValue="mnuWFRtm_ParamCLEAN"/></ControlData></ControlData><ControlData Name="mnuWFRtm_ParamPrn" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Печать"/><Properties Name="Name" PropValue="mnuWFRtm_ParamPrn"/></ControlData><ControlData Name="mnuWFRtm_ParamCfg" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Настроить"/><Properties Name="Name" PropValue="mnuWFRtm_ParamCfg"/></ControlData><ControlData Name="mnuWFRtm_ParamFind" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Поиск"/><Properties Name="Name" PropValue="mnuWFRtm_ParamFind"/></ControlData></ControlData><ControlData Name="menuTimerWFRtm_Param" ControlIndex="0" PROGID="VB.Timer"><Properties Name="Name" PropValue="menuTimerWFRtm_Param"/><Properties Name="Enabled" PropValue="False"/><Properties Name="Interval" PropValue="1"/></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="public Item as object
public ParentForm as Object
public ModalMode as boolean
private fndWFRtm_Param as object
private menuActionWFRtm_Param as string

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Private Sub cmdWFRtm_ParamCfg_Click()
  on error resume next
Dim jset As object 'MTZ_JSetup.Customizer
Set jset = CreateObject(&quot;MTZ_JSetup.Customizer&quot;)
jset.ShowSumary gridWFRtm_Param,&quot;gridWFRtm_Param&quot;
Set jset = Nothing
End Sub

Private Sub cmdWFRtm_ParamPrn_Click()
  on error resume next
Dim jset As object 'MTZ_JSetup.Customizer
Set jset = CreateObject(&quot;MTZ_JSetup.Customizer&quot;)
jset.Preview gridWFRtm_Param,&quot;Параметры&quot;
Set jset = Nothing
End Sub

Private Sub cmdWFRtm_ParamRef_Click()
  on error resume next
  item.WFRtm_Param.Refresh
  gridWFRtm_Param.itemCount = item.WFRtm_Param.count
  gridWFRtm_Param.Refetch
  gridWFRtm_Param.Refresh
End Sub
Private Sub cmdWFRtm_ParamAcc_Click()
On Error Resume Next
If gridWFRtm_Param.ItemCount = 0 Then Exit Sub
If gridWFRtm_Param.Row &gt; 0 Then
 If gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_Param.RowBookmark(gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row))
    Set u = Item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
    Item.Application.Manager.ShowSecurityDialog u
 End If
End If
End Sub
Private Sub cmdWFRtm_ParamEdit_Click()
  on error resume next
If gridWFRtm_Param.ItemCount = 0 Then Exit Sub
If gridWFRtm_Param.Row &gt; 0 then
 If gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row ) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_Param.RowBookmark(gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row))
    Set u = Item.FindRowObject(Right(bm, len(bm)-38), Left(bm, 38))
    Set frmWFRtm_Param_.Item = u
    again: frmWFRtm_Param_.NotFirstTime = False
    frmWFRtm_Param_.OnInit
    frmWFRtm_Param_.Show vbModal
    If frmWFRtm_Param_.OK Then
    on error resume next
    err.clear
    u.save
    if err.number &lt;&gt;0 then 
      msgbox err.description,vbokonly+vbExclamation,&quot;Изменение&quot;
      goto again
    end if 
    gridWFRtm_Param.RefreshRowBookmark bm
    else
     u.refresh
    End If
 End If
End If
End Sub
Private Sub cmdWFRtm_ParamDel_Click()
  on error resume next
  gridWFRtm_Param.Delete
End Sub
Private Sub cmdWFRtm_ParamAdd_Click()
  on error resume next
      Dim u As Object
      Set u = Item.WFRtm_Param.Add()

      Set frmWFRtm_Param_.Item = u
      again: frmWFRtm_Param_.NotFirstTime = False
      frmWFRtm_Param_.OnInit
      frmWFRtm_Param_.Show vbModal
      If frmWFRtm_Param_.OK Then
        err.clear
        u.save
        if err.number &lt;&gt;0 then 
          msgbox err.description,vbokonly+vbExclamation,&quot;Создание&quot;
          goto again
        end if 
        gridWFRtm_Param.ItemCount = Item.WFRtm_Param.Count
        gridWFRtm_Param.Refresh
        gridWFRtm_Param.RefreshGroups
        gridWFRtm_Param.Refreshsort
        gridWFRtm_Param.MoveToBookmark u.ID &amp; &quot;WFRtm_Param&quot;
      Else
        Item.WFRtm_Param.Delete u.ID
        Item.WFRtm_Param.Remove u.ID
      End If
      Exit Sub
bye:
   MsgBox Err.Description,vbokonly+vbExclamation,&quot;Создание&quot;
End Sub
Private Sub cmdWFRtm_ParamFnd_Click()
  on error resume next
  fndWFRtm_Param.ShowForm
End Sub
Private Sub cmdWFRtm_ParamRun_Click()
  on error resume next
  gridWFRtm_Param_DblClick
End Sub
Private Sub gridWFRtm_Param_UnboundReadData(ByVal RowIndex As Long, ByVal Bookmark As Variant, ByVal Values As GridEX20.JSRowData)
on error resume next
Item.WFRtm_Param.LoadRow gridWFRtm_Param, RowIndex, Bookmark, Values
End Sub
Private Sub gridWFRtm_Param_BeforeDeleteEX(ByVal RowIndex As Long, ByVal Bookmark As Variant, ByVal Cancel As GridEX20.JSRetBoolean)
  If gridWFRtm_Param.ItemCount = 0 Then Exit Sub
  Dim u As Object
  Set u = Item.FindRowObject(&quot;WFRtm_Param&quot;, Left(Bookmark, 38))
  If Not u Is Nothing Then
    on error resume next
    If MsgBox(&quot;Удалить элемент&quot; &amp; vbCrLf &amp; u.Brief &amp; vbcrlf &amp; &quot;?&quot;, vbYesNo + vbQuestion, &quot;Внимание&quot;) = vbYes Then
      on error goto bye
      u.parent.Delete u.id
    Else
      Cancel = True
    End If
  End If
Exit Sub
bye:
   Cancel = True
   MsgBox Err.Description, vbOKOnly + vbExclamation, &quot;Удаление&quot;
End Sub

Private Sub gridWFRtm_Param_DblClick()
  cmdWFRtm_ParamEdit_Click
End Sub
Private Sub gridWFRtm_Param_KeyPress(KeyAscii As Integer)
  If gridWFRtm_Param.ItemCount = 0 Then Exit Sub
  On Error Resume Next
  fndWFRtm_Param.FindOnPress KeyAscii
End Sub

Private Sub gridWFRtm_Param_RowColChange(ByVal LastRow As Long, ByVal LastCol As Integer)
 ON ERROR RESUME NEXT
If LastRow &lt;&gt; gridWFRtm_Param.Row And LastRow &gt; 0 Then
  gridWFRtm_Param.GetRowData(LastRow).RowStyle = &quot;Default&quot;
  gridWFRtm_Param.GetRowData(gridWFRtm_Param.Row).RowStyle = &quot;SelectedRow&quot;
End If
End Sub
Private Sub mnuWFRtm_ParamPASTE_Click()
On Error Resume Next
    Dim u As Object
    Set u = item.WFRtm_Param.Add()
    If GetFromBuffer(u) Then
      gridWFRtm_Param.ItemCount = u.parent.Count
    End If
End Sub
'Hidden GRID Setup...
private sub gridWFRtm_Param_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim ShiftDown, AltDown, CtrlDown
    ShiftDown = (Shift And vbShiftMask) &gt; 0
    AltDown = (Shift And vbAltMask) &gt; 0
    CtrlDown = (Shift And vbCtrlMask) &gt; 0
    If KeyCode = vbKeyF4 Then
        If ShiftDown And CtrlDown And AltDown Then
            cmdWFRtm_ParamCfg_Click
        End If
    End If
end sub

private sub gridWFRtm_Param_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
  If Button = 2 And Shift = 0 Then
  on error resume next
  PopupMenu mnuPopupWFRtm_Param
End If
end sub
private sub mnuWFRtm_ParamAdd_click()
   menuActionWFRtm_Param =&quot;ADD&quot;
   menuTimerWFRtm_Param.enabled = true
end sub
private sub mnuWFRtm_ParamEdit_click()
   menuActionWFRtm_Param =&quot;EDIT&quot;
   menuTimerWFRtm_Param.enabled = true
end sub
private sub mnuWFRtm_ParamDelete_click()
   menuActionWFRtm_Param =&quot;DEL&quot;
   menuTimerWFRtm_Param.enabled = true
end sub
private sub mnuWFRtm_ParamOpen_click()
   menuActionWFRtm_Param =&quot;RUN&quot;
   menuTimerWFRtm_Param.enabled = true
end sub
private sub mnuWFRtm_ParamRef_click()
   menuActionWFRtm_Param =&quot;REF&quot;
   menuTimerWFRtm_Param.enabled = true
end sub
  Private Sub mnuWFRtm_ParamCOPY_Click()
    On Error Resume Next
    If gridWFRtm_Param.ItemCount = 0 Then Exit Sub
    If gridWFRtm_Param.Row &gt; 0 Then
     If gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row) &gt; 0 Then
        Dim u As Object
        Dim bm
        bm = gridWFRtm_Param.RowBookmark(gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row))
        Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
        SaveToBuffer u
      End If
    End If
  End Sub
  Private Sub mnuWFRtm_ParamCUT_Click()
    On Error Resume Next
    If gridWFRtm_Param.ItemCount = 0 Then Exit Sub
    If gridWFRtm_Param.Row &gt; 0 Then
     If gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row) &gt; 0 Then
        Dim u As Object
        Dim bm
        bm = gridWFRtm_Param.RowBookmark(gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row))
        Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
        SaveToBuffer u
        SET BM = u.parent
        u.parent.Delete u.ID
        gridWFRtm_Param.ITEMCOUNT = BM.COUNT
      End If
    End If
  End Sub
Private Sub mnuWFRtm_ParamCHANGE_Click()
  On Error Resume Next
  If gridWFRtm_Param.ItemCount = 0 Then Exit Sub
  If gridWFRtm_Param.Row &gt; 0 Then
   If gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_Param.RowBookmark(gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row))
    Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
    If GetFromBuffer(u) Then
      gridWFRtm_Param.ItemCount = u.parent.Count
      gridWFRtm_Param.RefreshRowIndex gridWFRtm_Param.RowIndex(gridWFRtm_Param.Row)
    End If
   End If
  End If
End Sub
  Private Sub mnuWFRtm_ParamCLEAN_Click()
    item.Manager.ClearBuffer &quot; &amp; p.name &amp; &quot;
  End Sub
private sub mnuWFRtm_ParamPrn_click()
   menuActionWFRtm_Param =&quot;PRN&quot;
   menuTimerWFRtm_Param.enabled = true
end sub
private sub mnuWFRtm_ParamCfg_click()
   menuActionWFRtm_Param =&quot;CFG&quot;
   menuTimerWFRtm_Param.enabled = true
end sub
private sub mnuWFRtm_ParamFind_click()
   menuActionWFRtm_Param =&quot;FND&quot;
   menuTimerWFRtm_Param.enabled = true
end sub
private sub mnuWFRtm_ParamAcc_click()
   menuActionWFRtm_Param =&quot;ACC&quot;
   menuTimerWFRtm_Param.enabled = true
end sub
private sub menuTimerWFRtm_Param_timer()
   menuTimerWFRtm_Param.enabled = false
   if menuActionWFRtm_Param =&quot;ADD&quot; then cmdWFRtm_ParamADD_CLick
   if menuActionWFRtm_Param =&quot;EDIT&quot; then cmdWFRtm_ParamEDIT_CLick
   if menuActionWFRtm_Param =&quot;DEL&quot; then cmdWFRtm_ParamDEL_CLick
   if menuActionWFRtm_Param =&quot;RUN&quot; then cmdWFRtm_ParamRUN_CLick
   if menuActionWFRtm_Param =&quot;REF&quot; then cmdWFRtm_ParamREF_CLick
   if menuActionWFRtm_Param =&quot;PRN&quot; then cmdWFRtm_ParamPRN_CLick
   if menuActionWFRtm_Param =&quot;CFG&quot; then cmdWFRtm_ParamCFG_CLick
   if menuActionWFRtm_Param =&quot;FND&quot; then cmdWFRtm_ParamFND_CLick
   if menuActionWFRtm_Param =&quot;ACC&quot; then cmdWFRtm_ParamACC_CLick
   menuActionWFRtm_Param =&quot;&quot;
end sub
public sub OnInit(aItem as object, optional pForm as object = nothing)
 on error resume next
 set Item =aItem
 set ParentForm = pForm

  LoadBtnPictures cmdWFRtm_ParamAdd,cmdWFRtm_ParamAdd.tag
  LoadBtnPictures cmdWFRtm_ParamEdit,cmdWFRtm_ParamEdit.tag
  LoadBtnPictures cmdWFRtm_ParamDel,cmdWFRtm_ParamDel.tag
  LoadBtnPictures cmdWFRtm_ParamRef,cmdWFRtm_ParamRef.tag
  LoadBtnPictures cmdWFRtm_ParamPrn,cmdWFRtm_ParamPrn.tag
  LoadBtnPictures cmdWFRtm_ParamFnd,cmdWFRtm_ParamFnd.tag
  item.WFRtm_Param.PrepareGrid gridWFRtm_Param
  LoadGridLayout gridWFRtm_Param
  Set fndWFRtm_Param = Nothing
  On Error Resume Next
  Set fndWFRtm_Param = CreateObject(&quot;MTZ_JSetup.GridFinder&quot;)
  fndWFRtm_Param.Init gridWFRtm_Param
end sub
private sub OnTabClick()

      gridWFRtm_Param.Top = 40 * Screen.TwipsPerPixelX
      gridWFRtm_Param.Left = 5 * Screen.TwipsPerPixelX
      gridWFRtm_Param.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      gridWFRtm_Param.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
      gridWFRtm_Param.Top = 40 * Screen.TwipsPerPixelX
      gridWFRtm_Param.Left = 5 * Screen.TwipsPerPixelX
      gridWFRtm_Param.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      gridWFRtm_Param.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
end sub
public sub OnClick(aItem as object, optional pForm as object = nothing)
  on error resume next
  set Item =aItem
  set ParentForm = pForm
  OnTabClick
end sub
public sub OnSave()
  
end sub
public function IsChanged() as boolean
  dim m_IsChanged as boolean
  on error resume next
  
  IsChanged = m_IsChanged
end function
private sub UserControl_Resize()
  On Error Resume Next
  pnlWFRtm_Param.Move 0, 0, UserControl.Width, UserControl.Height
  OnTabClick
end sub
public sub CloseClass()
  On Error Resume Next
  set parentForm = nothing
  set item = nothing
  set fndWFRtm_Param = nothing
end sub
private sub UserControl_Terminate()
  On Error Resume Next
  CloseClass
end sub

'переместить клиента в каталоге
'{5CB1388C-1623-4B36-A775-00B70BEE27AF}
private sub Run_VBMoveVRC ( VRCATFolder as variant , optional RowItem as object )
'do nothing
end sub



'Передать права объекту контактное лицо от объекта клиент
'{79DED4FD-045C-45F8-AC79-2E5A3D956D97}
private sub Run_VBMigrateRight ( optional RowItem as object )
'Migrate security
On Error GoTo bye
  If RowItem.Person Is Nothing Then Exit Sub

  RowItem.Person.Secure Item.SecureStyleID
  RowItem.Person.propagate
bye:
  Exit Sub
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Применить стиль защиты для объекта Предназначен для каталога клиентов
'{31EC6CF7-8DBD-4EFE-BF12-4D168F653D34}
private sub Run_VBApplySecurity ( optional RowItem as object )
'Apply security
On Error GoTo bye
  If RowItem.Client Is Nothing Then Exit Sub
  If RowItem.Parent.Parent.AccessLevel Is Nothing Then Exit Sub
  RowItem.Client.Secure RowItem.Parent.Parent.AccessLevel.id
  RowItem.Client.propagate
  Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Создание отчета из разных карточек
'{5B8FB7B9-D8B1-4CA0-90AF-55F83D1A6E5D}
private sub Run_VBMakeReport ( ReportType as variant , optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 'ID = CreateGUID2
 'Call RowItem.Application.Manager.NewInstance(ID, &quot;VRRPT&quot;, &quot;Отчет &quot; &amp; Date)
 'Set RowItem.Report = RowItem.Application.Manager.GetInstanceObject(ID)
 If RowItem.Report.VRRPT_MAIN.Count = 0 Then
  Set Obj = RowItem.Report.VRRPT_MAIN.Add
 Else
  Set Obj = RowItem.Report.VRRPT_MAIN.Item(1)
 End If
 
 Set Obj.Author = RowItem.Application.FindRowObject(&quot;Users&quot;, Item.Application.MTZSession.GetSessionUserID())
 Obj.TheDate = Date
 
 If ReportType = &quot;CLNT&quot; Then
   Set Obj.Client = RowItem.Application
 End If
 If ReportType = &quot;PRJ&quot; Then
   Set Obj.Project = RowItem.Application
 End If
 If ReportType = &quot;CONT&quot; Then
   Set Obj.Contract = RowItem.Application
 End If
 If ReportType = &quot;PERS&quot; Then
   Set Obj.Person = RowItem.Application
 End If
 
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание отчета&quot;
end sub



'Создать новую оплату из клиента
'{42A1A436-8AA2-4F1F-999B-6680DFF514DE}
private sub Run_VBNewPayIn ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKP&quot;, &quot;Платеж &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKP_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKP_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKP_DEF.Item(1)
 End If
 
 Set Obj.FromClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'Создать новый платеж из клиента
'{2BB30818-90ED-4627-8ABB-85B3FBA46750}
private sub Run_VBNewPayOut ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKO&quot;, &quot;Оплата &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKO_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKO_DEF.Item(1)
 End If
 
 Set Obj.ToClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'открытие карточки по идентификатору
'{94E8F6DB-106A-44DC-9483-86C801798FF0}
private sub Run_VBOpenRef ( StartMode as variant ,ID as variant , optional RowItem as object )
on error resume next
If ID &lt;&gt; &quot;&quot; Then
    Dim Obj As Object
    Set Obj = item.Manager.GetInstanceObject(ID)
    If Not Obj Is Nothing Then
      Dim objGui As Object
      Set objGui =  item.Manager.GetInstanceGUI(Obj.ID)
      If objGui Is Nothing Then Exit Sub

       If StartMode = &quot;AUTO&quot; Then
        StartMode = &quot;&quot;
        dim i as long
        For i = 100 To 0 Step -10
          If Obj.MTZSession.CheckRight(Obj.SecureStyleid, Obj.TypeName &amp; &quot;:&quot; &amp; &quot;M&quot; &amp; i) Then
            StartMode = &quot;M&quot; &amp; i
            Exit For
          End If
        Next
       End If
      
      objGui.Show StartMode &amp; &quot;&quot;, Obj
      Set objGui = Nothing
    End If
  End If
  
end sub



'
'{069956DC-3305-45EF-9331-91CE323B5942}
private sub Run_WFDefName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Description
parentform.caption = item.name
Item.Save
end sub



'
'{D8914FB4-6B5D-491A-A72F-985617727583}
private sub Run_WFFuncName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Name
ParentForm.Caption = item.Name
Item.Save
end sub



'Изменить название объекта
'{4FB59D1A-0123-47D3-9F4F-E12085C5D074}
private sub Run_VBUpdateItemName ( Name as variant , optional RowItem as object )
on error resume next
item.name = Name
' может не быть формы, если используем просто ActiveX
ParentForm.Caption = item.Name
item.Save
end sub



'Создать заявку из клиента
'{49EA5CBF-93CF-41A8-B1F1-E37FE4D59EA5}
private sub Run_VBNewZayavka ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKZ&quot;, &quot;Заявка &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKz_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKZ_DEF.Item(1)
 End If
 
 Set Obj.ClientFrom = RowItem.Application
 Obj.QueryDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Заявки&quot;
end sub



"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="vpnWFRtm_Doc_" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="controlset"/><FormData Name=""><ControlData Name="pnlWFRtm_Doc" ControlIndex="0" PROGID="VB.Frame"><Properties Name="Name" PropValue="pnlWFRtm_Doc"/><Properties Name="visible" PropValue="True"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Width" PropValue="9000"/><Properties Name="Height" PropValue="6000"/><Properties Name="BorderStyle" PropValue="0"/><ControlData Name="gridWFRtm_Doc" ControlIndex="0" PROGID="GridEx20.GridEX"><Properties Name="Name" PropValue="gridWFRtm_Doc"/><Properties Name="DataMode" PropValue="99"/><Properties Name="AllowEdit" PropValue="False"/><Properties Name="AllowAddNew" PropValue="False"/><Properties Name="AllowDelete" PropValue="True"/><Properties Name="ColumnAutoResize" PropValue="False"/><Properties Name="AutomaticSort" PropValue="True"/><Properties Name="RecordNavigator" PropValue="False"/><Properties Name="SelectionStyle" PropValue="1"/><Properties Name="HideSelection" PropValue="2"/><Properties Name="TabKeyBehavior" PropValue="1"/><Properties Name="RecordNavigatorString" PropValue="Запись:|из"/><Properties Name="GroupByBoxInfoText" PropValue="Группировка"/><Properties Name="ItemCount" PropValue="0"/></ControlData><ControlData Name="cmdWFRtm_DocAdd" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_DocAdd"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="NEW.ico"/><Properties Name="ToolTipText" PropValue="Добавить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="75"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_DocEdit" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_DocEdit"/><Properties Name="Tag" PropValue="PROP.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Свойства"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="450"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_DocDel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_DocDel"/><Properties Name="Tag" PropValue="DELETE.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Удалить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="825"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRtm_DocRef" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_DocRef"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="Refresh.ico"/><Properties Name="ToolTipText" PropValue="Обновить"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1200"/></ControlData><ControlData Name="cmdWFRtm_DocPrn" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_DocPrn"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="PrintPreview.ico"/><Properties Name="ToolTipText" PropValue="Печать"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1575"/></ControlData><ControlData Name="cmdWFRtm_DocFnd" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRtm_DocFnd"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="find.ico"/><Properties Name="ToolTipText" PropValue="Поиск"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1950"/></ControlData></ControlData><ControlData Name="mnuPopupWFRtm_Doc" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Меню для Документы"/><Properties Name="Name" PropValue="mnuPopupWFRtm_Doc"/><Properties Name="Visible" PropValue="False"/><ControlData Name="mnuWFRtm_DocAdd" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Создать"/><Properties Name="Name" PropValue="mnuWFRtm_DocAdd"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_DocEdit" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Свойства"/><Properties Name="Name" PropValue="mnuWFRtm_DocEdit"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_DocDelete" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Удалить"/><Properties Name="Name" PropValue="mnuWFRtm_DocDelete"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRtm_DocOpen" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Открыть"/><Properties Name="Name" PropValue="mnuWFRtm_DocOpen"/></ControlData><ControlData Name="mnuWFRtm_DocRef" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Обновить"/><Properties Name="Name" PropValue="mnuWFRtm_DocRef"/></ControlData><ControlData Name="mnuWFRtm_DocS1" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="-"/><Properties Name="Name" PropValue="mnuWFRtm_DocS1"/></ControlData><ControlData Name="mnuWFRtm_DocBuffer" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Буфер"/><Properties Name="Name" PropValue="mnuWFRtm_DocBuffer"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><ControlData Name="mnuWFRtm_DocCOPY" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Копировать"/><Properties Name="Name" PropValue="mnuWFRtm_DocCOPY"/></ControlData><ControlData Name="mnuWFRtm_DocCUT" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вырезать"/><Properties Name="Name" PropValue="mnuWFRtm_DocCUT"/></ControlData><ControlData Name="mnuWFRtm_DocPASTE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вставить"/><Properties Name="Name" PropValue="mnuWFRtm_DocPASTE"/></ControlData><ControlData Name="mnuWFRtm_DocCHANGE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Заменить"/><Properties Name="Name" PropValue="mnuWFRtm_DocCHANGE"/></ControlData><ControlData Name="mnuWFRtm_DocCLEAN" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Очистить"/><Properties Name="Name" PropValue="mnuWFRtm_DocCLEAN"/></ControlData></ControlData><ControlData Name="mnuWFRtm_DocPrn" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Печать"/><Properties Name="Name" PropValue="mnuWFRtm_DocPrn"/></ControlData><ControlData Name="mnuWFRtm_DocCfg" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Настроить"/><Properties Name="Name" PropValue="mnuWFRtm_DocCfg"/></ControlData><ControlData Name="mnuWFRtm_DocFind" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Поиск"/><Properties Name="Name" PropValue="mnuWFRtm_DocFind"/></ControlData></ControlData><ControlData Name="menuTimerWFRtm_Doc" ControlIndex="0" PROGID="VB.Timer"><Properties Name="Name" PropValue="menuTimerWFRtm_Doc"/><Properties Name="Enabled" PropValue="False"/><Properties Name="Interval" PropValue="1"/></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="public Item as object
public ParentForm as Object
public ModalMode as boolean
private fndWFRtm_Doc as object
private menuActionWFRtm_Doc as string

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Private Sub cmdWFRtm_DocCfg_Click()
  on error resume next
Dim jset As object 'MTZ_JSetup.Customizer
Set jset = CreateObject(&quot;MTZ_JSetup.Customizer&quot;)
jset.ShowSumary gridWFRtm_Doc,&quot;gridWFRtm_Doc&quot;
Set jset = Nothing
End Sub

Private Sub cmdWFRtm_DocPrn_Click()
  on error resume next
Dim jset As object 'MTZ_JSetup.Customizer
Set jset = CreateObject(&quot;MTZ_JSetup.Customizer&quot;)
jset.Preview gridWFRtm_Doc,&quot;Документы&quot;
Set jset = Nothing
End Sub

Private Sub cmdWFRtm_DocRef_Click()
  on error resume next
  item.WFRtm_Doc.Refresh
  gridWFRtm_Doc.itemCount = item.WFRtm_Doc.count
  gridWFRtm_Doc.Refetch
  gridWFRtm_Doc.Refresh
End Sub
Private Sub cmdWFRtm_DocAcc_Click()
On Error Resume Next
If gridWFRtm_Doc.ItemCount = 0 Then Exit Sub
If gridWFRtm_Doc.Row &gt; 0 Then
 If gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_Doc.RowBookmark(gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row))
    Set u = Item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
    Item.Application.Manager.ShowSecurityDialog u
 End If
End If
End Sub
Private Sub cmdWFRtm_DocEdit_Click()
  on error resume next
If gridWFRtm_Doc.ItemCount = 0 Then Exit Sub
If gridWFRtm_Doc.Row &gt; 0 then
 If gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row ) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_Doc.RowBookmark(gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row))
    Set u = Item.FindRowObject(Right(bm, len(bm)-38), Left(bm, 38))
    Set frmWFRtm_Doc_.Item = u
    again: frmWFRtm_Doc_.NotFirstTime = False
    frmWFRtm_Doc_.OnInit
    frmWFRtm_Doc_.Show vbModal
    If frmWFRtm_Doc_.OK Then
    on error resume next
    err.clear
    u.save
    if err.number &lt;&gt;0 then 
      msgbox err.description,vbokonly+vbExclamation,&quot;Изменение&quot;
      goto again
    end if 
    gridWFRtm_Doc.RefreshRowBookmark bm
    else
     u.refresh
    End If
 End If
End If
End Sub
Private Sub cmdWFRtm_DocDel_Click()
  on error resume next
  gridWFRtm_Doc.Delete
End Sub
Private Sub cmdWFRtm_DocAdd_Click()
  on error resume next
      Dim u As Object
      Set u = Item.WFRtm_Doc.Add()

      Set frmWFRtm_Doc_.Item = u
      again: frmWFRtm_Doc_.NotFirstTime = False
      frmWFRtm_Doc_.OnInit
      frmWFRtm_Doc_.Show vbModal
      If frmWFRtm_Doc_.OK Then
        err.clear
        u.save
        if err.number &lt;&gt;0 then 
          msgbox err.description,vbokonly+vbExclamation,&quot;Создание&quot;
          goto again
        end if 
        gridWFRtm_Doc.ItemCount = Item.WFRtm_Doc.Count
        gridWFRtm_Doc.Refresh
        gridWFRtm_Doc.RefreshGroups
        gridWFRtm_Doc.Refreshsort
        gridWFRtm_Doc.MoveToBookmark u.ID &amp; &quot;WFRtm_Doc&quot;
      Else
        Item.WFRtm_Doc.Delete u.ID
        Item.WFRtm_Doc.Remove u.ID
      End If
      Exit Sub
bye:
   MsgBox Err.Description,vbokonly+vbExclamation,&quot;Создание&quot;
End Sub
Private Sub cmdWFRtm_DocFnd_Click()
  on error resume next
  fndWFRtm_Doc.ShowForm
End Sub
Private Sub cmdWFRtm_DocRun_Click()
  on error resume next
  gridWFRtm_Doc_DblClick
End Sub
Private Sub gridWFRtm_Doc_UnboundReadData(ByVal RowIndex As Long, ByVal Bookmark As Variant, ByVal Values As GridEX20.JSRowData)
on error resume next
Item.WFRtm_Doc.LoadRow gridWFRtm_Doc, RowIndex, Bookmark, Values
End Sub
Private Sub gridWFRtm_Doc_BeforeDeleteEX(ByVal RowIndex As Long, ByVal Bookmark As Variant, ByVal Cancel As GridEX20.JSRetBoolean)
  If gridWFRtm_Doc.ItemCount = 0 Then Exit Sub
  Dim u As Object
  Set u = Item.FindRowObject(&quot;WFRtm_Doc&quot;, Left(Bookmark, 38))
  If Not u Is Nothing Then
    on error resume next
    If MsgBox(&quot;Удалить элемент&quot; &amp; vbCrLf &amp; u.Brief &amp; vbcrlf &amp; &quot;?&quot;, vbYesNo + vbQuestion, &quot;Внимание&quot;) = vbYes Then
      on error goto bye
      u.parent.Delete u.id
    Else
      Cancel = True
    End If
  End If
Exit Sub
bye:
   Cancel = True
   MsgBox Err.Description, vbOKOnly + vbExclamation, &quot;Удаление&quot;
End Sub

Private Sub gridWFRtm_Doc_DblClick()
  cmdWFRtm_DocEdit_Click
End Sub
Private Sub gridWFRtm_Doc_KeyPress(KeyAscii As Integer)
  If gridWFRtm_Doc.ItemCount = 0 Then Exit Sub
  On Error Resume Next
  fndWFRtm_Doc.FindOnPress KeyAscii
End Sub

Private Sub gridWFRtm_Doc_RowColChange(ByVal LastRow As Long, ByVal LastCol As Integer)
 ON ERROR RESUME NEXT
If LastRow &lt;&gt; gridWFRtm_Doc.Row And LastRow &gt; 0 Then
  gridWFRtm_Doc.GetRowData(LastRow).RowStyle = &quot;Default&quot;
  gridWFRtm_Doc.GetRowData(gridWFRtm_Doc.Row).RowStyle = &quot;SelectedRow&quot;
End If
End Sub
Private Sub mnuWFRtm_DocPASTE_Click()
On Error Resume Next
    Dim u As Object
    Set u = item.WFRtm_Doc.Add()
    If GetFromBuffer(u) Then
      gridWFRtm_Doc.ItemCount = u.parent.Count
    End If
End Sub
'Hidden GRID Setup...
private sub gridWFRtm_Doc_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim ShiftDown, AltDown, CtrlDown
    ShiftDown = (Shift And vbShiftMask) &gt; 0
    AltDown = (Shift And vbAltMask) &gt; 0
    CtrlDown = (Shift And vbCtrlMask) &gt; 0
    If KeyCode = vbKeyF4 Then
        If ShiftDown And CtrlDown And AltDown Then
            cmdWFRtm_DocCfg_Click
        End If
    End If
end sub

private sub gridWFRtm_Doc_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
  If Button = 2 And Shift = 0 Then
  on error resume next
  PopupMenu mnuPopupWFRtm_Doc
End If
end sub
private sub mnuWFRtm_DocAdd_click()
   menuActionWFRtm_Doc =&quot;ADD&quot;
   menuTimerWFRtm_Doc.enabled = true
end sub
private sub mnuWFRtm_DocEdit_click()
   menuActionWFRtm_Doc =&quot;EDIT&quot;
   menuTimerWFRtm_Doc.enabled = true
end sub
private sub mnuWFRtm_DocDelete_click()
   menuActionWFRtm_Doc =&quot;DEL&quot;
   menuTimerWFRtm_Doc.enabled = true
end sub
private sub mnuWFRtm_DocOpen_click()
   menuActionWFRtm_Doc =&quot;RUN&quot;
   menuTimerWFRtm_Doc.enabled = true
end sub
private sub mnuWFRtm_DocRef_click()
   menuActionWFRtm_Doc =&quot;REF&quot;
   menuTimerWFRtm_Doc.enabled = true
end sub
  Private Sub mnuWFRtm_DocCOPY_Click()
    On Error Resume Next
    If gridWFRtm_Doc.ItemCount = 0 Then Exit Sub
    If gridWFRtm_Doc.Row &gt; 0 Then
     If gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row) &gt; 0 Then
        Dim u As Object
        Dim bm
        bm = gridWFRtm_Doc.RowBookmark(gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row))
        Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
        SaveToBuffer u
      End If
    End If
  End Sub
  Private Sub mnuWFRtm_DocCUT_Click()
    On Error Resume Next
    If gridWFRtm_Doc.ItemCount = 0 Then Exit Sub
    If gridWFRtm_Doc.Row &gt; 0 Then
     If gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row) &gt; 0 Then
        Dim u As Object
        Dim bm
        bm = gridWFRtm_Doc.RowBookmark(gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row))
        Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
        SaveToBuffer u
        SET BM = u.parent
        u.parent.Delete u.ID
        gridWFRtm_Doc.ITEMCOUNT = BM.COUNT
      End If
    End If
  End Sub
Private Sub mnuWFRtm_DocCHANGE_Click()
  On Error Resume Next
  If gridWFRtm_Doc.ItemCount = 0 Then Exit Sub
  If gridWFRtm_Doc.Row &gt; 0 Then
   If gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRtm_Doc.RowBookmark(gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row))
    Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
    If GetFromBuffer(u) Then
      gridWFRtm_Doc.ItemCount = u.parent.Count
      gridWFRtm_Doc.RefreshRowIndex gridWFRtm_Doc.RowIndex(gridWFRtm_Doc.Row)
    End If
   End If
  End If
End Sub
  Private Sub mnuWFRtm_DocCLEAN_Click()
    item.Manager.ClearBuffer &quot; &amp; p.name &amp; &quot;
  End Sub
private sub mnuWFRtm_DocPrn_click()
   menuActionWFRtm_Doc =&quot;PRN&quot;
   menuTimerWFRtm_Doc.enabled = true
end sub
private sub mnuWFRtm_DocCfg_click()
   menuActionWFRtm_Doc =&quot;CFG&quot;
   menuTimerWFRtm_Doc.enabled = true
end sub
private sub mnuWFRtm_DocFind_click()
   menuActionWFRtm_Doc =&quot;FND&quot;
   menuTimerWFRtm_Doc.enabled = true
end sub
private sub mnuWFRtm_DocAcc_click()
   menuActionWFRtm_Doc =&quot;ACC&quot;
   menuTimerWFRtm_Doc.enabled = true
end sub
private sub menuTimerWFRtm_Doc_timer()
   menuTimerWFRtm_Doc.enabled = false
   if menuActionWFRtm_Doc =&quot;ADD&quot; then cmdWFRtm_DocADD_CLick
   if menuActionWFRtm_Doc =&quot;EDIT&quot; then cmdWFRtm_DocEDIT_CLick
   if menuActionWFRtm_Doc =&quot;DEL&quot; then cmdWFRtm_DocDEL_CLick
   if menuActionWFRtm_Doc =&quot;RUN&quot; then cmdWFRtm_DocRUN_CLick
   if menuActionWFRtm_Doc =&quot;REF&quot; then cmdWFRtm_DocREF_CLick
   if menuActionWFRtm_Doc =&quot;PRN&quot; then cmdWFRtm_DocPRN_CLick
   if menuActionWFRtm_Doc =&quot;CFG&quot; then cmdWFRtm_DocCFG_CLick
   if menuActionWFRtm_Doc =&quot;FND&quot; then cmdWFRtm_DocFND_CLick
   if menuActionWFRtm_Doc =&quot;ACC&quot; then cmdWFRtm_DocACC_CLick
   menuActionWFRtm_Doc =&quot;&quot;
end sub
public sub OnInit(aItem as object, optional pForm as object = nothing)
 on error resume next
 set Item =aItem
 set ParentForm = pForm

  LoadBtnPictures cmdWFRtm_DocAdd,cmdWFRtm_DocAdd.tag
  LoadBtnPictures cmdWFRtm_DocEdit,cmdWFRtm_DocEdit.tag
  LoadBtnPictures cmdWFRtm_DocDel,cmdWFRtm_DocDel.tag
  LoadBtnPictures cmdWFRtm_DocRef,cmdWFRtm_DocRef.tag
  LoadBtnPictures cmdWFRtm_DocPrn,cmdWFRtm_DocPrn.tag
  LoadBtnPictures cmdWFRtm_DocFnd,cmdWFRtm_DocFnd.tag
  item.WFRtm_Doc.PrepareGrid gridWFRtm_Doc
  LoadGridLayout gridWFRtm_Doc
  Set fndWFRtm_Doc = Nothing
  On Error Resume Next
  Set fndWFRtm_Doc = CreateObject(&quot;MTZ_JSetup.GridFinder&quot;)
  fndWFRtm_Doc.Init gridWFRtm_Doc
end sub
private sub OnTabClick()

      gridWFRtm_Doc.Top = 40 * Screen.TwipsPerPixelX
      gridWFRtm_Doc.Left = 5 * Screen.TwipsPerPixelX
      gridWFRtm_Doc.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      gridWFRtm_Doc.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
      gridWFRtm_Doc.Top = 40 * Screen.TwipsPerPixelX
      gridWFRtm_Doc.Left = 5 * Screen.TwipsPerPixelX
      gridWFRtm_Doc.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      gridWFRtm_Doc.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
end sub
public sub OnClick(aItem as object, optional pForm as object = nothing)
  on error resume next
  set Item =aItem
  set ParentForm = pForm
  OnTabClick
end sub
public sub OnSave()
  
end sub
public function IsChanged() as boolean
  dim m_IsChanged as boolean
  on error resume next
  
  IsChanged = m_IsChanged
end function
private sub UserControl_Resize()
  On Error Resume Next
  pnlWFRtm_Doc.Move 0, 0, UserControl.Width, UserControl.Height
  OnTabClick
end sub
public sub CloseClass()
  On Error Resume Next
  set parentForm = nothing
  set item = nothing
  set fndWFRtm_Doc = nothing
end sub
private sub UserControl_Terminate()
  On Error Resume Next
  CloseClass
end sub

'переместить клиента в каталоге
'{5CB1388C-1623-4B36-A775-00B70BEE27AF}
private sub Run_VBMoveVRC ( VRCATFolder as variant , optional RowItem as object )
'do nothing
end sub



'Передать права объекту контактное лицо от объекта клиент
'{79DED4FD-045C-45F8-AC79-2E5A3D956D97}
private sub Run_VBMigrateRight ( optional RowItem as object )
'Migrate security
On Error GoTo bye
  If RowItem.Person Is Nothing Then Exit Sub

  RowItem.Person.Secure Item.SecureStyleID
  RowItem.Person.propagate
bye:
  Exit Sub
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Применить стиль защиты для объекта Предназначен для каталога клиентов
'{31EC6CF7-8DBD-4EFE-BF12-4D168F653D34}
private sub Run_VBApplySecurity ( optional RowItem as object )
'Apply security
On Error GoTo bye
  If RowItem.Client Is Nothing Then Exit Sub
  If RowItem.Parent.Parent.AccessLevel Is Nothing Then Exit Sub
  RowItem.Client.Secure RowItem.Parent.Parent.AccessLevel.id
  RowItem.Client.propagate
  Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Создание отчета из разных карточек
'{5B8FB7B9-D8B1-4CA0-90AF-55F83D1A6E5D}
private sub Run_VBMakeReport ( ReportType as variant , optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 'ID = CreateGUID2
 'Call RowItem.Application.Manager.NewInstance(ID, &quot;VRRPT&quot;, &quot;Отчет &quot; &amp; Date)
 'Set RowItem.Report = RowItem.Application.Manager.GetInstanceObject(ID)
 If RowItem.Report.VRRPT_MAIN.Count = 0 Then
  Set Obj = RowItem.Report.VRRPT_MAIN.Add
 Else
  Set Obj = RowItem.Report.VRRPT_MAIN.Item(1)
 End If
 
 Set Obj.Author = RowItem.Application.FindRowObject(&quot;Users&quot;, Item.Application.MTZSession.GetSessionUserID())
 Obj.TheDate = Date
 
 If ReportType = &quot;CLNT&quot; Then
   Set Obj.Client = RowItem.Application
 End If
 If ReportType = &quot;PRJ&quot; Then
   Set Obj.Project = RowItem.Application
 End If
 If ReportType = &quot;CONT&quot; Then
   Set Obj.Contract = RowItem.Application
 End If
 If ReportType = &quot;PERS&quot; Then
   Set Obj.Person = RowItem.Application
 End If
 
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание отчета&quot;
end sub



'Создать новую оплату из клиента
'{42A1A436-8AA2-4F1F-999B-6680DFF514DE}
private sub Run_VBNewPayIn ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKP&quot;, &quot;Платеж &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKP_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKP_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKP_DEF.Item(1)
 End If
 
 Set Obj.FromClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'Создать новый платеж из клиента
'{2BB30818-90ED-4627-8ABB-85B3FBA46750}
private sub Run_VBNewPayOut ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKO&quot;, &quot;Оплата &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKO_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKO_DEF.Item(1)
 End If
 
 Set Obj.ToClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'открытие карточки по идентификатору
'{94E8F6DB-106A-44DC-9483-86C801798FF0}
private sub Run_VBOpenRef ( StartMode as variant ,ID as variant , optional RowItem as object )
on error resume next
If ID &lt;&gt; &quot;&quot; Then
    Dim Obj As Object
    Set Obj = item.Manager.GetInstanceObject(ID)
    If Not Obj Is Nothing Then
      Dim objGui As Object
      Set objGui =  item.Manager.GetInstanceGUI(Obj.ID)
      If objGui Is Nothing Then Exit Sub

       If StartMode = &quot;AUTO&quot; Then
        StartMode = &quot;&quot;
        dim i as long
        For i = 100 To 0 Step -10
          If Obj.MTZSession.CheckRight(Obj.SecureStyleid, Obj.TypeName &amp; &quot;:&quot; &amp; &quot;M&quot; &amp; i) Then
            StartMode = &quot;M&quot; &amp; i
            Exit For
          End If
        Next
       End If
      
      objGui.Show StartMode &amp; &quot;&quot;, Obj
      Set objGui = Nothing
    End If
  End If
  
end sub



'
'{069956DC-3305-45EF-9331-91CE323B5942}
private sub Run_WFDefName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Description
parentform.caption = item.name
Item.Save
end sub



'
'{D8914FB4-6B5D-491A-A72F-985617727583}
private sub Run_WFFuncName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Name
ParentForm.Caption = item.Name
Item.Save
end sub



'Изменить название объекта
'{4FB59D1A-0123-47D3-9F4F-E12085C5D074}
private sub Run_VBUpdateItemName ( Name as variant , optional RowItem as object )
on error resume next
item.name = Name
' может не быть формы, если используем просто ActiveX
ParentForm.Caption = item.Name
item.Save
end sub



'Создать заявку из клиента
'{49EA5CBF-93CF-41A8-B1F1-E37FE4D59EA5}
private sub Run_VBNewZayavka ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKZ&quot;, &quot;Заявка &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKz_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKZ_DEF.Item(1)
 End If
 
 Set Obj.ClientFrom = RowItem.Application
 Obj.QueryDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Заявки&quot;
end sub



"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="vpnWFRTM_SUBPROCESS_" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="controlset"/><FormData Name=""><ControlData Name="pnlWFRTM_SUBPROCESS" ControlIndex="0" PROGID="VB.Frame"><Properties Name="Name" PropValue="pnlWFRTM_SUBPROCESS"/><Properties Name="visible" PropValue="True"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Width" PropValue="9000"/><Properties Name="Height" PropValue="6000"/><Properties Name="BorderStyle" PropValue="0"/><ControlData Name="gridWFRTM_SUBPROCESS" ControlIndex="0" PROGID="GridEx20.GridEX"><Properties Name="Name" PropValue="gridWFRTM_SUBPROCESS"/><Properties Name="DataMode" PropValue="99"/><Properties Name="AllowEdit" PropValue="False"/><Properties Name="AllowAddNew" PropValue="False"/><Properties Name="AllowDelete" PropValue="True"/><Properties Name="ColumnAutoResize" PropValue="False"/><Properties Name="AutomaticSort" PropValue="True"/><Properties Name="RecordNavigator" PropValue="False"/><Properties Name="SelectionStyle" PropValue="1"/><Properties Name="HideSelection" PropValue="2"/><Properties Name="TabKeyBehavior" PropValue="1"/><Properties Name="RecordNavigatorString" PropValue="Запись:|из"/><Properties Name="GroupByBoxInfoText" PropValue="Группировка"/><Properties Name="ItemCount" PropValue="0"/></ControlData><ControlData Name="cmdWFRTM_SUBPROCESSAdd" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRTM_SUBPROCESSAdd"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="NEW.ico"/><Properties Name="ToolTipText" PropValue="Добавить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="75"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRTM_SUBPROCESSEdit" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRTM_SUBPROCESSEdit"/><Properties Name="Tag" PropValue="PROP.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Свойства"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="450"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRTM_SUBPROCESSDel" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRTM_SUBPROCESSDel"/><Properties Name="Tag" PropValue="DELETE.ico"/><Properties Name="Caption" PropValue=""/><Properties Name="ToolTipText" PropValue="Удалить"/><Properties Name="Style" PropValue="1"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="825"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="cmdWFRTM_SUBPROCESSRef" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRTM_SUBPROCESSRef"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="Refresh.ico"/><Properties Name="ToolTipText" PropValue="Обновить"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1200"/></ControlData><ControlData Name="cmdWFRTM_SUBPROCESSPrn" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRTM_SUBPROCESSPrn"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="PrintPreview.ico"/><Properties Name="ToolTipText" PropValue="Печать"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1575"/></ControlData><ControlData Name="cmdWFRTM_SUBPROCESSFnd" ControlIndex="0" PROGID="VB.CommandButton"><Properties Name="Name" PropValue="cmdWFRTM_SUBPROCESSFnd"/><Properties Name="Caption" PropValue=""/><Properties Name="Tag" PropValue="find.ico"/><Properties Name="ToolTipText" PropValue="Поиск"/><Properties Name="Style" PropValue="1"/><Properties Name="UseMaskColor" PropValue="True"/><Properties Name="Height" PropValue="330"/><Properties Name="Width" PropValue="330"/><Properties Name="Top" PropValue="30"/><Properties Name="Left" PropValue="1950"/></ControlData></ControlData><ControlData Name="mnuPopupWFRTM_SUBPROCESS" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Меню для Подпроцессы"/><Properties Name="Name" PropValue="mnuPopupWFRTM_SUBPROCESS"/><Properties Name="Visible" PropValue="False"/><ControlData Name="mnuWFRTM_SUBPROCESSAdd" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Создать"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSAdd"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSEdit" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Свойства"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSEdit"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSDelete" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Удалить"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSDelete"/><Properties Name="Enabled" PropValue="True"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSOpen" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Открыть"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSOpen"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSRef" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Обновить"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSRef"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSS1" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="-"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSS1"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSBuffer" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Буфер"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSBuffer"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Enabled" PropValue="True"/><ControlData Name="mnuWFRTM_SUBPROCESSCOPY" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Копировать"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSCOPY"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSCUT" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вырезать"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSCUT"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSPASTE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Вставить"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSPASTE"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSCHANGE" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Заменить"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSCHANGE"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSCLEAN" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Очистить"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSCLEAN"/></ControlData></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSPrn" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Печать"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSPrn"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSCfg" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Настроить"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSCfg"/></ControlData><ControlData Name="mnuWFRTM_SUBPROCESSFind" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Поиск"/><Properties Name="Name" PropValue="mnuWFRTM_SUBPROCESSFind"/></ControlData></ControlData><ControlData Name="menuTimerWFRTM_SUBPROCESS" ControlIndex="0" PROGID="VB.Timer"><Properties Name="Name" PropValue="menuTimerWFRTM_SUBPROCESS"/><Properties Name="Enabled" PropValue="False"/><Properties Name="Interval" PropValue="1"/></ControlData></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="public Item as object
public ParentForm as Object
public ModalMode as boolean
private fndWFRTM_SUBPROCESS as object
private menuActionWFRTM_SUBPROCESS as string

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Private Sub cmdWFRTM_SUBPROCESSCfg_Click()
  on error resume next
Dim jset As object 'MTZ_JSetup.Customizer
Set jset = CreateObject(&quot;MTZ_JSetup.Customizer&quot;)
jset.ShowSumary gridWFRTM_SUBPROCESS,&quot;gridWFRTM_SUBPROCESS&quot;
Set jset = Nothing
End Sub

Private Sub cmdWFRTM_SUBPROCESSPrn_Click()
  on error resume next
Dim jset As object 'MTZ_JSetup.Customizer
Set jset = CreateObject(&quot;MTZ_JSetup.Customizer&quot;)
jset.Preview gridWFRTM_SUBPROCESS,&quot;Подпроцессы&quot;
Set jset = Nothing
End Sub

Private Sub cmdWFRTM_SUBPROCESSRef_Click()
  on error resume next
  item.WFRTM_SUBPROCESS.Refresh
  gridWFRTM_SUBPROCESS.itemCount = item.WFRTM_SUBPROCESS.count
  gridWFRTM_SUBPROCESS.Refetch
  gridWFRTM_SUBPROCESS.Refresh
End Sub
Private Sub cmdWFRTM_SUBPROCESSAcc_Click()
On Error Resume Next
If gridWFRTM_SUBPROCESS.ItemCount = 0 Then Exit Sub
If gridWFRTM_SUBPROCESS.Row &gt; 0 Then
 If gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRTM_SUBPROCESS.RowBookmark(gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row))
    Set u = Item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
    Item.Application.Manager.ShowSecurityDialog u
 End If
End If
End Sub
Private Sub cmdWFRTM_SUBPROCESSEdit_Click()
  on error resume next
If gridWFRTM_SUBPROCESS.ItemCount = 0 Then Exit Sub
If gridWFRTM_SUBPROCESS.Row &gt; 0 then
 If gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row ) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRTM_SUBPROCESS.RowBookmark(gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row))
    Set u = Item.FindRowObject(Right(bm, len(bm)-38), Left(bm, 38))
    Set frmWFRTM_SUBPROCESS_.Item = u
    again: frmWFRTM_SUBPROCESS_.NotFirstTime = False
    frmWFRTM_SUBPROCESS_.OnInit
    frmWFRTM_SUBPROCESS_.Show vbModal
    If frmWFRTM_SUBPROCESS_.OK Then
    on error resume next
    err.clear
    u.save
    if err.number &lt;&gt;0 then 
      msgbox err.description,vbokonly+vbExclamation,&quot;Изменение&quot;
      goto again
    end if 
    gridWFRTM_SUBPROCESS.RefreshRowBookmark bm
    else
     u.refresh
    End If
 End If
End If
End Sub
Private Sub cmdWFRTM_SUBPROCESSDel_Click()
  on error resume next
  gridWFRTM_SUBPROCESS.Delete
End Sub
Private Sub cmdWFRTM_SUBPROCESSAdd_Click()
  on error resume next
      Dim u As Object
      Set u = Item.WFRTM_SUBPROCESS.Add()

      Set frmWFRTM_SUBPROCESS_.Item = u
      again: frmWFRTM_SUBPROCESS_.NotFirstTime = False
      frmWFRTM_SUBPROCESS_.OnInit
      frmWFRTM_SUBPROCESS_.Show vbModal
      If frmWFRTM_SUBPROCESS_.OK Then
        err.clear
        u.save
        if err.number &lt;&gt;0 then 
          msgbox err.description,vbokonly+vbExclamation,&quot;Создание&quot;
          goto again
        end if 
        gridWFRTM_SUBPROCESS.ItemCount = Item.WFRTM_SUBPROCESS.Count
        gridWFRTM_SUBPROCESS.Refresh
        gridWFRTM_SUBPROCESS.RefreshGroups
        gridWFRTM_SUBPROCESS.Refreshsort
        gridWFRTM_SUBPROCESS.MoveToBookmark u.ID &amp; &quot;WFRTM_SUBPROCESS&quot;
      Else
        Item.WFRTM_SUBPROCESS.Delete u.ID
        Item.WFRTM_SUBPROCESS.Remove u.ID
      End If
      Exit Sub
bye:
   MsgBox Err.Description,vbokonly+vbExclamation,&quot;Создание&quot;
End Sub
Private Sub cmdWFRTM_SUBPROCESSFnd_Click()
  on error resume next
  fndWFRTM_SUBPROCESS.ShowForm
End Sub
Private Sub cmdWFRTM_SUBPROCESSRun_Click()
  on error resume next
  gridWFRTM_SUBPROCESS_DblClick
End Sub
Private Sub gridWFRTM_SUBPROCESS_UnboundReadData(ByVal RowIndex As Long, ByVal Bookmark As Variant, ByVal Values As GridEX20.JSRowData)
on error resume next
Item.WFRTM_SUBPROCESS.LoadRow gridWFRTM_SUBPROCESS, RowIndex, Bookmark, Values
End Sub
Private Sub gridWFRTM_SUBPROCESS_BeforeDeleteEX(ByVal RowIndex As Long, ByVal Bookmark As Variant, ByVal Cancel As GridEX20.JSRetBoolean)
  If gridWFRTM_SUBPROCESS.ItemCount = 0 Then Exit Sub
  Dim u As Object
  Set u = Item.FindRowObject(&quot;WFRTM_SUBPROCESS&quot;, Left(Bookmark, 38))
  If Not u Is Nothing Then
    on error resume next
    If MsgBox(&quot;Удалить элемент&quot; &amp; vbCrLf &amp; u.Brief &amp; vbcrlf &amp; &quot;?&quot;, vbYesNo + vbQuestion, &quot;Внимание&quot;) = vbYes Then
      on error goto bye
      u.parent.Delete u.id
    Else
      Cancel = True
    End If
  End If
Exit Sub
bye:
   Cancel = True
   MsgBox Err.Description, vbOKOnly + vbExclamation, &quot;Удаление&quot;
End Sub

Private Sub gridWFRTM_SUBPROCESS_DblClick()
  cmdWFRTM_SUBPROCESSEdit_Click
End Sub
Private Sub gridWFRTM_SUBPROCESS_KeyPress(KeyAscii As Integer)
  If gridWFRTM_SUBPROCESS.ItemCount = 0 Then Exit Sub
  On Error Resume Next
  fndWFRTM_SUBPROCESS.FindOnPress KeyAscii
End Sub

Private Sub gridWFRTM_SUBPROCESS_RowColChange(ByVal LastRow As Long, ByVal LastCol As Integer)
 ON ERROR RESUME NEXT
If LastRow &lt;&gt; gridWFRTM_SUBPROCESS.Row And LastRow &gt; 0 Then
  gridWFRTM_SUBPROCESS.GetRowData(LastRow).RowStyle = &quot;Default&quot;
  gridWFRTM_SUBPROCESS.GetRowData(gridWFRTM_SUBPROCESS.Row).RowStyle = &quot;SelectedRow&quot;
End If
End Sub
Private Sub mnuWFRTM_SUBPROCESSPASTE_Click()
On Error Resume Next
    Dim u As Object
    Set u = item.WFRTM_SUBPROCESS.Add()
    If GetFromBuffer(u) Then
      gridWFRTM_SUBPROCESS.ItemCount = u.parent.Count
    End If
End Sub
'Hidden GRID Setup...
private sub gridWFRTM_SUBPROCESS_KeyDown(KeyCode As Integer, Shift As Integer)
    Dim ShiftDown, AltDown, CtrlDown
    ShiftDown = (Shift And vbShiftMask) &gt; 0
    AltDown = (Shift And vbAltMask) &gt; 0
    CtrlDown = (Shift And vbCtrlMask) &gt; 0
    If KeyCode = vbKeyF4 Then
        If ShiftDown And CtrlDown And AltDown Then
            cmdWFRTM_SUBPROCESSCfg_Click
        End If
    End If
end sub

private sub gridWFRTM_SUBPROCESS_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
  If Button = 2 And Shift = 0 Then
  on error resume next
  PopupMenu mnuPopupWFRTM_SUBPROCESS
End If
end sub
private sub mnuWFRTM_SUBPROCESSAdd_click()
   menuActionWFRTM_SUBPROCESS =&quot;ADD&quot;
   menuTimerWFRTM_SUBPROCESS.enabled = true
end sub
private sub mnuWFRTM_SUBPROCESSEdit_click()
   menuActionWFRTM_SUBPROCESS =&quot;EDIT&quot;
   menuTimerWFRTM_SUBPROCESS.enabled = true
end sub
private sub mnuWFRTM_SUBPROCESSDelete_click()
   menuActionWFRTM_SUBPROCESS =&quot;DEL&quot;
   menuTimerWFRTM_SUBPROCESS.enabled = true
end sub
private sub mnuWFRTM_SUBPROCESSOpen_click()
   menuActionWFRTM_SUBPROCESS =&quot;RUN&quot;
   menuTimerWFRTM_SUBPROCESS.enabled = true
end sub
private sub mnuWFRTM_SUBPROCESSRef_click()
   menuActionWFRTM_SUBPROCESS =&quot;REF&quot;
   menuTimerWFRTM_SUBPROCESS.enabled = true
end sub
  Private Sub mnuWFRTM_SUBPROCESSCOPY_Click()
    On Error Resume Next
    If gridWFRTM_SUBPROCESS.ItemCount = 0 Then Exit Sub
    If gridWFRTM_SUBPROCESS.Row &gt; 0 Then
     If gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row) &gt; 0 Then
        Dim u As Object
        Dim bm
        bm = gridWFRTM_SUBPROCESS.RowBookmark(gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row))
        Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
        SaveToBuffer u
      End If
    End If
  End Sub
  Private Sub mnuWFRTM_SUBPROCESSCUT_Click()
    On Error Resume Next
    If gridWFRTM_SUBPROCESS.ItemCount = 0 Then Exit Sub
    If gridWFRTM_SUBPROCESS.Row &gt; 0 Then
     If gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row) &gt; 0 Then
        Dim u As Object
        Dim bm
        bm = gridWFRTM_SUBPROCESS.RowBookmark(gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row))
        Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
        SaveToBuffer u
        SET BM = u.parent
        u.parent.Delete u.ID
        gridWFRTM_SUBPROCESS.ITEMCOUNT = BM.COUNT
      End If
    End If
  End Sub
Private Sub mnuWFRTM_SUBPROCESSCHANGE_Click()
  On Error Resume Next
  If gridWFRTM_SUBPROCESS.ItemCount = 0 Then Exit Sub
  If gridWFRTM_SUBPROCESS.Row &gt; 0 Then
   If gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row) &gt; 0 Then
    Dim u As Object
    Dim bm
    bm = gridWFRTM_SUBPROCESS.RowBookmark(gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row))
    Set u = item.FindRowObject(Right(bm, Len(bm) - 38), Left(bm, 38))
    If GetFromBuffer(u) Then
      gridWFRTM_SUBPROCESS.ItemCount = u.parent.Count
      gridWFRTM_SUBPROCESS.RefreshRowIndex gridWFRTM_SUBPROCESS.RowIndex(gridWFRTM_SUBPROCESS.Row)
    End If
   End If
  End If
End Sub
  Private Sub mnuWFRTM_SUBPROCESSCLEAN_Click()
    item.Manager.ClearBuffer &quot; &amp; p.name &amp; &quot;
  End Sub
private sub mnuWFRTM_SUBPROCESSPrn_click()
   menuActionWFRTM_SUBPROCESS =&quot;PRN&quot;
   menuTimerWFRTM_SUBPROCESS.enabled = true
end sub
private sub mnuWFRTM_SUBPROCESSCfg_click()
   menuActionWFRTM_SUBPROCESS =&quot;CFG&quot;
   menuTimerWFRTM_SUBPROCESS.enabled = true
end sub
private sub mnuWFRTM_SUBPROCESSFind_click()
   menuActionWFRTM_SUBPROCESS =&quot;FND&quot;
   menuTimerWFRTM_SUBPROCESS.enabled = true
end sub
private sub mnuWFRTM_SUBPROCESSAcc_click()
   menuActionWFRTM_SUBPROCESS =&quot;ACC&quot;
   menuTimerWFRTM_SUBPROCESS.enabled = true
end sub
private sub menuTimerWFRTM_SUBPROCESS_timer()
   menuTimerWFRTM_SUBPROCESS.enabled = false
   if menuActionWFRTM_SUBPROCESS =&quot;ADD&quot; then cmdWFRTM_SUBPROCESSADD_CLick
   if menuActionWFRTM_SUBPROCESS =&quot;EDIT&quot; then cmdWFRTM_SUBPROCESSEDIT_CLick
   if menuActionWFRTM_SUBPROCESS =&quot;DEL&quot; then cmdWFRTM_SUBPROCESSDEL_CLick
   if menuActionWFRTM_SUBPROCESS =&quot;RUN&quot; then cmdWFRTM_SUBPROCESSRUN_CLick
   if menuActionWFRTM_SUBPROCESS =&quot;REF&quot; then cmdWFRTM_SUBPROCESSREF_CLick
   if menuActionWFRTM_SUBPROCESS =&quot;PRN&quot; then cmdWFRTM_SUBPROCESSPRN_CLick
   if menuActionWFRTM_SUBPROCESS =&quot;CFG&quot; then cmdWFRTM_SUBPROCESSCFG_CLick
   if menuActionWFRTM_SUBPROCESS =&quot;FND&quot; then cmdWFRTM_SUBPROCESSFND_CLick
   if menuActionWFRTM_SUBPROCESS =&quot;ACC&quot; then cmdWFRTM_SUBPROCESSACC_CLick
   menuActionWFRTM_SUBPROCESS =&quot;&quot;
end sub
public sub OnInit(aItem as object, optional pForm as object = nothing)
 on error resume next
 set Item =aItem
 set ParentForm = pForm

  LoadBtnPictures cmdWFRTM_SUBPROCESSAdd,cmdWFRTM_SUBPROCESSAdd.tag
  LoadBtnPictures cmdWFRTM_SUBPROCESSEdit,cmdWFRTM_SUBPROCESSEdit.tag
  LoadBtnPictures cmdWFRTM_SUBPROCESSDel,cmdWFRTM_SUBPROCESSDel.tag
  LoadBtnPictures cmdWFRTM_SUBPROCESSRef,cmdWFRTM_SUBPROCESSRef.tag
  LoadBtnPictures cmdWFRTM_SUBPROCESSPrn,cmdWFRTM_SUBPROCESSPrn.tag
  LoadBtnPictures cmdWFRTM_SUBPROCESSFnd,cmdWFRTM_SUBPROCESSFnd.tag
  item.WFRTM_SUBPROCESS.PrepareGrid gridWFRTM_SUBPROCESS
  LoadGridLayout gridWFRTM_SUBPROCESS
  Set fndWFRTM_SUBPROCESS = Nothing
  On Error Resume Next
  Set fndWFRTM_SUBPROCESS = CreateObject(&quot;MTZ_JSetup.GridFinder&quot;)
  fndWFRTM_SUBPROCESS.Init gridWFRTM_SUBPROCESS
end sub
private sub OnTabClick()

      gridWFRTM_SUBPROCESS.Top = 40 * Screen.TwipsPerPixelX
      gridWFRTM_SUBPROCESS.Left = 5 * Screen.TwipsPerPixelX
      gridWFRTM_SUBPROCESS.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      gridWFRTM_SUBPROCESS.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
      gridWFRTM_SUBPROCESS.Top = 40 * Screen.TwipsPerPixelX
      gridWFRTM_SUBPROCESS.Left = 5 * Screen.TwipsPerPixelX
      gridWFRTM_SUBPROCESS.Width = usercontrol.Width - 10 * Screen.TwipsPerPixelX
      gridWFRTM_SUBPROCESS.Height = usercontrol.Height - 45 * Screen.TwipsPerPixelY
end sub
public sub OnClick(aItem as object, optional pForm as object = nothing)
  on error resume next
  set Item =aItem
  set ParentForm = pForm
  OnTabClick
end sub
public sub OnSave()
  
end sub
public function IsChanged() as boolean
  dim m_IsChanged as boolean
  on error resume next
  
  IsChanged = m_IsChanged
end function
private sub UserControl_Resize()
  On Error Resume Next
  pnlWFRTM_SUBPROCESS.Move 0, 0, UserControl.Width, UserControl.Height
  OnTabClick
end sub
public sub CloseClass()
  On Error Resume Next
  set parentForm = nothing
  set item = nothing
  set fndWFRTM_SUBPROCESS = nothing
end sub
private sub UserControl_Terminate()
  On Error Resume Next
  CloseClass
end sub

'переместить клиента в каталоге
'{5CB1388C-1623-4B36-A775-00B70BEE27AF}
private sub Run_VBMoveVRC ( VRCATFolder as variant , optional RowItem as object )
'do nothing
end sub



'Передать права объекту контактное лицо от объекта клиент
'{79DED4FD-045C-45F8-AC79-2E5A3D956D97}
private sub Run_VBMigrateRight ( optional RowItem as object )
'Migrate security
On Error GoTo bye
  If RowItem.Person Is Nothing Then Exit Sub

  RowItem.Person.Secure Item.SecureStyleID
  RowItem.Person.propagate
bye:
  Exit Sub
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Применить стиль защиты для объекта Предназначен для каталога клиентов
'{31EC6CF7-8DBD-4EFE-BF12-4D168F653D34}
private sub Run_VBApplySecurity ( optional RowItem as object )
'Apply security
On Error GoTo bye
  If RowItem.Client Is Nothing Then Exit Sub
  If RowItem.Parent.Parent.AccessLevel Is Nothing Then Exit Sub
  RowItem.Client.Secure RowItem.Parent.Parent.AccessLevel.id
  RowItem.Client.propagate
  Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Создание отчета из разных карточек
'{5B8FB7B9-D8B1-4CA0-90AF-55F83D1A6E5D}
private sub Run_VBMakeReport ( ReportType as variant , optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 'ID = CreateGUID2
 'Call RowItem.Application.Manager.NewInstance(ID, &quot;VRRPT&quot;, &quot;Отчет &quot; &amp; Date)
 'Set RowItem.Report = RowItem.Application.Manager.GetInstanceObject(ID)
 If RowItem.Report.VRRPT_MAIN.Count = 0 Then
  Set Obj = RowItem.Report.VRRPT_MAIN.Add
 Else
  Set Obj = RowItem.Report.VRRPT_MAIN.Item(1)
 End If
 
 Set Obj.Author = RowItem.Application.FindRowObject(&quot;Users&quot;, Item.Application.MTZSession.GetSessionUserID())
 Obj.TheDate = Date
 
 If ReportType = &quot;CLNT&quot; Then
   Set Obj.Client = RowItem.Application
 End If
 If ReportType = &quot;PRJ&quot; Then
   Set Obj.Project = RowItem.Application
 End If
 If ReportType = &quot;CONT&quot; Then
   Set Obj.Contract = RowItem.Application
 End If
 If ReportType = &quot;PERS&quot; Then
   Set Obj.Person = RowItem.Application
 End If
 
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание отчета&quot;
end sub



'Создать новую оплату из клиента
'{42A1A436-8AA2-4F1F-999B-6680DFF514DE}
private sub Run_VBNewPayIn ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKP&quot;, &quot;Платеж &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKP_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKP_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKP_DEF.Item(1)
 End If
 
 Set Obj.FromClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'Создать новый платеж из клиента
'{2BB30818-90ED-4627-8ABB-85B3FBA46750}
private sub Run_VBNewPayOut ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKO&quot;, &quot;Оплата &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKO_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKO_DEF.Item(1)
 End If
 
 Set Obj.ToClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'открытие карточки по идентификатору
'{94E8F6DB-106A-44DC-9483-86C801798FF0}
private sub Run_VBOpenRef ( StartMode as variant ,ID as variant , optional RowItem as object )
on error resume next
If ID &lt;&gt; &quot;&quot; Then
    Dim Obj As Object
    Set Obj = item.Manager.GetInstanceObject(ID)
    If Not Obj Is Nothing Then
      Dim objGui As Object
      Set objGui =  item.Manager.GetInstanceGUI(Obj.ID)
      If objGui Is Nothing Then Exit Sub

       If StartMode = &quot;AUTO&quot; Then
        StartMode = &quot;&quot;
        dim i as long
        For i = 100 To 0 Step -10
          If Obj.MTZSession.CheckRight(Obj.SecureStyleid, Obj.TypeName &amp; &quot;:&quot; &amp; &quot;M&quot; &amp; i) Then
            StartMode = &quot;M&quot; &amp; i
            Exit For
          End If
        Next
       End If
      
      objGui.Show StartMode &amp; &quot;&quot;, Obj
      Set objGui = Nothing
    End If
  End If
  
end sub



'
'{069956DC-3305-45EF-9331-91CE323B5942}
private sub Run_WFDefName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Description
parentform.caption = item.name
Item.Save
end sub



'
'{D8914FB4-6B5D-491A-A72F-985617727583}
private sub Run_WFFuncName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Name
ParentForm.Caption = item.Name
Item.Save
end sub



'Изменить название объекта
'{4FB59D1A-0123-47D3-9F4F-E12085C5D074}
private sub Run_VBUpdateItemName ( Name as variant , optional RowItem as object )
on error resume next
item.name = Name
' может не быть формы, если используем просто ActiveX
ParentForm.Caption = item.Name
item.Save
end sub



'Создать заявку из клиента
'{49EA5CBF-93CF-41A8-B1F1-E37FE4D59EA5}
private sub Run_VBNewZayavka ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKZ&quot;, &quot;Заявка &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKz_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKZ_DEF.Item(1)
 End If
 
 Set Obj.ClientFrom = RowItem.Application
 Obj.QueryDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Заявки&quot;
end sub



"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="ctl_main" File=""><AttributeHolder Name="Type" Value="control"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="controlset"/><FormData Name=""><ControlData Name="mnuCtl" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="mnuCtl"/><Properties Name="Name" PropValue="mnuCtl"/><Properties Name="Visible" PropValue="False"/><ControlData Name="mnuSetup" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Настройка"/><Properties Name="Name" PropValue="mnuSetup"/><Properties Name="Enabled" PropValue="True"/><Properties Name="Visible" PropValue="True"/></ControlData></ControlData><ControlData Name="ts" ControlIndex="0" PROGID="mscomctllib.tabstrip"><Properties Name="Name" PropValue="ts"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Width" PropValue="1500"/><Properties Name="Height" PropValue="1500"/></ControlData><ControlData Name="pnlWFRtm_main" ControlIndex="0" PROGID="WFRtmGUI.vpnWFRtm_main_"><Properties Name="Name" PropValue="pnlWFRtm_main"/><Properties Name="visible" PropValue="False"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="1500"/><Properties Name="Width" PropValue="1500"/><Properties Name="Height" PropValue="1500"/></ControlData><ControlData Name="pnlWFRtm_func" ControlIndex="0" PROGID="WFRtmGUI.vpnWFRtm_func_"><Properties Name="Name" PropValue="pnlWFRtm_func"/><Properties Name="visible" PropValue="False"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="3000"/><Properties Name="Width" PropValue="1500"/><Properties Name="Height" PropValue="1500"/></ControlData><ControlData Name="pnlWFRtm_Pcomm" ControlIndex="0" PROGID="WFRtmGUI.vpnWFRtm_Pcomm_"><Properties Name="Name" PropValue="pnlWFRtm_Pcomm"/><Properties Name="visible" PropValue="False"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="4500"/><Properties Name="Width" PropValue="1500"/><Properties Name="Height" PropValue="1500"/></ControlData><ControlData Name="pnlWFRtm_Param" ControlIndex="0" PROGID="WFRtmGUI.vpnWFRtm_Param_"><Properties Name="Name" PropValue="pnlWFRtm_Param"/><Properties Name="visible" PropValue="False"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="6000"/><Properties Name="Width" PropValue="1500"/><Properties Name="Height" PropValue="1500"/></ControlData><ControlData Name="pnlWFRtm_Doc" ControlIndex="0" PROGID="WFRtmGUI.vpnWFRtm_Doc_"><Properties Name="Name" PropValue="pnlWFRtm_Doc"/><Properties Name="visible" PropValue="False"/><Properties Name="Top" PropValue="1500"/><Properties Name="Left" PropValue="0"/><Properties Name="Width" PropValue="1500"/><Properties Name="Height" PropValue="1500"/></ControlData><ControlData Name="pnlWFRTM_SUBPROCESS" ControlIndex="0" PROGID="WFRtmGUI.vpnWFRTM_SUBPROCESS_"><Properties Name="Name" PropValue="pnlWFRTM_SUBPROCESS"/><Properties Name="visible" PropValue="False"/><Properties Name="Top" PropValue="1500"/><Properties Name="Left" PropValue="1500"/><Properties Name="Width" PropValue="1500"/><Properties Name="Height" PropValue="1500"/></ControlData><PropertyData Name="tag" PropValue="Card.ICO"/><PropertyData Name="caption" PropValue="Процесс"/><PropertyData Name="ShowInTaskBar" PropValue="False"/></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="public Item as object
public Host as GUI
public ModalMode as boolean
public ParentForm as object
Private TSCustom As MTZ_CUSTOMTAB.TabStripCustomizer

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
Public Property Get PrefferedWidth() As Long
    PrefferedWidth = 0
End Property

Public Property Get PrefferedHeight() As Long
    PrefferedHeight = 0
End Property

Private Sub mnuSetup_Click()
TSCustom.Setup ts
End Sub
Private Sub ts_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
  If Button = 2 And Shift = 0 Then
    PopupMenu mnuCtl
  End If
End Sub
private sub ts_click()
  on error resume next
  pnlWFRTM_SUBPROCESS.Visible = False
  pnlWFRtm_Doc.Visible = False
  pnlWFRtm_Param.Visible = False
  pnlWFRtm_Pcomm.Visible = False
  pnlWFRtm_func.Visible = False
  pnlWFRtm_main.Visible = False

   Select Case ts.SelectedItem.Key
   Case &quot;WFRtm_main&quot;
     With pnlWFRtm_main
     .Top = ts.ClientTop
     .Left = ts.ClientLeft
     .Width = ts.ClientWidth
     .Height = ts.ClientHeight
     .Visible = True
     .ZOrder 0
     pnlWFRtm_main.OnClick item,parentform
     End With
   Case &quot;WFRtm_func&quot;
     With pnlWFRtm_func
     .Top = ts.ClientTop
     .Left = ts.ClientLeft
     .Width = ts.ClientWidth
     .Height = ts.ClientHeight
     .Visible = True
     .ZOrder 0
     pnlWFRtm_func.OnClick item,parentform
     End With
   Case &quot;WFRtm_Pcomm&quot;
     With pnlWFRtm_Pcomm
     .Top = ts.ClientTop
     .Left = ts.ClientLeft
     .Width = ts.ClientWidth
     .Height = ts.ClientHeight
     .Visible = True
     .ZOrder 0
     pnlWFRtm_Pcomm.OnClick item,parentform
     End With
   Case &quot;WFRtm_Param&quot;
     With pnlWFRtm_Param
     .Top = ts.ClientTop
     .Left = ts.ClientLeft
     .Width = ts.ClientWidth
     .Height = ts.ClientHeight
     .Visible = True
     .ZOrder 0
     pnlWFRtm_Param.OnClick item,parentform
     End With
   Case &quot;WFRtm_Doc&quot;
     With pnlWFRtm_Doc
     .Top = ts.ClientTop
     .Left = ts.ClientLeft
     .Width = ts.ClientWidth
     .Height = ts.ClientHeight
     .Visible = True
     .ZOrder 0
     pnlWFRtm_Doc.OnClick item,parentform
     End With
   Case &quot;WFRTM_SUBPROCESS&quot;
     With pnlWFRTM_SUBPROCESS
     .Top = ts.ClientTop
     .Left = ts.ClientLeft
     .Width = ts.ClientWidth
     .Height = ts.ClientHeight
     .Visible = True
     .ZOrder 0
     pnlWFRTM_SUBPROCESS.OnClick item,parentform
     End With
     End select
end sub
public sub Init( ObjItem as object, MyHost as GUI,aModalMode as boolean , aParentForm as object)
  on error resume next
 set Item = objItem
 set Host = myHost
 set ParentForm = aParentForm
 ModalMode = aModalMode
  Dim ff As Long, buf As String

ts.Tabs.Item(1).Caption = &quot;Общие данные&quot;
ts.Tabs.Item(1).key = &quot;WFRtm_main&quot;
pnlWFRtm_main.OnInit item, parentForm
call ts.Tabs.Add(, &quot;WFRtm_func&quot;, &quot;Функции&quot;)
pnlWFRtm_func.OnInit item, parentForm
call ts.Tabs.Add(, &quot;WFRtm_Pcomm&quot;, &quot;Комментарии&quot;)
pnlWFRtm_Pcomm.OnInit item, parentForm
call ts.Tabs.Add(, &quot;WFRtm_Param&quot;, &quot;Параметры&quot;)
pnlWFRtm_Param.OnInit item, parentForm
call ts.Tabs.Add(, &quot;WFRtm_Doc&quot;, &quot;Документы&quot;)
pnlWFRtm_Doc.OnInit item, parentForm
call ts.Tabs.Add(, &quot;WFRTM_SUBPROCESS&quot;, &quot;Подпроцессы&quot;)
pnlWFRTM_SUBPROCESS.OnInit item, parentForm
  Set TSCustom = New MTZ_CUSTOMTAB.TabStripCustomizer
  TSCustom.Init ts, &quot;WFRtm&quot;, &quot;ctl_main&quot;
  TSCustom.SetupFromRegistry ts
 ts_click
end sub
Private Sub UserControl_Terminate()
  on error resume next
  set item=nothing
  Set Host = Nothing
  Set ParentForm = Nothing
  Set TSCustom = Nothing
 pnlWFRtm_main.CloseClass
 pnlWFRtm_func.CloseClass
 pnlWFRtm_Pcomm.CloseClass
 pnlWFRtm_Param.CloseClass
 pnlWFRtm_Doc.CloseClass
 pnlWFRTM_SUBPROCESS.CloseClass
End Sub
public sub OnSave()
 pnlWFRtm_main.OnSave
 pnlWFRtm_func.OnSave
 pnlWFRtm_Pcomm.OnSave
 pnlWFRtm_Param.OnSave
 pnlWFRtm_Doc.OnSave
 pnlWFRTM_SUBPROCESS.OnSave
end sub
public function IsChanged() as boolean
  dim m_IsChanged as boolean
  on error resume next
m_IsChanged = m_IsChanged or pnlWFRtm_main.IsChanged
m_IsChanged = m_IsChanged or pnlWFRtm_func.IsChanged
m_IsChanged = m_IsChanged or pnlWFRtm_Pcomm.IsChanged
m_IsChanged = m_IsChanged or pnlWFRtm_Param.IsChanged
m_IsChanged = m_IsChanged or pnlWFRtm_Doc.IsChanged
m_IsChanged = m_IsChanged or pnlWFRTM_SUBPROCESS.IsChanged
  IsChanged = m_IsChanged
end function
private sub UserControl_Resize()
 on error resume next
ts.Top = 0
ts.Left = 0
ts.Width = usercontrol.Width
ts.Height = usercontrol.Height
ts_Click
end sub

'переместить клиента в каталоге
'{5CB1388C-1623-4B36-A775-00B70BEE27AF}
private sub Run_VBMoveVRC ( VRCATFolder as variant , optional RowItem as object )
'do nothing
end sub



'Передать права объекту контактное лицо от объекта клиент
'{79DED4FD-045C-45F8-AC79-2E5A3D956D97}
private sub Run_VBMigrateRight ( optional RowItem as object )
'Migrate security
On Error GoTo bye
  If RowItem.Person Is Nothing Then Exit Sub

  RowItem.Person.Secure Item.SecureStyleID
  RowItem.Person.propagate
bye:
  Exit Sub
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Применить стиль защиты для объекта Предназначен для каталога клиентов
'{31EC6CF7-8DBD-4EFE-BF12-4D168F653D34}
private sub Run_VBApplySecurity ( optional RowItem as object )
'Apply security
On Error GoTo bye
  If RowItem.Client Is Nothing Then Exit Sub
  If RowItem.Parent.Parent.AccessLevel Is Nothing Then Exit Sub
  RowItem.Client.Secure RowItem.Parent.Parent.AccessLevel.id
  RowItem.Client.propagate
  Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Усановка стиля защиты&quot;
end sub



'Создание отчета из разных карточек
'{5B8FB7B9-D8B1-4CA0-90AF-55F83D1A6E5D}
private sub Run_VBMakeReport ( ReportType as variant , optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 'ID = CreateGUID2
 'Call RowItem.Application.Manager.NewInstance(ID, &quot;VRRPT&quot;, &quot;Отчет &quot; &amp; Date)
 'Set RowItem.Report = RowItem.Application.Manager.GetInstanceObject(ID)
 If RowItem.Report.VRRPT_MAIN.Count = 0 Then
  Set Obj = RowItem.Report.VRRPT_MAIN.Add
 Else
  Set Obj = RowItem.Report.VRRPT_MAIN.Item(1)
 End If
 
 Set Obj.Author = RowItem.Application.FindRowObject(&quot;Users&quot;, Item.Application.MTZSession.GetSessionUserID())
 Obj.TheDate = Date
 
 If ReportType = &quot;CLNT&quot; Then
   Set Obj.Client = RowItem.Application
 End If
 If ReportType = &quot;PRJ&quot; Then
   Set Obj.Project = RowItem.Application
 End If
 If ReportType = &quot;CONT&quot; Then
   Set Obj.Contract = RowItem.Application
 End If
 If ReportType = &quot;PERS&quot; Then
   Set Obj.Person = RowItem.Application
 End If
 
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание отчета&quot;
end sub



'Создать новую оплату из клиента
'{42A1A436-8AA2-4F1F-999B-6680DFF514DE}
private sub Run_VBNewPayIn ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKP&quot;, &quot;Платеж &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKP_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKP_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKP_DEF.Item(1)
 End If
 
 Set Obj.FromClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'Создать новый платеж из клиента
'{2BB30818-90ED-4627-8ABB-85B3FBA46750}
private sub Run_VBNewPayOut ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKO&quot;, &quot;Оплата &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKO_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKO_DEF.Item(1)
 End If
 
 Set Obj.ToClient = RowItem.Application
 Obj.PLPDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Платежа&quot;
end sub



'открытие карточки по идентификатору
'{94E8F6DB-106A-44DC-9483-86C801798FF0}
private sub Run_VBOpenRef ( StartMode as variant ,ID as variant , optional RowItem as object )
on error resume next
If ID &lt;&gt; &quot;&quot; Then
    Dim Obj As Object
    Set Obj = item.Manager.GetInstanceObject(ID)
    If Not Obj Is Nothing Then
      Dim objGui As Object
      Set objGui =  item.Manager.GetInstanceGUI(Obj.ID)
      If objGui Is Nothing Then Exit Sub

       If StartMode = &quot;AUTO&quot; Then
        StartMode = &quot;&quot;
        dim i as long
        For i = 100 To 0 Step -10
          If Obj.MTZSession.CheckRight(Obj.SecureStyleid, Obj.TypeName &amp; &quot;:&quot; &amp; &quot;M&quot; &amp; i) Then
            StartMode = &quot;M&quot; &amp; i
            Exit For
          End If
        Next
       End If
      
      objGui.Show StartMode &amp; &quot;&quot;, Obj
      Set objGui = Nothing
    End If
  End If
  
end sub



'
'{069956DC-3305-45EF-9331-91CE323B5942}
private sub Run_WFDefName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Description
parentform.caption = item.name
Item.Save
end sub



'
'{D8914FB4-6B5D-491A-A72F-985617727583}
private sub Run_WFFuncName ( optional RowItem as object )
on error resume next
Item.Name = RowItem.Name
ParentForm.Caption = item.Name
Item.Save
end sub



'Изменить название объекта
'{4FB59D1A-0123-47D3-9F4F-E12085C5D074}
private sub Run_VBUpdateItemName ( Name as variant , optional RowItem as object )
on error resume next
item.name = Name
' может не быть формы, если используем просто ActiveX
ParentForm.Caption = item.Name
item.Save
end sub



'Создать заявку из клиента
'{49EA5CBF-93CF-41A8-B1F1-E37FE4D59EA5}
private sub Run_VBNewZayavka ( optional RowItem as object )
On error goto bye
Dim ID As String
 Dim Obj As Object
 ID = CreateGUID2
 Call RowItem.Application.Manager.NewInstance(ID, &quot;PEKZ&quot;, &quot;Заявка &quot; &amp; Date)
 Set RowItem.TheDocument = RowItem.Application.Manager.GetInstanceObject(ID)

 If RowItem.TheDocument.PEKO_DEF.Count = 0 Then
  Set Obj = RowItem.TheDocument.PEKz_DEF.Add
 Else
  Set Obj = RowItem.TheDocument.PEKZ_DEF.Item(1)
 End If
 
 Set Obj.ClientFrom = RowItem.Application
 Obj.QueryDate = Date
 Obj.Save
 RowItem.Save

 Exit Sub
bye:
  MsgBox Err.Description, vbOKOnly + vbCritical, &quot;Создание Заявки&quot;
end sub


Public Function StatusMenuCount() As Integer
  StatusMenuCount = 4
End Function
Public Function SetupStatusMenu(m() As Object)
    Dim i As Long
    On Error Resume Next
    i = 0
    i = i + 1
    m(i).Caption = &quot;Готов&quot;
    m(i).Visible = True
    m(i).Enabled = True
    m(i).Checked = false
    m(i).Tag = &quot;{FA679FCE-04E7-4A01-B1E2-114AAA82AD73}&quot;
    i = i + 1
    m(i).Caption = &quot;Оформляется&quot;
    m(i).Visible = True
    m(i).Enabled = True
    m(i).Checked = false
    m(i).Tag = &quot;{6422EAC9-256F-49D6-A0B7-2D4D3743E46A}&quot;
    i = i + 1
    m(i).Caption = &quot;В архиве&quot;
    m(i).Visible = True
    m(i).Enabled = True
    m(i).Checked = false
    m(i).Tag = &quot;{6631CB81-7B6D-4F69-B359-2F2E20025864}&quot;
    i = i + 1
    m(i).Caption = &quot;Завершен&quot;
    m(i).Visible = True
    m(i).Enabled = True
    m(i).Checked = false
    m(i).Tag = &quot;{37AA52E0-B042-4B51-B2F4-C10E09FF4793}&quot;
End function  
Public sub CheckStatusMenu(m() As Object)
    Dim i As Long
    On Error Resume Next
    For i = 1 To StatusMenuCount
        m(i).Checked = False
        m(i).Enabled = False
        If Not Item Is Nothing Then
          If m(i).Tag = Item.Statusid Then
            m(i).Checked = True
          End If
        End If
    Next
    If Not Item Is Nothing Then
      If Item.Statusid = &quot;{FA679FCE-04E7-4A01-B1E2-114AAA82AD73}&quot; Then
        For i = 1 To StatusMenuCount
          If m(i).Tag = &quot;{37AA52E0-B042-4B51-B2F4-C10E09FF4793}&quot; Then
            m(i).Enabled = True
          End If
        Next
      End If
      If Item.Statusid = &quot;{6422EAC9-256F-49D6-A0B7-2D4D3743E46A}&quot; Then
        For i = 1 To StatusMenuCount
          If m(i).Tag = &quot;{FA679FCE-04E7-4A01-B1E2-114AAA82AD73}&quot; Then
            m(i).Enabled = True
          End If
          If m(i).Tag = &quot;{6631CB81-7B6D-4F69-B359-2F2E20025864}&quot; Then
            m(i).Enabled = True
          End If
        Next
      End If
      If Item.Statusid = &quot;{6631CB81-7B6D-4F69-B359-2F2E20025864}&quot; Then
        For i = 1 To StatusMenuCount
        Next
      End If
      If Item.Statusid = &quot;{37AA52E0-B042-4B51-B2F4-C10E09FF4793}&quot; Then
        For i = 1 To StatusMenuCount
          If m(i).Tag = &quot;{6631CB81-7B6D-4F69-B359-2F2E20025864}&quot; Then
            m(i).Enabled = True
          End If
        Next
      End If
   End If
End sub  

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="frm_main" File=""><AttributeHolder Name="Type" Value="form"/><BlockHolder BlockName="'form" BlockCode=""><AttributeHolder Name="Type" Value="form"/><FormData Name=""><ControlData Name="mnuFile" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Файл"/><Properties Name="Name" PropValue="mnuFile"/><ControlData Name="mnuSaveAsXML" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Сохранить в формате XML"/><Properties Name="Name" PropValue="mnuSaveAsXML"/></ControlData><ControlData Name="mnuLock" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Заблокировать"/><Properties Name="Name" PropValue="mnuLock"/></ControlData><ControlData Name="mnuUnlock" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Разблокировать"/><Properties Name="Name" PropValue="mnuUnlock"/></ControlData><ControlData Name="mnuRename" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Переименовать"/><Properties Name="Name" PropValue="mnuRename"/></ControlData><ControlData Name="mnuExit" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Выход"/><Properties Name="Name" PropValue="mnuExit"/></ControlData></ControlData><ControlData Name="mnuStatus" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="Состояния"/><Properties Name="Name" PropValue="mnuStatus"/><ControlData Name="mnuState" ControlIndex="0" PROGID="VB.Menu"><Properties Name="Caption" PropValue="..."/><Properties Name="Name" PropValue="mnuState"/><Properties Name="Index" PropValue="1"/></ControlData></ControlData><ControlData Name="ctl" ControlIndex="0" PROGID="WFRtmGUI.ctl_main"><Properties Name="Name" PropValue="ctl"/><Properties Name="Top" PropValue="0"/><Properties Name="Left" PropValue="0"/><Properties Name="Width" PropValue="1500"/><Properties Name="Height" PropValue="1500"/></ControlData><PropertyData Name="tag" PropValue="Card.ICO"/><PropertyData Name="caption" PropValue="Процесс"/><PropertyData Name="ShowInTaskBar" PropValue="True"/></FormData></BlockHolder><BlockHolder BlockName="'description" BlockCode="public Item as object
public Host as GUI
public ModalMode as boolean

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
private sub mnuSaveAsXML_Click()
  on error resume next
 If item.application.MTZSession.CheckRight(item.SecureStyleID, &quot;XMLSAVE&quot;) Then
   Item.LockResource True
   Item.LoadAll
   Item.WorkOffline = True
   Dim xdom As MSXML2.DOMDocument
   Set xdom = New MSXML2.DOMDocument
   xdom.loadXML &quot;&lt;root&gt;&lt;/root&gt;&quot;
   Item.XMLSave xdom.lastChild, xdom
   xdom.Save App.Path &amp; &quot;\&quot; &amp; Item.ID &amp; &quot;.xml&quot;
   Item.WorkOffline = False
 end if
end sub
private sub mnuSecure_Click()
  on error resume next
  Item.Application.Manager.ShowSecurityDialog item
end sub
private sub mnuUnlock_Click()
  on error resume next
  if Item.IsLocked then 
    Item.UnlockResource
  else
  msgbox &quot;Объект не заблокирован&quot;,vbInformation 
  end if
end sub
private sub mnuLock_Click()
  on error resume next
    Item.LockResource true
end sub
private sub mnuRename_Click()
  on error resume next
  dim n as string
  n=inputbox(&quot;Новое название&quot;,&quot;Переименовать&quot;,item.name)
  if n &lt;&gt;&quot;&quot; and n &lt;&gt;item.name then
    Item.name = n
    Item.Save
    me.caption = item.name
  end if
end sub
private sub mnuExit_Click()
  on error resume next
  unload me
end sub
private sub mnuDelete_Click()
  on error goto bye
  If MsgBox(&quot;Удалить документ?&quot;, vbQuestion + vbYesNo) = vbYes Then
    Item.UnlockResource
    Item.WorkOffline = false
    Item.Manager.DeleteInstance Item.id 
    item.Manager.FreeInstanceObject item.ID
    unload me
  end if
  exit sub
bye:
   MsgBox err.description, vbCritical,&quot;Ошибка при удалении&quot; 
end sub
private sub mnuLoadFromXML_Click()
 on error resume next
 If item.application.MTZSession.CheckRight(item.SecureStyleID, &quot;XMLLOAD&quot;) Then
  Dim xdom As MSXML2.DOMDocument
  Set xdom = New MSXML2.DOMDocument
  xdom.load App.Path &amp; &quot;\&quot; &amp; Item.ID &amp; &quot;.xml&quot;
  Item.XMLLoad xdom.lastChild, 1
  Item.WorkOffline = False
  Item.BatchUpdate
  Set xdom = Nothing
 end if
end sub
private function ParentForm() as form
  set parentForm =me
end function
public sub Init( ObjItem as object, MyHost as GUI,aModalMode as boolean)
 set Item = objItem
 set Host = myHost
 ModalMode = aModalMode
 ctl.Init ObjItem,MyHost,aModalMode,me
 CheckStatus
end sub
Private Sub CheckStatus()
 If ctl.StatusMenuCount &gt; 0 Then
    Dim i As Long
    Dim mm() As Object
    ReDim mm(1 To ctl.StatusMenuCount)
    For i = 1 To ctl.StatusMenuCount
      Set mm(i) = mnuState(i)
    Next
    ctl.CheckStatusMenu mm
  End If
End Sub
Private Sub Form_Activate()
 CheckStatus
end sub
Private Sub Form_Load()
  on error resume next
  me.caption = Item.brief
  Dim ff As Long, buf As String
  LoadFromSkin me
  ctl.Move 0,0,Me.ScaleWidth,Me.ScaleHeight
  If ctl.StatusMenuCount &gt; 0 Then
    Dim i As Long
    Dim mm() As Object
    ReDim mm(1 To ctl.StatusMenuCount)
    Set mm(1) = mnuState(1)
    For i = 2 To ctl.StatusMenuCount
     Load mnuState(i)
     Set mm(i) = mnuState(i)
    Next
    ctl.SetupStatusMenu mm
    CheckStatus
  Else
    mnuStatus.Visible = False
  End If
End Sub
Private Sub mnuState_Click(Index As Integer)
  On Error Resume Next
  If BeforeChangeStatus(item, mnuState(Index).Tag) Then
    Item.Statusid = mnuState(Index).Tag
    CheckStatus
  End If
end sub
Public Function BeforeChangeStatus(item As Object, NewStatus As String) As Boolean
  Dim logic As Object
  Dim result As Boolean
  result = True
  On Error Resume Next
  Dim MyUser As Object
  Set MyUser = item.FindRowObject(&quot;Users&quot;, item.mtzSession.GetSessionUserID())
  Set logic = CreateObject(item.TypeName &amp; &quot;BST.BEFORESTATUS&quot;)
  If Not logic Is Nothing Then
    result = logic.Check(item, NewStatus, MyUser, item.TypeName)
    Set logic = Nothing
  End If
  BeforeChangeStatus = result
End Function
Private Sub Form_Unload(Cancel As Integer)
  If Not Host Is Nothing Then
    If Not Item Is Nothing Then
      If Not ctl Is Nothing Then
On Error GoTo bye
        If ctl.IsChanged Then
            If MsgBox(&quot;Закрыть без сохранения?&quot;, vbCritical + vbYesNo, Me.Caption) = vbYes Then
                If Not CheckIsOk(Item) Then
                    If MsgBox(&quot;Поля не заполнены. Удалить документ?&quot;, vbCritical + vbYesNo, Me.Caption) = vbYes Then
                        On Error Resume Next
                        Item.Manager.DeleteInstance Item.ID
                        Host.EraseForm Item.ID,&quot;&quot;,ModalMode
                        Set Item = Nothing
                        Exit Sub
                    End If
                End If
            Else
                Cancel = -1
                Exit Sub
            End If
        Else
            If CheckIsNew(Item) Then
              On Error Resume Next
              Item.Manager.DeleteInstance Item.ID
              Host.EraseForm Item.ID, &quot;&quot;,ModalMode
              Set Item = Nothing
              Exit Sub
            End If

            If Not CheckIsOk(Item) Then
                If MsgBox(&quot;Поля не заполнены. Удалить документ?&quot;, vbCritical + vbYesNo, Me.Caption) = vbYes Then
                    On Error Resume Next
                    Item.Manager.DeleteInstance Item.ID
                    Host.EraseForm Item.ID,&quot;&quot;,ModalMode
                    Set Item = Nothing
                    Exit Sub
                End If
            End If
        End If
On Error Resume Next
      End If
      Host.EraseForm Item.ID, &quot;&quot;,ModalMode
    End If
  End If
  Exit Sub
bye:
  If MsgBox(&quot;Ошибка при закрытии:&quot; &amp; vbCrLf &amp; Err.Description, vbCritical + vbYesNo, &quot;Закрыть окно?&quot;) = vbNo Then
    Cancel = -1
  End If


End Sub
Public Function CheckIsOk(o As Object)
    'get plain part
    Dim res As Boolean
    Dim p_col As Object
    Dim p As Object
    Dim rs As ADODB.Recordset
    Dim rsf As ADODB.Recordset
    Dim val As Object
    Dim strval As String
    Dim numres As Double

    res = False
    Set rs = o.MTZSession.GetData(&quot;select part.name as pName,PartType from part, objecttype where part.parentstructrowid=objecttype.objecttypeid and objecttype.Name='&quot; &amp; o.TypeName &amp; &quot;' and part.parentrowid is null&quot;) ' and part.Parttype=0&quot;)

    While Not rs.EOF
        Dim PartName As String
        Dim FieldName As String
        PartName = rs!pName &amp; &quot;&quot;
        If rs!PartType = 0 Then
          Set p_col = CallByName(o, PartName, VbGet, False)
          Set p = p_col.Item(1)
          Set rsf = o.Application.MTZSession.GetData(&quot;select field.name as fName from field, part where field.parentstructrowId=part.partid and part.name='&quot; &amp; PartName &amp; &quot;'&quot;)
          While Not rsf.EOF
              FieldName = rsf!fname &amp; &quot;&quot;
              On Error Resume Next
              Set val = CallByName(p, FieldName, VbGet)
              If Err.Number &lt;&gt; 0 Then
                  Err.Clear
                  numres = CallByName(p, FieldName, VbGet)
                  If Err.Number &lt;&gt; 0 Then
                      Err.Clear
                      strval = CallByName(p, FieldName, VbGet)
                      If Len(strval) &gt; 0 Then
                          CheckIsOk = True
                      End If
                  Else
                      If numres &lt;&gt; 0 Then
                          CheckIsOk = True
                      End If
                  End If
              Else
                  If Not (val Is Nothing) Then
                      CheckIsOk = True
                  End If
              End If
              rsf.MoveNext
          Wend
        ElseIf rs!PartType &lt;&gt; 3 Then
          Set p_col = CallByName(o, PartName, VbGet, False)
          If p_col.Count &gt; 0 Then
            CheckIsOk = True
          End If
        End If
        rs.MoveNext
    Wend
End Function


Public Function CheckIsNew(o As Object)
    'get plain part
    Dim res As Boolean
    Dim p_col As Object
    Dim p As Object
    Dim rs As ADODB.Recordset
    Dim rsf As ADODB.Recordset
    Dim rsfcheck As ADODB.Recordset
    Dim val As Object
    Dim strval As String
    Dim numres As Double

    res = False
    CheckIsNew = True
    Set rs = o.MTZSession.GetData(&quot;select part.name as pName from part, objecttype where part.parentrowid is null and  part.parentstructrowid=objecttype.objecttypeid and objecttype.Name='&quot; &amp; o.TypeName &amp; &quot;'&quot;) ' and part.Parttype=0&quot;)

    While Not rs.EOF
        Dim PartName As String
        Dim FieldName As String
        PartName = rs!pName &amp; &quot;&quot;
        on error resume next
        Set rsf = o.Application.MTZSession.GetData(&quot;select Count(*) cnt from &quot; &amp; PartName &amp; &quot; where instanceid='&quot; &amp; o.ID &amp; &quot;'&quot;)
        on error goto 0
        If Not rsf Is Nothing Then
          If Not rsf.EOF Then
            If rsf!cnt &gt; 0 Then
              Set rsf = o.Application.MTZSession.GetData(&quot;select field.name as fName from field, part where field.parentstructrowId=part.partid and part.name='&quot; &amp; PartName &amp; &quot;'  and  IsAutoNumber=0&quot;) 'AllowNull=-1 and
              while not rsf.eof
                Set rsfcheck = o.Application.MTZSession.GetData(&quot;select Count(*) cnt from &quot; &amp; PartName &amp; &quot; where instanceid='&quot; &amp; o.ID &amp; &quot;' and &quot; &amp; rsf!fname &amp; &quot; is not null&quot;)
                If Not rsfcheck Is Nothing Then
                  If Not rsfcheck.EOF Then
                    If rsfcheck!cnt &gt; 0 Then
                      CheckIsNew = False
                    End If
                  End If
                End If
                rsf.movenext
              wend
            End If
          End If
        End If
        Set rsf = Nothing
        rs.MoveNext
    Wend
    Set rs = Nothing
End Function
private sub Form_Resize()
 if me.windowstate =1 then exit sub
 on error resume next
 ctl.Move 0,0,Me.ScaleWidth,Me.ScaleHeight
end sub

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder><ModuleHolder ModuleName="Util" File=""><AttributeHolder Name="Instancing" Value="private"/><AttributeHolder Name="Type" Value="module"/><BlockHolder BlockName="'description" BlockCode="

"><AttributeHolder Name="Type" Value="description"/><FormData Name=""/></BlockHolder><BlockHolder BlockName="'codebody" BlockCode="
public function FormByName( byval Name as string, optional byval Mode as string =&quot;&quot; ) as form
if Mode=&quot;&quot; then

if Name=&quot;WFRtm_main&quot; then 
 set FormByName = new frmWFRtm_main_
 exit function
end if

if Name=&quot;WFRtm_func&quot; then 
 set FormByName = new frmWFRtm_func_
 exit function
end if

if Name=&quot;WFRtm_Pcomm&quot; then 
 set FormByName = new frmWFRtm_Pcomm_
 exit function
end if

if Name=&quot;WFRtm_Param&quot; then 
 set FormByName = new frmWFRtm_Param_
 exit function
end if

if Name=&quot;WFRtm_Doc&quot; then 
 set FormByName = new frmWFRtm_Doc_
 exit function
end if

if Name=&quot;WFRTM_SUBPROCESS&quot; then 
 set FormByName = new frmWFRTM_SUBPROCESS_
 exit function
end if

end if
end function
public sub LoadFromSkin( frm as form )
  on error resume next
  Dim s As String, arr() as string
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  Dim ff As Long, buf As String
  ff = FreeFile
  Open s &amp; frm.name For Input As #ff
  buf = Input(LOF(ff), ff)
  Close #ff
  arr = split(buf, vbcrlf)
  Dim arr2() As String, i as long
For i = 0 To UBound(arr)
  arr2 = Split(arr(i), &quot;:&quot;)
  Select Case arr2(0)
  case &quot;FormTag&quot;
    frm.Tag = arr2(1)
  Case &quot;FormTop&quot;
    frm.Top = arr2(1)
  Case &quot;FormLeft&quot;
    frm.left = arr2(1)
  Case &quot;FormWidth&quot;
    frm.Width = arr2(1)
  Case &quot;FormHeight&quot;
    frm.Height = arr2(1)
  Case Else
    frm.Controls(arr2(0)).tag = Val(arr2(1))
  End Select
Next
  s =&quot;&quot; 
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;IMAGEPATH&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  set frm.icon = LoadPicture(s &amp; frm.tag)
end sub

public sub SaveToSkin( frm as form )
  on error resume next
  Dim s As String, buf as string
  s = GetSetting(&quot;MTZ&quot;, &quot;CONFIG&quot;, &quot;LAYOUTS&quot;, &quot;&quot;)
  If s = &quot;&quot; Then Exit Sub
  frm.WindowState =0 
  Dim ff As Long
  ff = FreeFile
  kill s &amp; frm.name
  Open s &amp; frm.name For output As #ff
  buf =  &quot;FormTag:&quot; &amp; frm.Tag 
  buf = buf &amp; vbcrlf &amp; &quot;FormTop:&quot; &amp; frm.Top 
  buf = buf &amp; vbCrLf &amp; &quot;FormLeft:&quot; &amp; frm.Left
  buf = buf &amp; vbCrLf &amp; &quot;FormWidth:&quot; &amp; frm.Width
  buf = buf &amp; vbCrLf &amp; &quot;FormHeight:&quot; &amp; frm.Height
  print #ff, buf
  Close #ff
end sub

Public Sub SaveToBuffer(u As Object)
      Dim xdom As MSXML2.DOMDocument
      Set xdom = New MSXML2.DOMDocument
      xdom.loadXML &quot;&lt;I&gt;&lt;/I&gt;&quot;
      u.XMLSave xdom.lastChild, xdom
      u.Application.Manager.SetBuffer u.PartName, xdom.xml
      Set xdom = Nothing
End Sub

Public Function GetFromBuffer(u As Object) As Boolean
      On Error GoTo bye
      Dim xdom As MSXML2.DOMDocument
      Set xdom = New MSXML2.DOMDocument
      GetFromBuffer = False
      If u.Application.Manager.GetBuffer(u.PartName) &lt;&gt; &quot;&quot; Then
        xdom.loadXML u.Application.Manager.GetBuffer(u.PartName)
        u.XMLLoad xdom.lastChild, 2
        U.BatchUpdate
        GetFromBuffer = True
      Else
        MsgBox &quot;Буфер данных для этого раздела пуст&quot;, vbInformation
      End If
    Exit Function
bye:
    MsgBox Err.Description, vbCritical
End Function

"><AttributeHolder Name="Type" Value="code"/><FormData Name=""/></BlockHolder></ModuleHolder></root>
